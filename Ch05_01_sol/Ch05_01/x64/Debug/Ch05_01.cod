; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30143.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__97D3638F_vcruntime_new@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__B49664B7_stdlib@h DB 01H
__244AF085_cstdlib DB 01H
__60BC708E_cmath DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__589FA321_type_traits DB 01H
__12269DE6_xutility DB 01H
__20BB4341_malloc@h DB 01H
__B0A13A33_vcruntime_exception@h DB 01H
__FF458F76_exception DB 01H
__7FE5F402_limits DB 01H
__79D216CD_xmemory DB 01H
__0D019051_xstring DB 01H
__760BB52B_stdexcept DB 01H
__A4685E82_xcall_once@h DB 01H
__A0B61CF9_time@h DB 01H
__DDB379A0_xthreads@h DB 01H
__14D0A8C0_atomic DB 01H
__1B354CA2_system_error DB 01H
__65ADBEC9_vcruntime_typeinfo@h DB 01H
__62F96EFF_typeinfo DB 01H
__C34BF88C_memory DB 01H
__EF0EAF83_xfacet DB 01H
__B2D2BA86_ctype@h DB 01H
__7D708D37_xlocinfo DB 01H
__D23FE460_xlocale DB 01H
__4495FA24_xiosbase DB 01H
__4CB88277_xlocnum DB 01H
__845859A3_ios DB 01H
__67DA974F_xlocmon DB 01H
__D96D2425_xloctime DB 01H
__B7987E10_string DB 01H
__79C7FC57_basetsd@h DB 01H
__D545DD43_guiddef@h DB 01H
__D5DDFBF3_winnt@h DB 01H
__439612F0_processthreadsapi@h DB 01H
__5733279A_memoryapi@h DB 01H
__D4435474_winerror@h DB 01H
__B3ED30D4_winbase@h DB 01H
__DB057BA3_winuser@h DB 01H
__A7113148_winioctl@h DB 01H
__EC5BC72C_propidl@h DB 01H
__6DA674A0_oleauto@h DB 01H
__A118E6DC_stralign@h DB 01H
__0D8B5661_OS@h DB 01H
__0AAF5CB5_AlignedMem@h DB 01H
__CB82CB62_Ch05_01@cpp DB 01H
__A2FF0B9E_istream DB 01H
__C12F3EA4_ostream DB 01H
__74AB0D97_streambuf DB 01H
__038A2AA6_iterator DB 01H
__B30C2184_iosfwd DB 01H
__1347750E_utility DB 01H
__E458E21C_xstddef DB 01H
__5E3DCDCC_iomanip DB 01H
__F54903A0_xatomic@h DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	wmemcpy
PUBLIC	??0exception@std@@QEAA@QEBD@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	??0runtime_error@std@@QEAA@PEBD@Z		; std::runtime_error::runtime_error
PUBLIC	??1runtime_error@std@@UEAA@XZ			; std::runtime_error::~runtime_error
PUBLIC	??0runtime_error@std@@QEAA@AEBV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UEAAPEAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPEA_WPEB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
PUBLIC	?fixed@std@@YAAEAVios_base@1@AEAV21@@Z		; std::fixed
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	?AlignedFree@OS@@SAXPEAX@Z			; OS::AlignedFree
PUBLIC	?AlignedMalloc@OS@@SAPEAX_K0@Z			; OS::AlignedMalloc
PUBLIC	?Allocate@AlignedMem@@SAPEAX_K0@Z		; AlignedMem::Allocate
PUBLIC	?Release@AlignedMem@@SAXPEAX@Z			; AlignedMem::Release
PUBLIC	main
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??0?$AlignedArray@N@@QEAA@_K0@Z			; AlignedArray<double>::AlignedArray<double>
PUBLIC	??1?$AlignedArray@N@@QEAA@XZ			; AlignedArray<double>::~AlignedArray<double>
PUBLIC	?Data@?$AlignedArray@N@@QEAAPEANXZ		; AlignedArray<double>::Data
PUBLIC	?__autoclassinit2@?$AlignedArray@N@@QEAAX_K@Z	; AlignedArray<double>::__autoclassinit2
PUBLIC	??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24
PUBLIC	??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	_TI2?AVruntime_error@std@@
PUBLIC	_CTA2?AVruntime_error@std@@
PUBLIC	??_C@_0CO@NNIDGND@Memory?5allocation?5error?3?5Alloca@ ; `string'
PUBLIC	??_C@_0BE@IGAHIBMI@Ch05_01?5exception?3?5@	; `string'
PUBLIC	??_C@_0BP@JICMLFBC@?6CalcLeastSquares_Cpp?5Results?6@ ; `string'
PUBLIC	??_C@_08EFDOMHIF@?5slope?3?5@			; `string'
PUBLIC	??_C@_0N@LABPDFLK@?5intercept?3?5@		; `string'
PUBLIC	??_C@_0CB@JLGLNHDF@?6CalcLeastSquares_Iavx2?5Results@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__calloc_dbg:PROC
EXTRN	__imp__aligned_free:PROC
EXTRN	__imp__aligned_malloc:PROC
EXTRN	memcpy:PROC
EXTRN	__imp_wcslen:PROC
EXTRN	strlen:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Eruntime_error@std@@UEAAPEAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	_Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?setf@ios_base@std@@QEAAHHH@Z:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	?setprecision@std@@YA?AU?$_Smanip@_J@1@_J@Z:PROC ; std::setprecision
EXTRN	?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z:PROC	; std::setw
EXTRN	?CalcLeastSquares_Cpp@@YAXPEAN0PEBN1_K@Z:PROC	; CalcLeastSquares_Cpp
EXTRN	?CalcLeastSquares_Iavx2@@YAXPEAN0PEBN1_K@Z:PROC	; CalcLeastSquares_Iavx2
EXTRN	?FillArrays@@YAXPEAN0_K@Z:PROC			; FillArrays
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wmemcpy DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$wmemcpy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+210
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+96
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+95
	DD	imagerel $unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0runtime_error@std@@QEAA@PEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+89
	DD	imagerel $unwind$??0runtime_error@std@@QEAA@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1runtime_error@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??1runtime_error@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0runtime_error@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0runtime_error@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gruntime_error@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gruntime_error@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z DD imagerel $LN12
	DD	imagerel $LN12+586
	DD	imagerel $unwind$??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Maklocwcs@std@@YAPEA_WPEB_W@Z DD imagerel $LN4
	DD	imagerel $LN4+142
	DD	imagerel $unwind$?_Maklocwcs@std@@YAPEA_WPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z DD imagerel $LN7
	DD	imagerel $LN7+200
	DD	imagerel $unwind$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fixed@std@@YAAEAVios_base@1@AEAV21@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?fixed@std@@YAAEAVios_base@1@AEAV21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+356
	DD	imagerel $unwind$??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+356
	DD	imagerel $unwind$??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AlignedFree@OS@@SAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?AlignedFree@OS@@SAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AlignedMalloc@OS@@SAPEAX_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+108
	DD	imagerel $unwind$?AlignedMalloc@OS@@SAPEAX_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Allocate@AlignedMem@@SAPEAX_K0@Z DD imagerel $LN4
	DD	imagerel $LN4+118
	DD	imagerel $unwind$?Allocate@AlignedMem@@SAPEAX_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Release@AlignedMem@@SAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?Release@AlignedMem@@SAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalcLS@@YAXXZ DD imagerel ?CalcLS@@YAXXZ
	DD	imagerel ?CalcLS@@YAXXZ+819
	DD	imagerel $unwind$?CalcLS@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??CalcLS@@YAXXZ@4HA DD imagerel ?dtor$0@?0??CalcLS@@YAXXZ@4HA
	DD	imagerel ?dtor$0@?0??CalcLS@@YAXXZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??CalcLS@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??CalcLS@@YAXXZ@4HA DD imagerel ?dtor$1@?0??CalcLS@@YAXXZ@4HA
	DD	imagerel ?dtor$1@?0??CalcLS@@YAXXZ@4HA+36
	DD	imagerel $unwind$?dtor$1@?0??CalcLS@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN9
	DD	imagerel $LN9+85
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main$catch$0 DD imagerel main$catch$0
	DD	imagerel main$catch$0+104
	DD	imagerel $unwind$main$catch$0
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN25
	DD	imagerel $LN25+1036
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+80
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DD imagerel $LN23
	DD	imagerel $LN23+1003
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA+80
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$AlignedArray@N@@QEAA@_K0@Z DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$??0?$AlignedArray@N@@QEAA@_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$AlignedArray@N@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??1?$AlignedArray@N@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Data@?$AlignedArray@N@@QEAAPEANXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?Data@?$AlignedArray@N@@QEAAPEANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__autoclassinit2@?$AlignedArray@N@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?__autoclassinit2@?$AlignedArray@N@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+148
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN7
	DD	imagerel $LN7+261
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+116
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD imagerel ??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD imagerel ??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 01H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVruntime_error@std@@@8
	DD	imagerel ??_R3runtime_error@std@@8
	DD	imagerel ??_R4runtime_error@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JLGLNHDF@?6CalcLeastSquares_Iavx2?5Results@
CONST	SEGMENT
??_C@_0CB@JLGLNHDF@?6CalcLeastSquares_Iavx2?5Results@ DB 0aH, 'CalcLeastS'
	DB	'quares_Iavx2 Results', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LABPDFLK@?5intercept?3?5@
CONST	SEGMENT
??_C@_0N@LABPDFLK@?5intercept?3?5@ DB ' intercept: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EFDOMHIF@?5slope?3?5@
CONST	SEGMENT
??_C@_08EFDOMHIF@?5slope?3?5@ DB ' slope: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JICMLFBC@?6CalcLeastSquares_Cpp?5Results?6@
CONST	SEGMENT
??_C@_0BP@JICMLFBC@?6CalcLeastSquares_Cpp?5Results?6@ DB 0aH, 'CalcLeastS'
	DB	'quares_Cpp Results', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IGAHIBMI@Ch05_01?5exception?3?5@
CONST	SEGMENT
??_C@_0BE@IGAHIBMI@Ch05_01?5exception?3?5@ DB 'Ch05_01 exception: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NNIDGND@Memory?5allocation?5error?3?5Alloca@
CONST	SEGMENT
??_C@_0CO@NNIDGND@Memory?5allocation?5error?3?5Alloca@ DB 'Memory allocat'
	DB	'ion error: AllocateAlignedMem()', 00H	; `string'
CONST	ENDS
;	COMDAT _CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
_CTA2?AVruntime_error@std@@ DD 02H
	DD	imagerel _CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI2?AVruntime_error@std@@
xdata$x	SEGMENT
_TI2?AVruntime_error@std@@ DD 00H
	DD	imagerel ??1runtime_error@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA DD 05aH ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT _CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0runtime_error@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DQ FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DQ	FLAT:??_Eruntime_error@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 06H
	DB	00H
	DB	00H
	DB	'p'
	DB	02H
	DB	0f1H, 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025051811H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__autoclassinit2@?$AlignedArray@N@@QEAAX_K@Z DD 05051601H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Data@?$AlignedArray@N@@QEAAPEANXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$AlignedArray@N@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$AlignedArray@N@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$AlignedArray@N@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$AlignedArray@N@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$AlignedArray@N@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$AlignedArray@N@@QEAA@_K0@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03aH
	DW	03d2H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 0aH
	DB	00H
	DB	00H
	DB	0caH
	DB	02H
	DB	011H, 02H
	DB	04H
	DB	08dH, 09H
	DB	02H
	DB	0c0H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DD 025054119H
	DD	01122317H
	DD	0700b0049H
	DD	0500aH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	023bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcVarDesc DD 048H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	03f3H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0aH
	DB	00H
	DB	00H
	DB	'A', 04H
	DB	02H
	DB	'<'
	DB	04H
	DB	095H, 09H
	DB	02H
	DB	't'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 025054219H
	DD	01132318H
	DD	0700c0045H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	021bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc DD 088H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main$catch$0 DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$main DB 06H
	DB	00H
	DB	00H
	DB	'Z'
	DB	02H
	DB	0cH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$main DB 02H
	DB	07H
	DB	010H
	DD	imagerel ??_R0?AVexception@std@@@8
	DB	'P'
	DD	imagerel main$catch$0
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$main DB	02H
	DB	00H
	DB	00H
	DB	02H
	DD	imagerel $handlerMap$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$main DB 04H
	DB	08H
	DB	010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$main DB 038H
	DD	imagerel $stateUnwindMap$main
	DD	imagerel $tryMap$main
	DD	imagerel $ip2state$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	025052019H
	DD	010a230fH
	DD	070030021H
	DD	05002H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$main
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
main$rtcName$0 DB 065H
	DB	078H
	DB	00H
	ORG $+13
main$rtcVarDesc DD 028H
	DD	08H
	DQ	FLAT:main$rtcName$0
	ORG $+48
main$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02aH
	DW	031aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??CalcLS@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??CalcLS@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?CalcLS@@YAXXZ DB 0aH
	DB	00H
	DB	00H
	DB	0d0H
	DB	02H
	DB	'F'
	DB	04H
	DB	0b1H, 09H
	DB	02H
	DB	014H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?CalcLS@@YAXXZ DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0??CalcLS@@YAXXZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??CalcLS@@YAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?CalcLS@@YAXXZ DB 028H
	DD	imagerel $stateUnwindMap$?CalcLS@@YAXXZ
	DD	imagerel $ip2state$?CalcLS@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalcLS@@YAXXZ DD 035053119H
	DD	010a330fH
	DD	070030087H
	DD	05002H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?CalcLS@@YAXXZ
	DD	0422H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?CalcLS@@YAXXZ$rtcName$0 DB 078H			; CalcLS
	DB	05fH
	DB	061H
	DB	061H
	DB	00H
	ORG $+3
?CalcLS@@YAXXZ$rtcName$1 DB 079H			; CalcLS
	DB	05fH
	DB	061H
	DB	061H
	DB	00H
	ORG $+3
?CalcLS@@YAXXZ$rtcName$2 DB 06dH			; CalcLS
	DB	031H
	DB	00H
	ORG $+1
?CalcLS@@YAXXZ$rtcName$3 DB 06dH			; CalcLS
	DB	032H
	DB	00H
	ORG $+1
?CalcLS@@YAXXZ$rtcName$4 DB 062H			; CalcLS
	DB	031H
	DB	00H
	ORG $+1
?CalcLS@@YAXXZ$rtcName$5 DB 062H			; CalcLS
	DB	032H
	DB	00H
	ORG $+1
?CalcLS@@YAXXZ$rtcVarDesc DD 0158H			; CalcLS
	DD	08H
	DQ	FLAT:?CalcLS@@YAXXZ$rtcName$5
	DD	0138H
	DD	08H
	DQ	FLAT:?CalcLS@@YAXXZ$rtcName$4
	DD	0118H
	DD	08H
	DQ	FLAT:?CalcLS@@YAXXZ$rtcName$3
	DD	0f8H
	DD	08H
	DQ	FLAT:?CalcLS@@YAXXZ$rtcName$2
	DD	088H
	DD	010H
	DQ	FLAT:?CalcLS@@YAXXZ$rtcName$1
	DD	058H
	DD	010H
	DQ	FLAT:?CalcLS@@YAXXZ$rtcName$0
	ORG $+288
?CalcLS@@YAXXZ$rtcFrameData DD 06H			; CalcLS
	DD	00H
	DQ	FLAT:?CalcLS@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Release@AlignedMem@@SAXPEAX@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Allocate@AlignedMem@@SAPEAX_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c0027H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AlignedMalloc@OS@@SAPEAX_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AlignedFree@OS@@SAXPEAX@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD 025061e01H
	DD	0119231eH
	DD	070120026H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD 025061e01H
	DD	0119231eH
	DD	070120026H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fixed@std@@YAAEAVios_base@1@AEAV21@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z DD 035051d01H
	DD	0118331dH
	DD	07011002bH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Maklocwcs@std@@YAPEA_WPEB_W@Z DD 035051301H
	DD	010e3313H
	DD	070070027H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0231H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z DD 035054719H
	DD	0118331dH
	DD	070110047H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0228H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$0 DB 05fH ; std::_Maklocstr<wchar_t>
	DB	057H
	DB	063H
	DB	00H
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$1 DB 05fH ; std::_Maklocstr<wchar_t>
	DB	04dH
	DB	062H
	DB	073H
	DB	074H
	DB	031H
	DB	00H
	ORG $+1
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$2 DB 05fH ; std::_Maklocstr<wchar_t>
	DB	04dH
	DB	062H
	DB	073H
	DB	074H
	DB	032H
	DB	00H
	ORG $+13
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcVarDesc DD 0158H ; std::_Maklocstr<wchar_t>
	DD	08H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$2
	DD	0f8H
	DD	08H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$1
	DD	0d4H
	DD	02H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$0
	ORG $+144
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcFrameData DD 03H ; std::_Maklocstr<wchar_t>
	DD	00H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gruntime_error@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0runtime_error@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1runtime_error@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0runtime_error@std@@QEAA@PEBD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03bH
	DB	0b9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBD@Z DD 025054219H
	DD	01132318H
	DD	0700c0023H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0108H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??0exception@std@@QEAA@QEBD@Z$rtcName$0 DB 05fH		; std::exception::exception
	DB	049H
	DB	06eH
	DB	069H
	DB	074H
	DB	044H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+6
??0exception@std@@QEAA@QEBD@Z$rtcVarDesc DD 028H	; std::exception::exception
	DD	010H
	DQ	FLAT:??0exception@std@@QEAA@QEBD@Z$rtcName$0
	ORG $+48
??0exception@std@@QEAA@QEBD@Z$rtcFrameData DD 01H	; std::exception::exception
	DD	00H
	DQ	FLAT:??0exception@std@@QEAA@QEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wmemcpy DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 124  :         explicit __CLR_OR_THIS_CALL operator bool() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C12F3EA4_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 125  :             return _Ok;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 126  :         }

  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Zero_uncaught_exceptions$ = 4
tv72 = 212
this$ = 256
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C12F3EA4_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  0001f	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00024	0f b6 c0	 movzx	 eax, al
  00027	85 c0		 test	 eax, eax
  00029	75 09		 jne	 SHORT $LN4@sentry
  0002b	c6 85 d4 00 00
	00 01		 mov	 BYTE PTR tv72[rbp], 1
  00032	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  00034	c6 85 d4 00 00
	00 00		 mov	 BYTE PTR tv72[rbp], 0
$LN5@sentry:
  0003b	0f b6 85 d4 00
	00 00		 movzx	 eax, BYTE PTR tv72[rbp]
  00042	88 45 04	 mov	 BYTE PTR _Zero_uncaught_exceptions$[rbp], al

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  00045	0f b6 45 04	 movzx	 eax, BYTE PTR _Zero_uncaught_exceptions$[rbp]
  00049	85 c0		 test	 eax, eax
  0004b	74 10		 je	 SHORT $LN2@sentry

; 119  :                 this->_Myostr._Osfx();

  0004d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
$LN2@sentry:

; 120  :             }
; 121  :         }

  0005d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00064	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00069	90		 npad	 1
  0006a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C12F3EA4_ostream
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  0002b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00032	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00037	90		 npad	 1

; 93   :             if (!_Ostr.good()) {

  00038	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00046	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0004d	48 03 c8	 add	 rcx, rax
  00050	48 8b c1	 mov	 rax, rcx
  00053	48 8b c8	 mov	 rcx, rax
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  0005c	0f b6 c0	 movzx	 eax, al
  0005f	85 c0		 test	 eax, eax
  00061	75 10		 jne	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  00063	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0

; 95   :                 return;

  0006e	e9 81 00 00 00	 jmp	 $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  00073	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00081	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00088	48 03 c8	 add	 rcx, rax
  0008b	48 8b c1	 mov	 rax, rcx
  0008e	48 8b c8	 mov	 rcx, rax
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  00097	48 89 45 08	 mov	 QWORD PTR _Tied$[rbp], rax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  0009b	48 83 7d 08 00	 cmp	 QWORD PTR _Tied$[rbp], 0
  000a0	74 0d		 je	 SHORT $LN4@sentry
  000a2	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000a9	48 39 45 08	 cmp	 QWORD PTR _Tied$[rbp], rax
  000ad	75 0d		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  000af	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b6	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 101  :                 return;

  000ba	eb 38		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

  000bc	48 8b 4d 08	 mov	 rcx, QWORD PTR _Tied$[rbp]
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000c6	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000cd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d0	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000d4	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000db	48 03 c8	 add	 rcx, rax
  000de	48 8b c1	 mov	 rax, rcx
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  000ea	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	88 41 08	 mov	 BYTE PTR [rcx+8], al
$LN1@sentry:

; 106  :         }

  000f4	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00102	5f		 pop	 rdi
  00103	5d		 pop	 rbp
  00104	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Rdbuf$ = 8
tv72 = 216
this$ = 256
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C12F3EA4_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  0001f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00029	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  00030	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv72[rbp]
  00037	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0003e	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv72[rbp]
  00045	48 03 c8	 add	 rcx, rax
  00048	48 8b c1	 mov	 rax, rcx
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00054	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 80   :             if (_Rdbuf) {

  00058	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  0005d	74 0f		 je	 SHORT $LN2@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  0005f	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  00063	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00066	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  0006a	ff 50 10	 call	 QWORD PTR [rax+16]
  0006d	90		 npad	 1
$LN2@Sentry_bas:

; 82   :             }
; 83   :         }

  0006e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Rdbuf$ = 8
tv73 = 216
this$ = 256
_Ostr$ = 264
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C12F3EA4_ostream
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003f	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  00046	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv73[rbp]
  0004d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00050	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00054	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv73[rbp]
  0005b	48 03 c8	 add	 rcx, rax
  0005e	48 8b c1	 mov	 rax, rcx
  00061	48 8b c8	 mov	 rcx, rax
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006a	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 73   :             if (_Rdbuf) {

  0006e	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  00073	74 0e		 je	 SHORT $LN2@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

  00075	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  00079	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007c	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  00080	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Sentry_bas:

; 75   :             }
; 76   :         }

  00083	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00091	5f		 pop	 rdi
  00092	5d		 pop	 rbp
  00093	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\iomanip
;	COMDAT ??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z
_TEXT	SEGMENT
_Ostr$ = 224
_Manip$ = 232
??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,__int64>, COMDAT

; 423  :     const _Smanip<_Arg>& _Manip) { // insert by calling function with output stream and argument

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5E3DCDCC_iomanip
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 424  :     (*_Manip._Pfun)(_Ostr, _Manip._Manarg);

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00032	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00039	48 03 c8	 add	 rcx, rax
  0003c	48 8b c1	 mov	 rax, rcx
  0003f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Manip$[rbp]
  00046	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  0004a	48 8b c8	 mov	 rcx, rax
  0004d	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Manip$[rbp]
  00054	ff 10		 call	 QWORD PTR [rax]

; 425  :     return _Ostr;

  00056	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]

; 426  : }

  0005d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$AlignedArray@N@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 224
classSize$ = 232
?__autoclassinit2@?$AlignedArray@N@@QEAAX_K@Z PROC	; AlignedArray<double>::__autoclassinit2, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  0001d	33 c0		 xor	 eax, eax
  0001f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR classSize$[rbp]
  00026	f3 aa		 rep stosb
  00028	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002f	5f		 pop	 rdi
  00030	5d		 pop	 rbp
  00031	c3		 ret	 0
?__autoclassinit2@?$AlignedArray@N@@QEAAX_K@Z ENDP	; AlignedArray<double>::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch05_01_sol\Ch05_01\AlignedMem.h
;	COMDAT ?Data@?$AlignedArray@N@@QEAAPEANXZ
_TEXT	SEGMENT
this$ = 224
?Data@?$AlignedArray@N@@QEAAPEANXZ PROC			; AlignedArray<double>::Data, COMDAT

; 64   :     T* Data(void)               { return m_Data; }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0AAF5CB5_AlignedMem@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?Data@?$AlignedArray@N@@QEAAPEANXZ ENDP			; AlignedArray<double>::Data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch05_01_sol\Ch05_01\AlignedMem.h
;	COMDAT ??1?$AlignedArray@N@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$AlignedArray@N@@QEAA@XZ PROC			; AlignedArray<double>::~AlignedArray<double>, COMDAT

; 60   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0AAF5CB5_AlignedMem@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 61   :         AlignedMem::Release(m_Data);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00029	e8 00 00 00 00	 call	 ?Release@AlignedMem@@SAXPEAX@Z ; AlignedMem::Release
  0002e	90		 npad	 1

; 62   :     }

  0002f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00036	5f		 pop	 rdi
  00037	5d		 pop	 rbp
  00038	c3		 ret	 0
??1?$AlignedArray@N@@QEAA@XZ ENDP			; AlignedArray<double>::~AlignedArray<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch05_01_sol\Ch05_01\AlignedMem.h
;	COMDAT ??0?$AlignedArray@N@@QEAA@_K0@Z
_TEXT	SEGMENT
this$ = 224
size$ = 232
alignment$ = 240
??0?$AlignedArray@N@@QEAA@_K0@Z PROC			; AlignedArray<double>::AlignedArray<double>, COMDAT

; 53   :     AlignedArray(size_t size, size_t alignment)

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0AAF5CB5_AlignedMem@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 54   :     {
; 55   :         m_Size = size;

  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR size$[rbp]
  00037	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 56   :         m_Data = (T*)AlignedMem::Allocate(size * sizeof(T), alignment);

  0003b	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR size$[rbp]
  00042	48 c1 e0 03	 shl	 rax, 3
  00046	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR alignment$[rbp]
  0004d	48 8b c8	 mov	 rcx, rax
  00050	e8 00 00 00 00	 call	 ?Allocate@AlignedMem@@SAPEAX_K0@Z ; AlignedMem::Allocate
  00055	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 57   :     }

  0005f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00066	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006d	5f		 pop	 rdi
  0006e	5d		 pop	 rbp
  0006f	c3		 ret	 0
??0?$AlignedArray@N@@QEAA@_K0@Z ENDP			; AlignedArray<double>::AlignedArray<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
_TEXT	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
$T10 = 468
$T11 = 504
tv289 = 516
tv284 = 516
tv65 = 516
tv290 = 520
tv287 = 520
tv285 = 520
tv130 = 520
tv291 = 528
tv288 = 528
tv286 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Ch$ = 584
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 779  :     basic_ostream<char, _Traits>& _Ostr, char _Ch) { // insert a char into char stream

$LN23:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 48 02
	00 00		 sub	 rsp, 584		; 00000248H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001c	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR [rsp+616]
  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00037	48 33 c5	 xor	 rax, rbp
  0003a	48 89 85 18 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C12F3EA4_ostream
  00048	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 780  :     using _Elem = char;
; 781  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 782  : 
; 783  :     ios_base::iostate _State = ios_base::goodbit;

  0004d	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 784  :     const typename _Myos::sentry _Ok(_Ostr);

  00054	48 8b 95 40 02
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  0005b	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0005f	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00064	90		 npad	 1

; 785  : 
; 786  :     if (_Ok) { // state okay, insert

  00065	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00069	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0006e	0f b6 c0	 movzx	 eax, al
  00071	85 c0		 test	 eax, eax
  00073	0f 84 d5 02 00
	00		 je	 $LN8@operator

; 787  :         streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  00079	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00080	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00083	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00087	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0008e	48 03 c8	 add	 rcx, rax
  00091	48 8b c1	 mov	 rax, rcx
  00094	48 8b c8	 mov	 rcx, rax
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0009d	48 83 f8 01	 cmp	 rax, 1
  000a1	7f 0d		 jg	 SHORT $LN15@operator
  000a3	48 c7 85 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR tv130[rbp], 0
  000ae	eb 2e		 jmp	 SHORT $LN16@operator
$LN15@operator:
  000b0	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000b7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ba	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000be	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000c5	48 03 c8	 add	 rcx, rax
  000c8	48 8b c1	 mov	 rax, rcx
  000cb	48 8b c8	 mov	 rcx, rax
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000d4	48 ff c8	 dec	 rax
  000d7	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv130[rbp], rax
$LN16@operator:
  000de	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR tv130[rbp]
  000e5	48 89 45 58	 mov	 QWORD PTR _Pad$4[rbp], rax

; 788  : 
; 789  :         _TRY_IO_BEGIN
; 790  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000e9	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000f7	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000fe	48 03 c8	 add	 rcx, rax
  00101	48 8b c1	 mov	 rax, rcx
  00104	48 8b c8	 mov	 rcx, rax
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  0010d	89 85 04 02 00
	00		 mov	 DWORD PTR tv65[rbp], eax
  00113	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR tv65[rbp]
  00119	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0011e	83 f8 40	 cmp	 eax, 64			; 00000040H
  00121	0f 84 d0 00 00
	00		 je	 $LN10@operator

; 791  :             for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on left

  00127	eb 0b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00129	48 8b 45 58	 mov	 rax, QWORD PTR _Pad$4[rbp]
  0012d	48 ff c8	 dec	 rax
  00130	48 89 45 58	 mov	 QWORD PTR _Pad$4[rbp], rax
$LN4@operator:
  00134	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  00138	0f 85 b9 00 00
	00		 jne	 $LN10@operator
  0013e	48 83 7d 58 00	 cmp	 QWORD PTR _Pad$4[rbp], 0
  00143	0f 8e ae 00 00
	00		 jle	 $LN10@operator

; 792  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00149	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00150	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00153	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00157	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0015e	48 03 c8	 add	 rcx, rax
  00161	48 8b c1	 mov	 rax, rcx
  00164	48 8b c8	 mov	 rcx, rax
  00167	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  0016d	88 85 04 02 00
	00		 mov	 BYTE PTR tv284[rbp], al
  00173	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0017a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0017d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00181	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00188	48 03 c8	 add	 rcx, rax
  0018b	48 8b c1	 mov	 rax, rcx
  0018e	48 8b c8	 mov	 rcx, rax
  00191	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00197	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv285[rbp], rax
  0019e	0f b6 95 04 02
	00 00		 movzx	 edx, BYTE PTR tv284[rbp]
  001a5	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv285[rbp]
  001ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001b2	89 85 10 02 00
	00		 mov	 DWORD PTR tv286[rbp], eax
  001b8	8b 85 10 02 00
	00		 mov	 eax, DWORD PTR tv286[rbp]
  001be	89 85 34 01 00
	00		 mov	 DWORD PTR $T5[rbp], eax
  001c4	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001c9	89 85 54 01 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  001cf	48 8d 95 34 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  001d6	48 8d 8d 54 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  001dd	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001e2	0f b6 c0	 movzx	 eax, al
  001e5	85 c0		 test	 eax, eax
  001e7	74 09		 je	 SHORT $LN11@operator

; 793  :                     _State |= ios_base::badbit;

  001e9	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  001ec	83 c8 04	 or	 eax, 4
  001ef	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN11@operator:

; 794  :                 }
; 795  :             }

  001f2	e9 32 ff ff ff	 jmp	 $LN2@operator
$LN10@operator:

; 796  :         }
; 797  : 
; 798  :         if (_State == ios_base::goodbit && _Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ch))) {

  001f7	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  001fb	75 7f		 jne	 SHORT $LN12@operator
  001fd	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00204	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00207	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0020b	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00212	48 03 c8	 add	 rcx, rax
  00215	48 8b c1	 mov	 rax, rcx
  00218	48 8b c8	 mov	 rcx, rax
  0021b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00221	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv287[rbp], rax
  00228	0f b6 95 48 02
	00 00		 movzx	 edx, BYTE PTR _Ch$[rbp]
  0022f	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv287[rbp]
  00236	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  0023c	89 85 10 02 00
	00		 mov	 DWORD PTR tv288[rbp], eax
  00242	8b 85 10 02 00
	00		 mov	 eax, DWORD PTR tv288[rbp]
  00248	89 85 74 01 00
	00		 mov	 DWORD PTR $T7[rbp], eax
  0024e	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00253	89 85 94 01 00
	00		 mov	 DWORD PTR $T8[rbp], eax
  00259	48 8d 95 74 01
	00 00		 lea	 rdx, QWORD PTR $T7[rbp]
  00260	48 8d 8d 94 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00267	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0026c	0f b6 c0	 movzx	 eax, al
  0026f	85 c0		 test	 eax, eax
  00271	74 09		 je	 SHORT $LN12@operator

; 799  :             _State |= ios_base::badbit;

  00273	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00276	83 c8 04	 or	 eax, 4
  00279	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN12@operator:

; 800  :         }
; 801  : 
; 802  :         for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on right

  0027c	eb 0b		 jmp	 SHORT $LN7@operator
$LN5@operator:
  0027e	48 8b 45 58	 mov	 rax, QWORD PTR _Pad$4[rbp]
  00282	48 ff c8	 dec	 rax
  00285	48 89 45 58	 mov	 QWORD PTR _Pad$4[rbp], rax
$LN7@operator:
  00289	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  0028d	0f 85 b9 00 00
	00		 jne	 $LN6@operator
  00293	48 83 7d 58 00	 cmp	 QWORD PTR _Pad$4[rbp], 0
  00298	0f 8e ae 00 00
	00		 jle	 $LN6@operator

; 803  :             if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0029e	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002a5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002a8	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002ac	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002b3	48 03 c8	 add	 rcx, rax
  002b6	48 8b c1	 mov	 rax, rcx
  002b9	48 8b c8	 mov	 rcx, rax
  002bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002c2	88 85 04 02 00
	00		 mov	 BYTE PTR tv289[rbp], al
  002c8	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002cf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002d2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002d6	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002dd	48 03 c8	 add	 rcx, rax
  002e0	48 8b c1	 mov	 rax, rcx
  002e3	48 8b c8	 mov	 rcx, rax
  002e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002ec	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv290[rbp], rax
  002f3	0f b6 95 04 02
	00 00		 movzx	 edx, BYTE PTR tv289[rbp]
  002fa	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv290[rbp]
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  00307	89 85 10 02 00
	00		 mov	 DWORD PTR tv291[rbp], eax
  0030d	8b 85 10 02 00
	00		 mov	 eax, DWORD PTR tv291[rbp]
  00313	89 85 b4 01 00
	00		 mov	 DWORD PTR $T9[rbp], eax
  00319	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0031e	89 85 d4 01 00
	00		 mov	 DWORD PTR $T10[rbp], eax
  00324	48 8d 95 b4 01
	00 00		 lea	 rdx, QWORD PTR $T9[rbp]
  0032b	48 8d 8d d4 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00332	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00337	0f b6 c0	 movzx	 eax, al
  0033a	85 c0		 test	 eax, eax
  0033c	74 09		 je	 SHORT $LN13@operator

; 804  :                 _State |= ios_base::badbit;

  0033e	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00341	83 c8 04	 or	 eax, 4
  00344	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN13@operator:

; 805  :             }
; 806  :         }

  00347	e9 32 ff ff ff	 jmp	 $LN5@operator
$LN6@operator:
  0034c	eb 00		 jmp	 SHORT $LN8@operator
$LN21@operator:
$LN8@operator:

; 807  :         _CATCH_IO_(ios_base, _Ostr)
; 808  :     }
; 809  : 
; 810  :     _Ostr.width(0);

  0034e	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00355	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00358	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0035c	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00363	48 03 c8	 add	 rcx, rax
  00366	48 8b c1	 mov	 rax, rcx
  00369	33 d2		 xor	 edx, edx
  0036b	48 8b c8	 mov	 rcx, rax
  0036e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z

; 811  :     _Ostr.setstate(_State);

  00374	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0037b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0037e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00382	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00389	48 03 c8	 add	 rcx, rax
  0038c	48 8b c1	 mov	 rax, rcx
  0038f	45 33 c0	 xor	 r8d, r8d
  00392	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  00395	48 8b c8	 mov	 rcx, rax
  00398	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 812  :     return _Ostr;

  0039e	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  003a5	48 89 85 f8 01
	00 00		 mov	 QWORD PTR $T11[rbp], rax
  003ac	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  003b0	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003b5	48 8b 85 f8 01
	00 00		 mov	 rax, QWORD PTR $T11[rbp]

; 813  : }

  003bc	48 8b f8	 mov	 rdi, rax
  003bf	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  003c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcFrameData
  003ca	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003cf	48 8b c7	 mov	 rax, rdi
  003d2	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  003d9	48 33 cd	 xor	 rcx, rbp
  003dc	e8 00 00 00 00	 call	 __security_check_cookie
  003e1	48 8d a5 28 02
	00 00		 lea	 rsp, QWORD PTR [rbp+552]
  003e8	5f		 pop	 rdi
  003e9	5d		 pop	 rbp
  003ea	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
$T10 = 468
$T11 = 504
tv289 = 516
tv284 = 516
tv65 = 516
tv290 = 520
tv287 = 520
tv285 = 520
tv130 = 520
tv291 = 528
tv288 = 528
tv286 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Ch$ = 584
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
$T10 = 468
$T11 = 504
tv289 = 516
tv284 = 516
tv65 = 516
tv290 = 520
tv287 = 520
tv285 = 520
tv130 = 520
tv291 = 528
tv288 = 528
tv286 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Ch$ = 584
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 807  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$0:
  00014	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN21@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
$T10 = 468
$T11 = 504
tv289 = 516
tv284 = 516
tv65 = 516
tv290 = 520
tv287 = 520
tv285 = 520
tv130 = 520
tv291 = 528
tv288 = 528
tv286 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Ch$ = 584
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
$T10 = 468
$T11 = 504
tv289 = 516
tv284 = 516
tv65 = 516
tv290 = 520
tv287 = 520
tv285 = 520
tv130 = 520
tv291 = 528
tv288 = 528
tv286 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Ch$ = 584
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 807  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$0:
  00014	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN21@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv300 = 484
tv295 = 484
tv139 = 484
tv301 = 488
tv298 = 488
tv296 = 488
tv137 = 488
tv302 = 496
tv299 = 496
tv297 = 496
__$ArrayPad$ = 504
_Ostr$ = 544
_Val$ = 552
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 734  :     const char* _Val) { // insert NTBS into char stream

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001d	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR [rsp+584]
  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00038	48 33 c5	 xor	 rax, rbp
  0003b	48 89 85 f8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C12F3EA4_ostream
  00049	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 735  :     using _Elem = char;
; 736  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 737  : 
; 738  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 739  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00055	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  0005c	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  00061	48 89 45 28	 mov	 QWORD PTR _Count$[rbp], rax

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00065	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0006c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00073	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0007a	48 03 c8	 add	 rcx, rax
  0007d	48 8b c1	 mov	 rax, rcx
  00080	48 8b c8	 mov	 rcx, rax
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  00089	48 85 c0	 test	 rax, rax
  0008c	7e 5b		 jle	 SHORT $LN17@operator
  0008e	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0009c	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000a3	48 03 c8	 add	 rcx, rax
  000a6	48 8b c1	 mov	 rax, rcx
  000a9	48 8b c8	 mov	 rcx, rax
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000b2	48 3b 45 28	 cmp	 rax, QWORD PTR _Count$[rbp]
  000b6	7e 31		 jle	 SHORT $LN17@operator
  000b8	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000bf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c6	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000cd	48 03 c8	 add	 rcx, rax
  000d0	48 8b c1	 mov	 rax, rcx
  000d3	48 8b c8	 mov	 rcx, rax
  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000dc	48 2b 45 28	 sub	 rax, QWORD PTR _Count$[rbp]
  000e0	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv137[rbp], rax
  000e7	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000e9	48 c7 85 e8 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv137[rbp], 0
$LN18@operator:
  000f4	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR tv137[rbp]
  000fb	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax

; 741  :     const typename _Myos::sentry _Ok(_Ostr);

  000ff	48 8b 95 20 02
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00106	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0010a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0010f	90		 npad	 1

; 742  : 
; 743  :     if (!_Ok) {

  00110	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00114	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00119	0f b6 c0	 movzx	 eax, al
  0011c	85 c0		 test	 eax, eax
  0011e	75 0e		 jne	 SHORT $LN8@operator

; 744  :         _State |= ios_base::badbit;

  00120	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00123	83 c8 04	 or	 eax, 4
  00126	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 745  :     } else { // state okay, insert

  00129	e9 67 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 746  :         _TRY_IO_BEGIN
; 747  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  0012e	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00135	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00138	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0013c	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00143	48 03 c8	 add	 rcx, rax
  00146	48 8b c1	 mov	 rax, rcx
  00149	48 8b c8	 mov	 rcx, rax
  0014c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  00152	89 85 e4 01 00
	00		 mov	 DWORD PTR tv139[rbp], eax
  00158	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR tv139[rbp]
  0015e	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00163	83 f8 40	 cmp	 eax, 64			; 00000040H
  00166	0f 84 c8 00 00
	00		 je	 $LN11@operator

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0016c	eb 0b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0016e	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  00172	48 ff c8	 dec	 rax
  00175	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN4@operator:
  00179	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  0017e	0f 8e b0 00 00
	00		 jle	 $LN11@operator

; 749  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00184	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0018b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0018e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00192	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00199	48 03 c8	 add	 rcx, rax
  0019c	48 8b c1	 mov	 rax, rcx
  0019f	48 8b c8	 mov	 rcx, rax
  001a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  001a8	88 85 e4 01 00
	00		 mov	 BYTE PTR tv295[rbp], al
  001ae	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  001b5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001b8	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001bc	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  001c3	48 03 c8	 add	 rcx, rax
  001c6	48 8b c1	 mov	 rax, rcx
  001c9	48 8b c8	 mov	 rcx, rax
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001d2	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv296[rbp], rax
  001d9	0f b6 95 e4 01
	00 00		 movzx	 edx, BYTE PTR tv295[rbp]
  001e0	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv296[rbp]
  001e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001ed	89 85 f0 01 00
	00		 mov	 DWORD PTR tv297[rbp], eax
  001f3	8b 85 f0 01 00
	00		 mov	 eax, DWORD PTR tv297[rbp]
  001f9	89 85 54 01 00
	00		 mov	 DWORD PTR $T4[rbp], eax
  001ff	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00204	89 85 74 01 00
	00		 mov	 DWORD PTR $T5[rbp], eax
  0020a	48 8d 95 54 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00211	48 8d 8d 74 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00218	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0021d	0f b6 c0	 movzx	 eax, al
  00220	85 c0		 test	 eax, eax
  00222	74 0b		 je	 SHORT $LN12@operator

; 750  :                     _State |= ios_base::badbit; // insertion failed, quit

  00224	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00227	83 c8 04	 or	 eax, 4
  0022a	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 751  :                     break;

  0022d	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 752  :                 }
; 753  :             }

  0022f	e9 3a ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 754  :         }
; 755  : 
; 756  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00234	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  00238	75 60		 jne	 SHORT $LN13@operator
  0023a	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00241	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00244	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00248	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0024f	48 03 c8	 add	 rcx, rax
  00252	48 8b c1	 mov	 rax, rcx
  00255	48 8b c8	 mov	 rcx, rax
  00258	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0025e	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv298[rbp], rax
  00265	4c 8b 45 28	 mov	 r8, QWORD PTR _Count$[rbp]
  00269	48 8b 95 28 02
	00 00		 mov	 rdx, QWORD PTR _Val$[rbp]
  00270	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv298[rbp]
  00277	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  0027d	48 89 85 f0 01
	00 00		 mov	 QWORD PTR tv299[rbp], rax
  00284	48 8b 45 28	 mov	 rax, QWORD PTR _Count$[rbp]
  00288	48 39 85 f0 01
	00 00		 cmp	 QWORD PTR tv299[rbp], rax
  0028f	74 09		 je	 SHORT $LN13@operator

; 757  :             _State |= ios_base::badbit;

  00291	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00294	83 c8 04	 or	 eax, 4
  00297	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN13@operator:

; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {

  0029a	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  0029e	0f 85 c8 00 00
	00		 jne	 $LN14@operator

; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002a4	eb 0b		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002a6	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  002aa	48 ff c8	 dec	 rax
  002ad	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN7@operator:
  002b1	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  002b6	0f 8e b0 00 00
	00		 jle	 $LN14@operator

; 762  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002bc	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002c6	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002ca	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002d1	48 03 c8	 add	 rcx, rax
  002d4	48 8b c1	 mov	 rax, rcx
  002d7	48 8b c8	 mov	 rcx, rax
  002da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002e0	88 85 e4 01 00
	00		 mov	 BYTE PTR tv300[rbp], al
  002e6	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002ed	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002f0	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002f4	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002fb	48 03 c8	 add	 rcx, rax
  002fe	48 8b c1	 mov	 rax, rcx
  00301	48 8b c8	 mov	 rcx, rax
  00304	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0030a	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv301[rbp], rax
  00311	0f b6 95 e4 01
	00 00		 movzx	 edx, BYTE PTR tv300[rbp]
  00318	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv301[rbp]
  0031f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  00325	89 85 f0 01 00
	00		 mov	 DWORD PTR tv302[rbp], eax
  0032b	8b 85 f0 01 00
	00		 mov	 eax, DWORD PTR tv302[rbp]
  00331	89 85 94 01 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  00337	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0033c	89 85 b4 01 00
	00		 mov	 DWORD PTR $T7[rbp], eax
  00342	48 8d 95 94 01
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  00349	48 8d 8d b4 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00350	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00355	0f b6 c0	 movzx	 eax, al
  00358	85 c0		 test	 eax, eax
  0035a	74 0b		 je	 SHORT $LN15@operator

; 763  :                     _State |= ios_base::badbit; // insertion failed, quit

  0035c	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0035f	83 c8 04	 or	 eax, 4
  00362	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 764  :                     break;

  00365	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 765  :                 }
; 766  :             }

  00367	e9 3a ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 767  :         }
; 768  : 
; 769  :         _Ostr.width(0);

  0036c	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00373	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00376	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0037a	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00381	48 03 c8	 add	 rcx, rax
  00384	48 8b c1	 mov	 rax, rcx
  00387	33 d2		 xor	 edx, edx
  00389	48 8b c8	 mov	 rcx, rax
  0038c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  00392	90		 npad	 1
  00393	eb 00		 jmp	 SHORT $LN9@operator
$LN23@operator:
$LN9@operator:

; 770  :         _CATCH_IO_(ios_base, _Ostr)
; 771  :     }
; 772  : 
; 773  :     _Ostr.setstate(_State);

  00395	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0039c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0039f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  003a3	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  003aa	48 03 c8	 add	 rcx, rax
  003ad	48 8b c1	 mov	 rax, rcx
  003b0	45 33 c0	 xor	 r8d, r8d
  003b3	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  003b6	48 8b c8	 mov	 rcx, rax
  003b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 774  :     return _Ostr;

  003bf	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  003c6	48 89 85 d8 01
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  003cd	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  003d1	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003d6	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR $T8[rbp]

; 775  : }

  003dd	48 8b f8	 mov	 rdi, rax
  003e0	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  003e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData
  003eb	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003f0	48 8b c7	 mov	 rax, rdi
  003f3	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  003fa	48 33 cd	 xor	 rcx, rbp
  003fd	e8 00 00 00 00	 call	 __security_check_cookie
  00402	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00409	5f		 pop	 rdi
  0040a	5d		 pop	 rbp
  0040b	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv300 = 484
tv295 = 484
tv139 = 484
tv301 = 488
tv298 = 488
tv296 = 488
tv137 = 488
tv302 = 496
tv299 = 496
tv297 = 496
__$ArrayPad$ = 504
_Ostr$ = 544
_Val$ = 552
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv300 = 484
tv295 = 484
tv139 = 484
tv301 = 488
tv298 = 488
tv296 = 488
tv137 = 488
tv302 = 496
tv299 = 496
tv297 = 496
__$ArrayPad$ = 504
_Ostr$ = 544
_Val$ = 552
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00014	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv300 = 484
tv295 = 484
tv139 = 484
tv301 = 488
tv298 = 488
tv296 = 488
tv137 = 488
tv302 = 496
tv299 = 496
tv297 = 496
__$ArrayPad$ = 504
_Ostr$ = 544
_Val$ = 552
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv300 = 484
tv295 = 484
tv139 = 484
tv301 = 488
tv298 = 488
tv296 = 488
tv137 = 488
tv302 = 496
tv299 = 496
tv297 = 496
__$ArrayPad$ = 504
_Ostr$ = 544
_Val$ = 552
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00014	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch05_01_sol\Ch05_01\Ch05_01.cpp
;	COMDAT main
_TEXT	SEGMENT
ex$4 = 8
tv70 = 216
main	PROC						; COMDAT

; 7    : {

$LN9:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00014	b9 0a 00 00 00	 mov	 ecx, 10
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CB82CB62_Ch05_01@cpp
  00027	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002c	90		 npad	 1

; 8    : 	try
; 9    : 	{
; 10   : 		CalcLS();

  0002d	e8 00 00 00 00	 call	 ?CalcLS@@YAXXZ		; CalcLS
  00032	90		 npad	 1
  00033	eb 00		 jmp	 SHORT $LN6@main
$LN7@main:
$LN6@main:

; 11   : 	}
; 12   : 	catch (std::exception& ex)
; 13   : 	{
; 14   : 		std::cout << "Ch05_01 exception: " << ex.what() << '\n';
; 15   : 	}
; 16   : 	return 0;

  00035	33 c0		 xor	 eax, eax

; 17   : }

  00037	8b f8		 mov	 edi, eax
  00039	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:main$rtcFrameData
  00044	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00049	8b c7		 mov	 eax, edi
  0004b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
main	ENDP
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
ex$4 = 8
tv70 = 216
main$catch$0 PROC

; 11   : 	}
; 12   : 	catch (std::exception& ex)
; 13   : 	{

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$main$0:

; 11   : 	}
; 12   : 	catch (std::exception& ex)
; 13   : 	{
; 14   : 		std::cout << "Ch05_01 exception: " << ex.what() << '\n';

  00014	48 8b 45 08	 mov	 rax, QWORD PTR ex$4[rbp]
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	48 8b 4d 08	 mov	 rcx, QWORD PTR ex$4[rbp]
  0001f	ff 50 08	 call	 QWORD PTR [rax+8]
  00022	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv70[rbp], rax
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@IGAHIBMI@Ch05_01?5exception?3?5@
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00037	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0003c	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv70[rbp]
  00043	48 8b d1	 mov	 rdx, rcx
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0004e	b2 0a		 mov	 dl, 10
  00050	48 8b c8	 mov	 rcx, rax
  00053	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00058	90		 npad	 1

; 11   : 	}
; 12   : 	catch (std::exception& ex)
; 13   : 	{
; 14   : 		std::cout << "Ch05_01 exception: " << ex.what() << '\n';
; 15   : 	}

  00059	48 8d 05 00 00
	00 00		 lea	 rax, $LN7@main$catch
  00060	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
  00067	cc		 int	 3
main$catch$0 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
ex$4 = 8
tv70 = 216
main$catch$0 PROC

; 13   : 	{

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$main$0:

; 14   : 		std::cout << "Ch05_01 exception: " << ex.what() << '\n';

  00014	48 8b 45 08	 mov	 rax, QWORD PTR ex$4[rbp]
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	48 8b 4d 08	 mov	 rcx, QWORD PTR ex$4[rbp]
  0001f	ff 50 08	 call	 QWORD PTR [rax+8]
  00022	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv70[rbp], rax
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@IGAHIBMI@Ch05_01?5exception?3?5@
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00037	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0003c	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv70[rbp]
  00043	48 8b d1	 mov	 rdx, rcx
  00046	48 8b c8	 mov	 rcx, rax
  00049	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0004e	b2 0a		 mov	 dl, 10
  00050	48 8b c8	 mov	 rcx, rax
  00053	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00058	90		 npad	 1

; 15   : 	}

  00059	48 8d 05 00 00
	00 00		 lea	 rax, $LN7@main$catch
  00060	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
  00067	cc		 int	 3
main$catch$0 ENDP
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch05_01_sol\Ch05_01\Ch05_01.cpp
;	COMDAT ?CalcLS@@YAXXZ
_TEXT	SEGMENT
n$ = 8
x_aa$ = 40
y_aa$ = 88
x$ = 136
y$ = 168
m1$ = 200
m2$ = 232
b1$ = 264
b2$ = 296
w$ = 328
nl$ = 356
$T9 = 776
$T10 = 824
$T11 = 872
$T12 = 920
$T13 = 968
tv184 = 1000
tv170 = 1000
tv154 = 1000
tv140 = 1000
tv128 = 1000
__$ArrayPad$ = 1008
?CalcLS@@YAXXZ PROC					; CalcLS, COMDAT

; 19   : {

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 38 04
	00 00		 sub	 rsp, 1080		; 00000438H
  0000a	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0000f	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00014	b9 a2 00 00 00	 mov	 ecx, 162		; 000000a2H
  00019	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001e	f3 ab		 rep stosd
  00020	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00027	48 33 c5	 xor	 rax, rbp
  0002a	48 89 85 f0 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CB82CB62_Ch05_01@cpp
  00038	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 20   : 	const size_t n = 59;

  0003d	48 c7 45 08 3b
	00 00 00	 mov	 QWORD PTR n$[rbp], 59	; 0000003bH

; 21   : 	AlignedArray<double> x_aa(n, c_Alignment);

  00045	ba 10 00 00 00	 mov	 edx, 16
  0004a	48 8d 4d 28	 lea	 rcx, QWORD PTR x_aa$[rbp]
  0004e	e8 00 00 00 00	 call	 ?__autoclassinit2@?$AlignedArray@N@@QEAAX_K@Z
  00053	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00059	ba 3b 00 00 00	 mov	 edx, 59			; 0000003bH
  0005e	48 8d 4d 28	 lea	 rcx, QWORD PTR x_aa$[rbp]
  00062	e8 00 00 00 00	 call	 ??0?$AlignedArray@N@@QEAA@_K0@Z ; AlignedArray<double>::AlignedArray<double>
  00067	90		 npad	 1

; 22   : 	AlignedArray<double> y_aa(n, c_Alignment);

  00068	ba 10 00 00 00	 mov	 edx, 16
  0006d	48 8d 4d 58	 lea	 rcx, QWORD PTR y_aa$[rbp]
  00071	e8 00 00 00 00	 call	 ?__autoclassinit2@?$AlignedArray@N@@QEAAX_K@Z
  00076	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  0007c	ba 3b 00 00 00	 mov	 edx, 59			; 0000003bH
  00081	48 8d 4d 58	 lea	 rcx, QWORD PTR y_aa$[rbp]
  00085	e8 00 00 00 00	 call	 ??0?$AlignedArray@N@@QEAA@_K0@Z ; AlignedArray<double>::AlignedArray<double>
  0008a	90		 npad	 1

; 23   : 	double* x = x_aa.Data();

  0008b	48 8d 4d 28	 lea	 rcx, QWORD PTR x_aa$[rbp]
  0008f	e8 00 00 00 00	 call	 ?Data@?$AlignedArray@N@@QEAAPEANXZ ; AlignedArray<double>::Data
  00094	48 89 85 88 00
	00 00		 mov	 QWORD PTR x$[rbp], rax

; 24   : 	double* y = y_aa.Data();

  0009b	48 8d 4d 58	 lea	 rcx, QWORD PTR y_aa$[rbp]
  0009f	e8 00 00 00 00	 call	 ?Data@?$AlignedArray@N@@QEAAPEANXZ ; AlignedArray<double>::Data
  000a4	48 89 85 a8 00
	00 00		 mov	 QWORD PTR y$[rbp], rax

; 25   : 	FillArrays(x, y, n);

  000ab	41 b8 3b 00 00
	00		 mov	 r8d, 59			; 0000003bH
  000b1	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR y$[rbp]
  000b8	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  000bf	e8 00 00 00 00	 call	 ?FillArrays@@YAXPEAN0_K@Z ; FillArrays

; 26   : 	double m1, m2;
; 27   : 	double b1, b2;
; 28   : 	CalcLeastSquares_Cpp(&m1, &b1, x, y, n);

  000c4	48 c7 44 24 20
	3b 00 00 00	 mov	 QWORD PTR [rsp+32], 59	; 0000003bH
  000cd	4c 8b 8d a8 00
	00 00		 mov	 r9, QWORD PTR y$[rbp]
  000d4	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR x$[rbp]
  000db	48 8d 95 08 01
	00 00		 lea	 rdx, QWORD PTR b1$[rbp]
  000e2	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR m1$[rbp]
  000e9	e8 00 00 00 00	 call	 ?CalcLeastSquares_Cpp@@YAXPEAN0PEBN1_K@Z ; CalcLeastSquares_Cpp

; 29   : 	CalcLeastSquares_Iavx2(&m2, &b2, x, y, n);

  000ee	48 c7 44 24 20
	3b 00 00 00	 mov	 QWORD PTR [rsp+32], 59	; 0000003bH
  000f7	4c 8b 8d a8 00
	00 00		 mov	 r9, QWORD PTR y$[rbp]
  000fe	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR x$[rbp]
  00105	48 8d 95 28 01
	00 00		 lea	 rdx, QWORD PTR b2$[rbp]
  0010c	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR m2$[rbp]
  00113	e8 00 00 00 00	 call	 ?CalcLeastSquares_Iavx2@@YAXPEAN0PEBN1_K@Z ; CalcLeastSquares_Iavx2

; 30   : 	size_t w = 12;

  00118	48 c7 85 48 01
	00 00 0c 00 00
	00		 mov	 QWORD PTR w$[rbp], 12

; 31   : 	const char nl = '\n';

  00123	c6 85 64 01 00
	00 0a		 mov	 BYTE PTR nl$[rbp], 10

; 32   : 	std::cout << std::fixed << std::setprecision(8);

  0012a	ba 08 00 00 00	 mov	 edx, 8
  0012f	48 8d 8d 08 03
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00136	e8 00 00 00 00	 call	 ?setprecision@std@@YA?AU?$_Smanip@_J@1@_J@Z ; std::setprecision
  0013b	48 89 85 e8 03
	00 00		 mov	 QWORD PTR tv128[rbp], rax
  00142	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?fixed@std@@YAAEAVios_base@1@AEAV21@@Z ; std::fixed
  00149	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00150	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z
  00156	48 8b 8d e8 03
	00 00		 mov	 rcx, QWORD PTR tv128[rbp]
  0015d	48 8b d1	 mov	 rdx, rcx
  00160	48 8b c8	 mov	 rcx, rax
  00163	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>

; 33   : 	std::cout << "\nCalcLeastSquares_Cpp Results\n";

  00168	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@JICMLFBC@?6CalcLeastSquares_Cpp?5Results?6@
  0016f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00176	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 34   : 	std::cout << " slope: " << std::setw(w) << m1 << nl;

  0017b	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR w$[rbp]
  00182	48 8d 8d 38 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00189	e8 00 00 00 00	 call	 ?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z ; std::setw
  0018e	48 89 85 e8 03
	00 00		 mov	 QWORD PTR tv140[rbp], rax
  00195	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EFDOMHIF@?5slope?3?5@
  0019c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001a3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001a8	48 8b 8d e8 03
	00 00		 mov	 rcx, QWORD PTR tv140[rbp]
  001af	48 8b d1	 mov	 rdx, rcx
  001b2	48 8b c8	 mov	 rcx, rax
  001b5	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>
  001ba	c5 fb 10 8d c8
	00 00 00	 vmovsd	 xmm1, QWORD PTR m1$[rbp]
  001c2	48 8b c8	 mov	 rcx, rax
  001c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
  001cb	b2 0a		 mov	 dl, 10
  001cd	48 8b c8	 mov	 rcx, rax
  001d0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >

; 35   : 	std::cout << " intercept: " << std::setw(w) << b1 << nl;

  001d5	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR w$[rbp]
  001dc	48 8d 8d 68 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  001e3	e8 00 00 00 00	 call	 ?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z ; std::setw
  001e8	48 89 85 e8 03
	00 00		 mov	 QWORD PTR tv154[rbp], rax
  001ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@LABPDFLK@?5intercept?3?5@
  001f6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001fd	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00202	48 8b 8d e8 03
	00 00		 mov	 rcx, QWORD PTR tv154[rbp]
  00209	48 8b d1	 mov	 rdx, rcx
  0020c	48 8b c8	 mov	 rcx, rax
  0020f	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>
  00214	c5 fb 10 8d 08
	01 00 00	 vmovsd	 xmm1, QWORD PTR b1$[rbp]
  0021c	48 8b c8	 mov	 rcx, rax
  0021f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
  00225	b2 0a		 mov	 dl, 10
  00227	48 8b c8	 mov	 rcx, rax
  0022a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >

; 36   : 	std::cout << "\nCalcLeastSquares_Iavx2 Results\n";

  0022f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@JLGLNHDF@?6CalcLeastSquares_Iavx2?5Results@
  00236	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0023d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >

; 37   : 	std::cout << " slope: " << std::setw(w) << m2 << nl;

  00242	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR w$[rbp]
  00249	48 8d 8d 98 03
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  00250	e8 00 00 00 00	 call	 ?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z ; std::setw
  00255	48 89 85 e8 03
	00 00		 mov	 QWORD PTR tv170[rbp], rax
  0025c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EFDOMHIF@?5slope?3?5@
  00263	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0026a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0026f	48 8b 8d e8 03
	00 00		 mov	 rcx, QWORD PTR tv170[rbp]
  00276	48 8b d1	 mov	 rdx, rcx
  00279	48 8b c8	 mov	 rcx, rax
  0027c	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>
  00281	c5 fb 10 8d e8
	00 00 00	 vmovsd	 xmm1, QWORD PTR m2$[rbp]
  00289	48 8b c8	 mov	 rcx, rax
  0028c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
  00292	b2 0a		 mov	 dl, 10
  00294	48 8b c8	 mov	 rcx, rax
  00297	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >

; 38   : 	std::cout << " intercept: " << std::setw(w) << b2 << nl;

  0029c	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR w$[rbp]
  002a3	48 8d 8d c8 03
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  002aa	e8 00 00 00 00	 call	 ?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z ; std::setw
  002af	48 89 85 e8 03
	00 00		 mov	 QWORD PTR tv184[rbp], rax
  002b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@LABPDFLK@?5intercept?3?5@
  002bd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002c4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  002c9	48 8b 8d e8 03
	00 00		 mov	 rcx, QWORD PTR tv184[rbp]
  002d0	48 8b d1	 mov	 rdx, rcx
  002d3	48 8b c8	 mov	 rcx, rax
  002d6	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>
  002db	c5 fb 10 8d 28
	01 00 00	 vmovsd	 xmm1, QWORD PTR b2$[rbp]
  002e3	48 8b c8	 mov	 rcx, rax
  002e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z
  002ec	b2 0a		 mov	 dl, 10
  002ee	48 8b c8	 mov	 rcx, rax
  002f1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  002f6	90		 npad	 1

; 39   : }

  002f7	48 8d 4d 58	 lea	 rcx, QWORD PTR y_aa$[rbp]
  002fb	e8 00 00 00 00	 call	 ??1?$AlignedArray@N@@QEAA@XZ ; AlignedArray<double>::~AlignedArray<double>
  00300	90		 npad	 1
  00301	48 8d 4d 28	 lea	 rcx, QWORD PTR x_aa$[rbp]
  00305	e8 00 00 00 00	 call	 ??1?$AlignedArray@N@@QEAA@XZ ; AlignedArray<double>::~AlignedArray<double>
  0030a	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  0030e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?CalcLS@@YAXXZ$rtcFrameData
  00315	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0031a	48 8b 8d f0 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00321	48 33 cd	 xor	 rcx, rbp
  00324	e8 00 00 00 00	 call	 __security_check_cookie
  00329	48 8d a5 08 04
	00 00		 lea	 rsp, QWORD PTR [rbp+1032]
  00330	5f		 pop	 rdi
  00331	5d		 pop	 rbp
  00332	c3		 ret	 0
?CalcLS@@YAXXZ ENDP					; CalcLS
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
n$ = 8
x_aa$ = 40
y_aa$ = 88
x$ = 136
y$ = 168
m1$ = 200
m2$ = 232
b1$ = 264
b2$ = 296
w$ = 328
nl$ = 356
$T9 = 776
$T10 = 824
$T11 = 872
$T12 = 920
$T13 = 968
tv184 = 1000
tv170 = 1000
tv154 = 1000
tv140 = 1000
tv128 = 1000
__$ArrayPad$ = 1008
?dtor$0@?0??CalcLS@@YAXXZ@4HA PROC			; `CalcLS'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR x_aa$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$AlignedArray@N@@QEAA@XZ ; AlignedArray<double>::~AlignedArray<double>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??CalcLS@@YAXXZ@4HA ENDP			; `CalcLS'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
n$ = 8
x_aa$ = 40
y_aa$ = 88
x$ = 136
y$ = 168
m1$ = 200
m2$ = 232
b1$ = 264
b2$ = 296
w$ = 328
nl$ = 356
$T9 = 776
$T10 = 824
$T11 = 872
$T12 = 920
$T13 = 968
tv184 = 1000
tv170 = 1000
tv154 = 1000
tv140 = 1000
tv128 = 1000
__$ArrayPad$ = 1008
?dtor$1@?0??CalcLS@@YAXXZ@4HA PROC			; `CalcLS'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 58	 lea	 rcx, QWORD PTR y_aa$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$AlignedArray@N@@QEAA@XZ ; AlignedArray<double>::~AlignedArray<double>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$1@?0??CalcLS@@YAXXZ@4HA ENDP			; `CalcLS'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
n$ = 8
x_aa$ = 40
y_aa$ = 88
x$ = 136
y$ = 168
m1$ = 200
m2$ = 232
b1$ = 264
b2$ = 296
w$ = 328
nl$ = 356
$T9 = 776
$T10 = 824
$T11 = 872
$T12 = 920
$T13 = 968
tv184 = 1000
tv170 = 1000
tv154 = 1000
tv140 = 1000
tv128 = 1000
__$ArrayPad$ = 1008
?dtor$0@?0??CalcLS@@YAXXZ@4HA PROC			; `CalcLS'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR x_aa$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$AlignedArray@N@@QEAA@XZ ; AlignedArray<double>::~AlignedArray<double>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??CalcLS@@YAXXZ@4HA ENDP			; `CalcLS'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
n$ = 8
x_aa$ = 40
y_aa$ = 88
x$ = 136
y$ = 168
m1$ = 200
m2$ = 232
b1$ = 264
b2$ = 296
w$ = 328
nl$ = 356
$T9 = 776
$T10 = 824
$T11 = 872
$T12 = 920
$T13 = 968
tv184 = 1000
tv170 = 1000
tv154 = 1000
tv140 = 1000
tv128 = 1000
__$ArrayPad$ = 1008
?dtor$1@?0??CalcLS@@YAXXZ@4HA PROC			; `CalcLS'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 30	 lea	 rbp, QWORD PTR [rdx+48]
  00014	48 8d 4d 58	 lea	 rcx, QWORD PTR y_aa$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$AlignedArray@N@@QEAA@XZ ; AlignedArray<double>::~AlignedArray<double>
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$1@?0??CalcLS@@YAXXZ@4HA ENDP			; `CalcLS'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch05_01_sol\Ch05_01\AlignedMem.h
;	COMDAT ?Release@AlignedMem@@SAXPEAX@Z
_TEXT	SEGMENT
p$ = 224
?Release@AlignedMem@@SAXPEAX@Z PROC			; AlignedMem::Release, COMDAT

; 24   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0AAF5CB5_AlignedMem@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 25   :         OS::AlignedFree(p);

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00026	e8 00 00 00 00	 call	 ?AlignedFree@OS@@SAXPEAX@Z ; OS::AlignedFree

; 26   :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?Release@AlignedMem@@SAXPEAX@Z ENDP			; AlignedMem::Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch05_01_sol\Ch05_01\AlignedMem.h
;	COMDAT ?Allocate@AlignedMem@@SAPEAX_K0@Z
_TEXT	SEGMENT
p$ = 8
$T1 = 232
mem_size$ = 304
mem_alignment$ = 312
?Allocate@AlignedMem@@SAPEAX_K0@Z PROC			; AlignedMem::Allocate, COMDAT

; 14   :     {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0AAF5CB5_AlignedMem@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 15   :         void* p = OS::AlignedMalloc(mem_size, mem_alignment);

  00024	48 8b 95 38 01
	00 00		 mov	 rdx, QWORD PTR mem_alignment$[rbp]
  0002b	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR mem_size$[rbp]
  00032	e8 00 00 00 00	 call	 ?AlignedMalloc@OS@@SAPEAX_K0@Z ; OS::AlignedMalloc
  00037	48 89 45 08	 mov	 QWORD PTR p$[rbp], rax

; 16   : 
; 17   :         if (p == nullptr)

  0003b	48 83 7d 08 00	 cmp	 QWORD PTR p$[rbp], 0
  00040	75 26		 jne	 SHORT $LN2@Allocate

; 18   :             throw std::runtime_error("Memory allocation error: AllocateAlignedMem()");

  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@NNIDGND@Memory?5allocation?5error?3?5Alloca@
  00049	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00050	e8 00 00 00 00	 call	 ??0runtime_error@std@@QEAA@PEBD@Z ; std::runtime_error::runtime_error
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI2?AVruntime_error@std@@
  0005c	48 8d 8d e8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00063	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@Allocate:

; 19   : 
; 20   :         return p;

  00068	48 8b 45 08	 mov	 rax, QWORD PTR p$[rbp]
$LN3@Allocate:

; 21   :     }

  0006c	48 8d a5 18 01
	00 00		 lea	 rsp, QWORD PTR [rbp+280]
  00073	5f		 pop	 rdi
  00074	5d		 pop	 rbp
  00075	c3		 ret	 0
?Allocate@AlignedMem@@SAPEAX_K0@Z ENDP			; AlignedMem::Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch05_01_sol\Ch05_01\OS.h
;	COMDAT ?AlignedMalloc@OS@@SAPEAX_K0@Z
_TEXT	SEGMENT
p$ = 8
tv71 = 216
mem_size$ = 256
mem_alignment$ = 264
?AlignedMalloc@OS@@SAPEAX_K0@Z PROC			; OS::AlignedMalloc, COMDAT

; 56   :     {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D8B5661_OS@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 57   :         void* p;
; 58   : #if defined(_MSC_VER)
; 59   :         p = _aligned_malloc(mem_size, mem_alignment);

  00024	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR mem_alignment$[rbp]
  0002b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR mem_size$[rbp]
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__aligned_malloc
  00038	48 89 45 08	 mov	 QWORD PTR p$[rbp], rax

; 60   : #endif
; 61   : 
; 62   : #if defined(__GNUG__)
; 63   :         p = aligned_alloc(mem_alignment, mem_size);
; 64   : #endif
; 65   :         return (p != NULL) ? p : nullptr;

  0003c	48 83 7d 08 00	 cmp	 QWORD PTR p$[rbp], 0
  00041	74 0d		 je	 SHORT $LN3@AlignedMal
  00043	48 8b 45 08	 mov	 rax, QWORD PTR p$[rbp]
  00047	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv71[rbp], rax
  0004e	eb 0b		 jmp	 SHORT $LN4@AlignedMal
$LN3@AlignedMal:
  00050	48 c7 85 d8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR tv71[rbp], 0
$LN4@AlignedMal:
  0005b	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv71[rbp]

; 66   :     }

  00062	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00069	5f		 pop	 rdi
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
?AlignedMalloc@OS@@SAPEAX_K0@Z ENDP			; OS::AlignedMalloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch05_01_sol\Ch05_01\OS.h
;	COMDAT ?AlignedFree@OS@@SAXPEAX@Z
_TEXT	SEGMENT
p$ = 224
?AlignedFree@OS@@SAXPEAX@Z PROC				; OS::AlignedFree, COMDAT

; 45   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D8B5661_OS@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 46   : #if defined(_MSC_VER)
; 47   :             _aligned_free(p);

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR p$[rbp]
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__aligned_free

; 48   : #endif
; 49   : 
; 50   : #if defined(__GNUG__)
; 51   :             free(p);
; 52   : #endif
; 53   :     }

  0002c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00033	5f		 pop	 rdi
  00034	5d		 pop	 rbp
  00035	c3		 ret	 0
?AlignedFree@OS@@SAXPEAX@Z ENDP				; OS::AlignedFree
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = 200
tv93 = 264
tv85 = 264
this$ = 304
__formal$ = 312
_Lobj$ = 320
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT

; 173  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D96D2425_xloctime
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 174  :         _Cvt = _Lobj._Getcvt();

  0002a	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00031	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ
  0003e	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00045	48 8d 79 2c	 lea	 rdi, QWORD PTR [rcx+44]
  00049	48 8b f0	 mov	 rsi, rax
  0004c	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00051	f3 a4		 rep movsb

; 175  : 
; 176  :         if (is_same_v<_Elem2, wchar_t>) {

  00053	33 c0		 xor	 eax, eax
  00055	83 f8 01	 cmp	 eax, 1
  00058	74 5c		 je	 SHORT $LN2@Getvals

; 177  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ
  00067	48 8b c8	 mov	 rcx, rax
  0006a	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  0006f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 178  :             _Months =

  0007a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ
  00087	48 8b c8	 mov	 rcx, rax
  0008a	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  0008f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00096	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 179  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 180  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a1	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  000a6	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ad	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 181  :         } else {

  000b1	e9 a3 00 00 00	 jmp	 $LN3@Getvals
$LN2@Getvals:

; 182  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b6	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bd	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000c1	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  000c8	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ
  000d5	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv85[rbp]
  000dc	4c 8b c1	 mov	 r8, rcx
  000df	33 d2		 xor	 edx, edx
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000e9	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f0	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 183  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000f4	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fb	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000ff	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  00106	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ
  00113	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  0011a	4c 8b c1	 mov	 r8, rcx
  0011d	33 d2		 xor	 edx, edx
  0011f	48 8b c8	 mov	 rcx, rax
  00122	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00127	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012e	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 184  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00132	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00139	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0013d	4c 8b c0	 mov	 r8, rax
  00140	33 d2		 xor	 edx, edx
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  00149	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  0014e	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00155	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN3@Getvals:

; 185  :         }
; 186  :     }

  00159	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  00160	5f		 pop	 rdi
  00161	5e		 pop	 rsi
  00162	5d		 pop	 rbp
  00163	c3		 ret	 0
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = 200
tv93 = 264
tv85 = 264
this$ = 304
__formal$ = 312
_Lobj$ = 320
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT

; 173  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D96D2425_xloctime
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 174  :         _Cvt = _Lobj._Getcvt();

  0002a	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00031	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ
  0003e	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00045	48 8d 79 2c	 lea	 rdi, QWORD PTR [rcx+44]
  00049	48 8b f0	 mov	 rsi, rax
  0004c	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00051	f3 a4		 rep movsb

; 175  : 
; 176  :         if (is_same_v<_Elem2, wchar_t>) {

  00053	33 c0		 xor	 eax, eax
  00055	83 f8 01	 cmp	 eax, 1
  00058	74 5c		 je	 SHORT $LN2@Getvals

; 177  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ
  00067	48 8b c8	 mov	 rcx, rax
  0006a	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  0006f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 178  :             _Months =

  0007a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ
  00087	48 8b c8	 mov	 rcx, rax
  0008a	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  0008f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00096	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 179  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 180  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a1	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  000a6	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ad	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 181  :         } else {

  000b1	e9 a3 00 00 00	 jmp	 $LN3@Getvals
$LN2@Getvals:

; 182  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b6	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bd	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000c1	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  000c8	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ
  000d5	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv85[rbp]
  000dc	4c 8b c1	 mov	 r8, rcx
  000df	33 d2		 xor	 edx, edx
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000e9	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f0	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 183  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000f4	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fb	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000ff	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  00106	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ
  00113	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  0011a	4c 8b c1	 mov	 r8, rcx
  0011d	33 d2		 xor	 edx, edx
  0011f	48 8b c8	 mov	 rcx, rax
  00122	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00127	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012e	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 184  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00132	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00139	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0013d	4c 8b c0	 mov	 r8, rax
  00140	33 d2		 xor	 edx, edx
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  00149	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  0014e	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00155	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN3@Getvals:

; 185  :         }
; 186  :     }

  00159	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  00160	5f		 pop	 rdi
  00161	5e		 pop	 rsi
  00162	5d		 pop	 rbp
  00163	c3		 ret	 0
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
;	COMDAT ?fixed@std@@YAAEAVios_base@1@AEAV21@@Z
_TEXT	SEGMENT
_Iosbase$ = 224
?fixed@std@@YAAEAVios_base@1@AEAV21@@Z PROC		; std::fixed, COMDAT

; 201  : inline ios_base& __CLRCALL_OR_CDECL fixed(ios_base& _Iosbase) { // set floatfield to fixed

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__845859A3_ios
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 202  :     _Iosbase.setf(ios_base::fixed, ios_base::floatfield);

  0001f	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  00025	ba 00 20 00 00	 mov	 edx, 8192		; 00002000H
  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Iosbase$[rbp]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setf@ios_base@std@@QEAAHHH@Z

; 203  :     return _Iosbase;

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Iosbase$[rbp]

; 204  : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?fixed@std@@YAAEAVios_base@1@AEAV21@@Z ENDP		; std::fixed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z
_TEXT	SEGMENT
_Count$ = 8
_Ptrdest$ = 40
_Ptrnext$1 = 72
_Ptr$ = 320
__formal$ = 328
__formal$ = 336
??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 522  : _Elem* __CRTDECL _Maklocstr(const char* _Ptr, _Elem*, const _Locinfo::_Cvtvec&) {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D23FE460_xlocale
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 523  :     // convert C string to _Elem sequence using _Cvtvec
; 524  :     size_t _Count = _CSTD strlen(_Ptr) + 1;

  00029	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00030	e8 00 00 00 00	 call	 strlen
  00035	48 ff c0	 inc	 rax
  00038	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax

; 525  : 
; 526  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  0003c	c7 44 24 20 0e
	02 00 00	 mov	 DWORD PTR [rsp+32], 526	; 0000020eH
  00044	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0004b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00051	ba 01 00 00 00	 mov	 edx, 1
  00056	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__calloc_dbg
  00060	48 89 45 28	 mov	 QWORD PTR _Ptrdest$[rbp], rax

; 527  : 
; 528  :     if (!_Ptrdest) {

  00064	48 83 7d 28 00	 cmp	 QWORD PTR _Ptrdest$[rbp], 0
  00069	75 05		 jne	 SHORT $LN5@Maklocstr

; 529  :         _Xbad_alloc();

  0006b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 530  :     }
; 531  : 
; 532  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

  00070	48 8b 45 28	 mov	 rax, QWORD PTR _Ptrdest$[rbp]
  00074	48 89 45 48	 mov	 QWORD PTR _Ptrnext$1[rbp], rax
  00078	eb 27		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0007a	48 8b 45 08	 mov	 rax, QWORD PTR _Count$[rbp]
  0007e	48 ff c8	 dec	 rax
  00081	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  00085	48 8b 45 48	 mov	 rax, QWORD PTR _Ptrnext$1[rbp]
  00089	48 ff c0	 inc	 rax
  0008c	48 89 45 48	 mov	 QWORD PTR _Ptrnext$1[rbp], rax
  00090	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00097	48 ff c0	 inc	 rax
  0009a	48 89 85 40 01
	00 00		 mov	 QWORD PTR _Ptr$[rbp], rax
$LN4@Maklocstr:
  000a1	48 83 7d 08 00	 cmp	 QWORD PTR _Count$[rbp], 0
  000a6	76 12		 jbe	 SHORT $LN3@Maklocstr

; 533  :         *_Ptrnext = static_cast<_Elem>(static_cast<unsigned char>(*_Ptr));

  000a8	48 8b 45 48	 mov	 rax, QWORD PTR _Ptrnext$1[rbp]
  000ac	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000b3	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  000b6	88 08		 mov	 BYTE PTR [rax], cl

; 534  :     }

  000b8	eb c0		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 535  : 
; 536  :     return _Ptrdest;

  000ba	48 8b 45 28	 mov	 rax, QWORD PTR _Ptrdest$[rbp]
$LN6@Maklocstr:

; 537  : }

  000be	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000c5	5f		 pop	 rdi
  000c6	5d		 pop	 rbp
  000c7	c3		 ret	 0
??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
_TEXT	SEGMENT
_Count$ = 8
_Ptrdest$ = 40
_Ptr$ = 288
?_Maklocwcs@std@@YAPEA_WPEB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 90   : inline wchar_t* _Maklocwcs(const wchar_t* _Ptr) { // copy NTWCS to allocated storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4CB88277_xlocnum
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 91   :     const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  0001f	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcslen
  0002c	48 ff c0	 inc	 rax
  0002f	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax

; 92   : 
; 93   :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Count, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  00033	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA
  00039	83 c0 03	 add	 eax, 3
  0003c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00040	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00047	41 b8 02 00 00
	00		 mov	 r8d, 2
  0004d	ba 02 00 00 00	 mov	 edx, 2
  00052	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__calloc_dbg
  0005c	48 89 45 28	 mov	 QWORD PTR _Ptrdest$[rbp], rax

; 94   : 
; 95   :     if (!_Ptrdest) {

  00060	48 83 7d 28 00	 cmp	 QWORD PTR _Ptrdest$[rbp], 0
  00065	75 05		 jne	 SHORT $LN2@Maklocwcs

; 96   :         _Xbad_alloc();

  00067	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:

; 97   :     }
; 98   : 
; 99   :     _CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  0006c	4c 8b 45 08	 mov	 r8, QWORD PTR _Count$[rbp]
  00070	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00077	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptrdest$[rbp]
  0007b	e8 00 00 00 00	 call	 wmemcpy

; 100  :     return _Ptrdest;

  00080	48 8b 45 28	 mov	 rax, QWORD PTR _Ptrdest$[rbp]
$LN3@Maklocwcs:

; 101  : }

  00084	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
?_Maklocwcs@std@@YAPEA_WPEB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z
_TEXT	SEGMENT
_Count$ = 8
_Count1$ = 40
_Wchars$ = 72
_Ptr1$ = 104
_Bytes$ = 132
_Wc$ = 164
_Mbst1$ = 200
_Ptrdest$ = 232
_Ptrnext$ = 264
_Mbst2$ = 296
__$ArrayPad$ = 504
_Ptr$ = 544
__formal$ = 552
_Cvt$ = 560
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z PROC ; std::_Maklocstr<wchar_t>, COMDAT

; 540  : inline wchar_t* __CRTDECL _Maklocstr(const char* _Ptr, wchar_t*, const _Locinfo::_Cvtvec& _Cvt) {

$LN12:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00022	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR [rsp+600]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 f8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D23FE460_xlocale
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 541  :     // convert C string to wchar_t sequence using _Cvtvec
; 542  :     size_t _Count;
; 543  :     size_t _Count1;
; 544  :     size_t _Wchars;
; 545  :     const char* _Ptr1;
; 546  :     int _Bytes;
; 547  :     wchar_t _Wc;
; 548  :     mbstate_t _Mbst1 = {};

  00053	48 8d 85 c8 00
	00 00		 lea	 rax, QWORD PTR _Mbst1$[rbp]
  0005a	48 8b f8	 mov	 rdi, rax
  0005d	33 c0		 xor	 eax, eax
  0005f	b9 08 00 00 00	 mov	 ecx, 8
  00064	f3 aa		 rep stosb

; 549  : 
; 550  :     _Count1 = _CSTD strlen(_Ptr) + 1;

  00066	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0006d	e8 00 00 00 00	 call	 strlen
  00072	48 ff c0	 inc	 rax
  00075	48 89 45 28	 mov	 QWORD PTR _Count1$[rbp], rax

; 551  :     for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count; _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars) {

  00079	48 8b 45 28	 mov	 rax, QWORD PTR _Count1$[rbp]
  0007d	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  00081	48 c7 45 48 00
	00 00 00	 mov	 QWORD PTR _Wchars$[rbp], 0
  00089	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00090	48 89 45 68	 mov	 QWORD PTR _Ptr1$[rbp], rax
  00094	eb 35		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  00096	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  0009d	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  000a1	48 2b c8	 sub	 rcx, rax
  000a4	48 8b c1	 mov	 rax, rcx
  000a7	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  000ab	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  000b2	48 8b 4d 68	 mov	 rcx, QWORD PTR _Ptr1$[rbp]
  000b6	48 03 c8	 add	 rcx, rax
  000b9	48 8b c1	 mov	 rax, rcx
  000bc	48 89 45 68	 mov	 QWORD PTR _Ptr1$[rbp], rax
  000c0	48 8b 45 48	 mov	 rax, QWORD PTR _Wchars$[rbp]
  000c4	48 ff c0	 inc	 rax
  000c7	48 89 45 48	 mov	 QWORD PTR _Wchars$[rbp], rax
$LN4@Maklocstr:
  000cb	48 83 7d 08 00	 cmp	 QWORD PTR _Count$[rbp], 0
  000d0	76 3a		 jbe	 SHORT $LN3@Maklocstr

; 552  :         if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) {

  000d2	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Cvt$[rbp]
  000d9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000de	4c 8d 8d c8 00
	00 00		 lea	 r9, QWORD PTR _Mbst1$[rbp]
  000e5	4c 8b 45 08	 mov	 r8, QWORD PTR _Count$[rbp]
  000e9	48 8b 55 68	 mov	 rdx, QWORD PTR _Ptr1$[rbp]
  000ed	48 8d 8d a4 00
	00 00		 lea	 rcx, QWORD PTR _Wc$[rbp]
  000f4	e8 00 00 00 00	 call	 _Mbrtowc
  000f9	89 85 84 00 00
	00		 mov	 DWORD PTR _Bytes$[rbp], eax
  000ff	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR _Bytes$[rbp], 0
  00106	7f 02		 jg	 SHORT $LN8@Maklocstr

; 553  :             break;

  00108	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 554  :         }
; 555  :     }

  0010a	eb 8a		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 556  : 
; 557  :     ++_Wchars; // count terminating nul

  0010c	48 8b 45 48	 mov	 rax, QWORD PTR _Wchars$[rbp]
  00110	48 ff c0	 inc	 rax
  00113	48 89 45 48	 mov	 QWORD PTR _Wchars$[rbp], rax

; 558  : 
; 559  :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Wchars, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  00117	c7 44 24 20 2f
	02 00 00	 mov	 DWORD PTR [rsp+32], 559	; 0000022fH
  0011f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00126	41 b8 02 00 00
	00		 mov	 r8d, 2
  0012c	ba 02 00 00 00	 mov	 edx, 2
  00131	48 8b 4d 48	 mov	 rcx, QWORD PTR _Wchars$[rbp]
  00135	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__calloc_dbg
  0013b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Ptrdest$[rbp], rax

; 560  : 
; 561  :     if (!_Ptrdest) {

  00142	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR _Ptrdest$[rbp], 0
  0014a	75 05		 jne	 SHORT $LN9@Maklocstr

; 562  :         _Xbad_alloc();

  0014c	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 563  :     }
; 564  : 
; 565  :     wchar_t* _Ptrnext = _Ptrdest;

  00151	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Ptrdest$[rbp]
  00158	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Ptrnext$[rbp], rax

; 566  :     mbstate_t _Mbst2  = {};

  0015f	48 8d 85 28 01
	00 00		 lea	 rax, QWORD PTR _Mbst2$[rbp]
  00166	48 8b f8	 mov	 rdi, rax
  00169	33 c0		 xor	 eax, eax
  0016b	b9 08 00 00 00	 mov	 ecx, 8
  00170	f3 aa		 rep stosb

; 567  : 
; 568  :     for (; 0 < _Wchars; _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext) {

  00172	eb 4d		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:
  00174	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  0017b	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  0017f	48 2b c8	 sub	 rcx, rax
  00182	48 8b c1	 mov	 rax, rcx
  00185	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  00189	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  00190	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00197	48 03 c8	 add	 rcx, rax
  0019a	48 8b c1	 mov	 rax, rcx
  0019d	48 89 85 20 02
	00 00		 mov	 QWORD PTR _Ptr$[rbp], rax
  001a4	48 8b 45 48	 mov	 rax, QWORD PTR _Wchars$[rbp]
  001a8	48 ff c8	 dec	 rax
  001ab	48 89 45 48	 mov	 QWORD PTR _Wchars$[rbp], rax
  001af	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ptrnext$[rbp]
  001b6	48 83 c0 02	 add	 rax, 2
  001ba	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Ptrnext$[rbp], rax
$LN7@Maklocstr:
  001c1	48 83 7d 48 00	 cmp	 QWORD PTR _Wchars$[rbp], 0
  001c6	76 40		 jbe	 SHORT $LN6@Maklocstr

; 569  :         if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) {

  001c8	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Cvt$[rbp]
  001cf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d4	4c 8d 8d 28 01
	00 00		 lea	 r9, QWORD PTR _Mbst2$[rbp]
  001db	4c 8b 45 28	 mov	 r8, QWORD PTR _Count1$[rbp]
  001df	48 8b 95 20 02
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  001e6	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ptrnext$[rbp]
  001ed	e8 00 00 00 00	 call	 _Mbrtowc
  001f2	89 85 84 00 00
	00		 mov	 DWORD PTR _Bytes$[rbp], eax
  001f8	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR _Bytes$[rbp], 0
  001ff	7f 02		 jg	 SHORT $LN10@Maklocstr

; 570  :             break;

  00201	eb 05		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 571  :         }
; 572  :     }

  00203	e9 6c ff ff ff	 jmp	 $LN5@Maklocstr
$LN6@Maklocstr:

; 573  : 
; 574  :     *_Ptrnext = L'\0';

  00208	33 c0		 xor	 eax, eax
  0020a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ptrnext$[rbp]
  00211	66 89 01	 mov	 WORD PTR [rcx], ax

; 575  : 
; 576  :     return _Ptrdest;

  00214	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Ptrdest$[rbp]
$LN11@Maklocstr:

; 577  : }

  0021b	48 8b f8	 mov	 rdi, rax
  0021e	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00222	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcFrameData
  00229	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0022e	48 8b c7	 mov	 rax, rdi
  00231	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00238	48 33 cd	 xor	 rcx, rbp
  0023b	e8 00 00 00 00	 call	 __security_check_cookie
  00240	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00247	5f		 pop	 rdi
  00248	5d		 pop	 rbp
  00249	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ENDP ; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gruntime_error@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gruntime_error@std@@UEAAPEAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1runtime_error@std@@UEAA@XZ
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gruntime_error@std@@UEAAPEAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0runtime_error@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0runtime_error@std@@QEAA@AEBV01@@Z PROC		; std::runtime_error::runtime_error, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7runtime_error@std@@6B@
  00039	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??0runtime_error@std@@QEAA@AEBV01@@Z ENDP		; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1runtime_error@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1runtime_error@std@@UEAA@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??1runtime_error@std@@UEAA@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\stdexcept
;	COMDAT ??0runtime_error@std@@QEAA@PEBD@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
??0runtime_error@std@@QEAA@PEBD@Z PROC			; std::runtime_error::runtime_error, COMDAT

; 113  :     explicit runtime_error(const char* _Message) : _Mybase(_Message) {}

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__760BB52B_stdexcept
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Message$[rbp]
  0002b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00032	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBD@Z ; std::exception::exception
  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7runtime_error@std@@6B@
  00045	48 89 08	 mov	 QWORD PTR [rax], rcx
  00048	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00056	5f		 pop	 rdi
  00057	5d		 pop	 rbp
  00058	c3		 ret	 0
??0runtime_error@std@@QEAA@PEBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 477  :     _NODISCARD static constexpr int_type eof() noexcept {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 478  :         return static_cast<int_type>(EOF);

  0001b	b8 ff ff ff ff	 mov	 eax, -1

; 479  :     }

  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 192
_Left$ = 240
_Right$ = 248
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 469  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 470  :         return _Left == _Right;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00032	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00034	39 08		 cmp	 DWORD PTR [rax], ecx
  00036	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00038	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv65[rbp], 1
  00042	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00044	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv65[rbp], 0
$LN4@eq_int_typ:
  0004e	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv65[rbp]

; 471  :     }

  00055	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
_First$ = 224
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 396  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 397  :         // find length of null-terminated string
; 398  : #if _HAS_CXX17
; 399  : #ifdef __cpp_char8_t
; 400  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 401  : #if _HAS_U8_INTRINSICS
; 402  :             return __builtin_u8strlen(_First);
; 403  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 404  :             return _Primary_char_traits::length(_First);
; 405  : #endif // _HAS_U8_INTRINSICS
; 406  :         } else
; 407  : #endif // __cpp_char8_t
; 408  :         {
; 409  :             return __builtin_strlen(_First);
; 410  :         }
; 411  : #else // _HAS_CXX17
; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First$[rbp]
  00026	e8 00 00 00 00	 call	 strlen

; 413  : #endif // _HAS_CXX17
; 414  :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B0A13A33_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002b	74 14		 je	 SHORT $LN3@what
  0002d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00038	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  0003f	eb 0e		 jmp	 SHORT $LN4@what
$LN3@what:
  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  00048	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@what:
  0004f	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 96   :     }

  00056	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005d	5f		 pop	 rdi
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B0A13A33_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0002d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

  00030	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00037	48 83 c0 08	 add	 rax, 8
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 __std_exception_destroy

; 91   :     }

  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B0A13A33_vcruntime_exception@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx

; 71   :         : _Data()

  00035	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 c0 08	 add	 rax, 8
  00040	48 8b f8	 mov	 rdi, rax
  00043	33 c0		 xor	 eax, eax
  00045	b9 10 00 00 00	 mov	 ecx, 16
  0004a	f3 aa		 rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 83 c0 08	 add	 rax, 8
  00057	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Other$[rbp]
  0005e	48 83 c1 08	 add	 rcx, 8
  00062	48 8b d0	 mov	 rdx, rax
  00065	e8 00 00 00 00	 call	 __std_exception_copy

; 74   :     }

  0006a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBD@Z
_TEXT	SEGMENT
_InitData$ = 8
__$ArrayPad$ = 232
this$ = 272
_Message$ = 280
??0exception@std@@QEAA@QEBD@Z PROC			; std::exception::exception, COMDAT

; 59   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001d	b9 0e 00 00 00	 mov	 ecx, 14
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR [rsp+312]
  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00038	48 33 c5	 xor	 rax, rbp
  0003b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B0A13A33_vcruntime_exception@h
  00049	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0004e	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0005c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 58   :         : _Data()

  0005f	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00066	48 83 c0 08	 add	 rax, 8
  0006a	48 8b f8	 mov	 rdi, rax
  0006d	33 c0		 xor	 eax, eax
  0006f	b9 10 00 00 00	 mov	 ecx, 16
  00074	f3 aa		 rep stosb

; 60   :         __std_exception_data _InitData = { _Message, true };

  00076	48 8b 85 18 01
	00 00		 mov	 rax, QWORD PTR _Message$[rbp]
  0007d	48 89 45 08	 mov	 QWORD PTR _InitData$[rbp], rax
  00081	c6 45 10 01	 mov	 BYTE PTR _InitData$[rbp+8], 1

; 61   :         __std_exception_copy(&_InitData, &_Data);

  00085	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008c	48 83 c0 08	 add	 rax, 8
  00090	48 8b d0	 mov	 rdx, rax
  00093	48 8d 4d 08	 lea	 rcx, QWORD PTR _InitData$[rbp]
  00097	e8 00 00 00 00	 call	 __std_exception_copy

; 62   :     }

  0009c	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a3	48 8b f8	 mov	 rdi, rax
  000a6	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??0exception@std@@QEAA@QEBD@Z$rtcFrameData
  000b1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000b6	48 8b c7	 mov	 rax, rdi
  000b9	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000c0	48 33 cd	 xor	 rcx, rbp
  000c3	e8 00 00 00 00	 call	 __security_check_cookie
  000c8	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  000cf	5f		 pop	 rdi
  000d0	5d		 pop	 rbp
  000d1	c3		 ret	 0
??0exception@std@@QEAA@QEBD@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h
;	COMDAT wmemcpy
_TEXT	SEGMENT
_S1$ = 224
_S2$ = 232
_N$ = 240
wmemcpy	PROC						; COMDAT

; 234  :     {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__93DC0B45_wchar@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 235  :         #pragma warning(suppress: 6386) // Buffer overrun
; 236  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00029	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _N$[rbp]
  00030	48 d1 e0	 shl	 rax, 1
  00033	4c 8b c0	 mov	 r8, rax
  00036	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _S2$[rbp]
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _S1$[rbp]
  00044	e8 00 00 00 00	 call	 memcpy

; 237  :     }

  00049	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
wmemcpy	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch05_01_sol\Ch05_01\Ch05_01.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CB82CB62_Ch05_01@cpp
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch05_01_sol\Ch05_01\Ch05_01.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CB82CB62_Ch05_01@cpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
