; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30143.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__97D3638F_vcruntime_new@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__B49664B7_stdlib@h DB 01H
__244AF085_cstdlib DB 01H
__60BC708E_cmath DB 01H
__589FA321_type_traits DB 01H
__20BB4341_malloc@h DB 01H
__B0A13A33_vcruntime_exception@h DB 01H
__FF458F76_exception DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__7FE5F402_limits DB 01H
__12269DE6_xutility DB 01H
__79D216CD_xmemory DB 01H
__0D019051_xstring DB 01H
__760BB52B_stdexcept DB 01H
__B2D2BA86_ctype@h DB 01H
__B7987E10_string DB 01H
__79C7FC57_basetsd@h DB 01H
__D545DD43_guiddef@h DB 01H
__D5DDFBF3_winnt@h DB 01H
__439612F0_processthreadsapi@h DB 01H
__5733279A_memoryapi@h DB 01H
__D4435474_winerror@h DB 01H
__B3ED30D4_winbase@h DB 01H
__DB057BA3_winuser@h DB 01H
__A7113148_winioctl@h DB 01H
__EC5BC72C_propidl@h DB 01H
__6DA674A0_oleauto@h DB 01H
__A118E6DC_stralign@h DB 01H
__0D8B5661_OS@h DB 01H
__0AAF5CB5_AlignedMem@h DB 01H
__1589CDA2_algorithm DB 01H
__68B92D9D_xbit_ops@h DB 01H
__3F1D166C_random DB 01H
__A5554A75_Ch05_01_misc@cpp DB 01H
__324884E2_vector DB 01H
__1347750E_utility DB 01H
__E458E21C_xstddef DB 01H
__A2CD886F_MT@h DB 01H
msvcjmc	ENDS
PUBLIC	?CheckArgs@@YA_NPEBN0_K@Z			; CheckArgs
PUBLIC	?FillArrays@@YAXPEAN0_K@Z			; FillArrays
PUBLIC	?max@?$numeric_limits@N@std@@SANXZ		; std::numeric_limits<double>::max
PUBLIC	??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAA@III@Z ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>
PUBLIC	?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAXII@Z ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::seed
PUBLIC	??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator()
PUBLIC	?_Refill_lower@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_lower
PUBLIC	?_Refill_upper@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_upper
PUBLIC	??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAA@I@Z ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>
PUBLIC	?min@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::min
PUBLIC	?max@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::max
PUBLIC	??$IsAligned@N@AlignedMem@@SA_NPEBN_K@Z		; AlignedMem::IsAligned<double>
PUBLIC	??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z		; MT::FillArrayFP<double>
PUBLIC	??0?$uniform_real@N@std@@QEAA@NN@Z		; std::uniform_real<double>::uniform_real<double>
PUBLIC	??0param_type@?$uniform_real@N@std@@QEAA@NN@Z	; std::uniform_real<double>::param_type::param_type
PUBLIC	?_Init@param_type@?$uniform_real@N@std@@QEAAXNN@Z ; std::uniform_real<double>::param_type::_Init
PUBLIC	??0?$uniform_real_distribution@N@std@@QEAA@NN@Z	; std::uniform_real_distribution<double>::uniform_real_distribution<double>
PUBLIC	??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@QEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z ; std::uniform_real<double>::operator()<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
PUBLIC	??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@AEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@AEBUparam_type@01@@Z ; std::uniform_real<double>::_Eval<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
PUBLIC	??$generate_canonical@N$0?0V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@YANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@0@@Z ; std::generate_canonical<double,-1,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GH@KGHOHOFN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1MO@EFOBNBOJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0CP@CCNIMDMM@invalid?5min?5and?5max?5arguments?5f@ ; `string'
PUBLIC	??_C@_1FK@ODOEAJFE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAu?$AAn?$AAi?$AAf?$AAo?$AAr?$AAm?$AA_?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_1GC@JPDJGDEF@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn@ ; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4039000000000000
PUBLIC	__real@404a800000000000
PUBLIC	__real@41f0000000000000
PUBLIC	__real@7fefffffffffffff
PUBLIC	__real@c039000000000000
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_ceil:PROC
EXTRN	__imp_log2:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CheckArgs@@YA_NPEBN0_K@Z DD imagerel $LN6
	DD	imagerel $LN6+123
	DD	imagerel $unwind$?CheckArgs@@YA_NPEBN0_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FillArrays@@YAXPEAN0_K@Z DD imagerel $LN6
	DD	imagerel $LN6+283
	DD	imagerel $unwind$?FillArrays@@YAXPEAN0_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@N@std@@SANXZ DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$?max@?$numeric_limits@N@std@@SANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAA@III@Z DD imagerel $LN3
	DD	imagerel $LN3+106
	DD	imagerel $unwind$??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAA@III@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAXII@Z DD imagerel $LN6
	DD	imagerel $LN6+212
	DD	imagerel $unwind$?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAXII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ DD imagerel $LN6
	DD	imagerel $LN6+230
	DD	imagerel $unwind$??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Refill_lower@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ DD imagerel $LN15
	DD	imagerel $LN15+511
	DD	imagerel $unwind$?_Refill_lower@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Refill_upper@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ DD imagerel $LN8
	DD	imagerel $LN8+207
	DD	imagerel $unwind$?_Refill_upper@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAA@I@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAA@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?min@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$?min@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?max@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$IsAligned@N@AlignedMem@@SA_NPEBN_K@Z DD imagerel $LN5
	DD	imagerel $LN5+90
	DD	imagerel $unwind$??$IsAligned@N@AlignedMem@@SA_NPEBN_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z DD imagerel $LN6
	DD	imagerel $LN6+263
	DD	imagerel $unwind$??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$uniform_real@N@std@@QEAA@NN@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??0?$uniform_real@N@std@@QEAA@NN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0param_type@?$uniform_real@N@std@@QEAA@NN@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0param_type@?$uniform_real@N@std@@QEAA@NN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Init@param_type@?$uniform_real@N@std@@QEAAXNN@Z DD imagerel $LN13
	DD	imagerel $LN13+274
	DD	imagerel $unwind$?_Init@param_type@?$uniform_real@N@std@@QEAAXNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$uniform_real_distribution@N@std@@QEAA@NN@Z DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$??0?$uniform_real_distribution@N@std@@QEAA@NN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@QEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@QEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@AEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@AEBUparam_type@01@@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@AEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@AEBUparam_type@01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$generate_canonical@N$0?0V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@YANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@0@@Z DD imagerel $LN8
	DD	imagerel $LN8+359
	DD	imagerel $unwind$??$generate_canonical@N$0?0V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@YANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@0@@Z
pdata	ENDS
;	COMDAT __real@c039000000000000
CONST	SEGMENT
__real@c039000000000000 DQ 0c039000000000000r	; -25
CONST	ENDS
;	COMDAT __real@7fefffffffffffff
CONST	SEGMENT
__real@7fefffffffffffff DQ 07fefffffffffffffr	; 1.79769e+308
CONST	ENDS
;	COMDAT __real@41f0000000000000
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+09
CONST	ENDS
;	COMDAT __real@404a800000000000
CONST	SEGMENT
__real@404a800000000000 DQ 0404a800000000000r	; 53
CONST	ENDS
;	COMDAT __real@4039000000000000
CONST	SEGMENT
__real@4039000000000000 DQ 04039000000000000r	; 25
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1GC@JPDJGDEF@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn@
CONST	SEGMENT
??_C@_1GC@JPDJGDEF@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'm', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'a'
	DB	00H, 'n', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'x', 00H
	DB	' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 's', 00H, ' ', 00H, 'f', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'm', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'l', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@ODOEAJFE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAu?$AAn?$AAi?$AAf?$AAo?$AAr?$AAm?$AA_?$AAr?$AAe@
CONST	SEGMENT
??_C@_1FK@ODOEAJFE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAu?$AAn?$AAi?$AAf?$AAo?$AAr?$AAm?$AA_?$AAr?$AAe@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, 'u', 00H, 'n', 00H
	DB	'i', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, '_', 00H, 'r'
	DB	00H, 'e', 00H, 'a', 00H, 'l', 00H, '<', 00H, 'd', 00H, 'o', 00H
	DB	'u', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '>', 00H, ':', 00H, ':'
	DB	00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, '_', 00H
	DB	't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ':', 00H, ':', 00H, '_'
	DB	00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@CCNIMDMM@invalid?5min?5and?5max?5arguments?5f@
CONST	SEGMENT
??_C@_0CP@CCNIMDMM@invalid?5min?5and?5max?5arguments?5f@ DB 'invalid min '
	DB	'and max arguments for uniform_real', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1MO@EFOBNBOJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MO@EFOBNBOJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '1', 00H
	DB	'3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'r', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@KGHOHOFN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GH@KGHOHOFN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\include\random', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$generate_canonical@N$0?0V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@YANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@0@@Z DD 035051301H
	DD	010e3313H
	DD	070070047H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@AEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@AEBUparam_type@01@@Z DD 035051d01H
	DD	0118331dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@QEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z DD 035051801H
	DD	01133318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$uniform_real_distribution@N@std@@QEAA@NN@Z DD 025051f01H
	DD	011a231fH
	DD	07013001dH
	DD	05012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Init@param_type@?$uniform_real@N@std@@QEAAXNN@Z DD 035051f01H
	DD	011a331fH
	DD	07013001fH
	DD	05012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0param_type@?$uniform_real@N@std@@QEAA@NN@Z DD 025051f01H
	DD	011a231fH
	DD	07013001dH
	DD	05012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$uniform_real@N@std@@QEAA@NN@Z DD 025051f01H
	DD	011a231fH
	DD	07013001dH
	DD	05012H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	04dH
	DB	0eeH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z DD 025055419H
	DD	0125232aH
	DD	070180345H
	DD	05017H
	DD	imagerel __GSHandlerCheck
	DD	01a18H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z$rtcName$0 DB 072H	; MT::FillArrayFP<double>
	DB	06eH
	DB	067H
	DB	00H
??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z$rtcName$1 DB 064H	; MT::FillArrayFP<double>
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z$rtcVarDesc DD 013d8H ; MT::FillArrayFP<double>
	DD	010H
	DQ	FLAT:??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z$rtcName$1
	DD	030H
	DD	01388H
	DQ	FLAT:??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z$rtcName$0
	ORG $+96
??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z$rtcFrameData DD 02H	; MT::FillArrayFP<double>
	DD	00H
	DQ	FLAT:??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$IsAligned@N@AlignedMem@@SA_NPEBN_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?min@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAA@I@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Refill_upper@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Refill_lower@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007002dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAXII@Z DD 025051c01H
	DD	0117231cH
	DD	070100025H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAA@III@Z DD 025052101H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@N@std@@SANXZ DD 035050f01H
	DD	010a330fH
	DD	07003001fH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FillArrays@@YAXPEAN0_K@Z DD 035051d01H
	DD	0118331dH
	DD	070110033H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CheckArgs@@YA_NPEBN0_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\random
;	COMDAT ??$generate_canonical@N$0?0V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@YANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@0@@Z
_TEXT	SEGMENT
_Digits$ = 8
_Minbits$ = 40
_Gxmin$ = 72
_Gxmax$ = 104
_Rx$ = 136
_Ceil$ = 164
_Kx$ = 196
_Ans$ = 232
_Factor$ = 264
_Idx$1 = 292
tv75 = 500
_Gx$ = 544
??$generate_canonical@N$0?0V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@YANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@0@@Z PROC ; std::generate_canonical<double,-1,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >, COMDAT

; 249  : _NODISCARD _Real generate_canonical(_Gen& _Gx) { // build a floating-point value from random sequence

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F1D166C_random
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 250  :     _RNG_REQUIRE_REALTYPE(generate_canonical, _Real);
; 251  : 
; 252  :     const size_t _Digits  = static_cast<size_t>(numeric_limits<_Real>::digits);

  0001f	48 c7 45 08 35
	00 00 00	 mov	 QWORD PTR _Digits$[rbp], 53 ; 00000035H

; 253  :     const size_t _Minbits = _Digits < _Bits ? _Digits : _Bits;

  00027	48 c7 45 28 35
	00 00 00	 mov	 QWORD PTR _Minbits$[rbp], 53 ; 00000035H

; 254  : 
; 255  :     const _Real _Gxmin = static_cast<_Real>((_Gx.min)());

  0002f	e8 00 00 00 00	 call	 ?min@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::min
  00034	8b c0		 mov	 eax, eax
  00036	c4 e1 fb 2a c0	 vcvtsi2sd xmm0, xmm0, rax
  0003b	c5 fb 11 45 48	 vmovsd	 QWORD PTR _Gxmin$[rbp], xmm0

; 256  :     const _Real _Gxmax = static_cast<_Real>((_Gx.max)());

  00040	e8 00 00 00 00	 call	 ?max@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::max
  00045	8b c0		 mov	 eax, eax
  00047	c4 e1 fb 2a c0	 vcvtsi2sd xmm0, xmm0, rax
  0004c	c5 fb 11 45 68	 vmovsd	 QWORD PTR _Gxmax$[rbp], xmm0

; 257  :     const _Real _Rx    = (_Gxmax - _Gxmin) + _Real{1};

  00051	c5 fb 10 05 00
	00 00 00	 vmovsd	 xmm0, QWORD PTR __real@41f0000000000000
  00059	c5 fb 11 85 88
	00 00 00	 vmovsd	 QWORD PTR _Rx$[rbp], xmm0

; 258  : 
; 259  :     const int _Ceil = static_cast<int>(_STD ceil(static_cast<_Real>(_Minbits) / _STD log2(_Rx)));

  00061	c5 fb 10 05 00
	00 00 00	 vmovsd	 xmm0, QWORD PTR __real@41f0000000000000
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_log2
  0006f	c5 fb 10 0d 00
	00 00 00	 vmovsd	 xmm1, QWORD PTR __real@404a800000000000
  00077	c5 f3 5e c0	 vdivsd	 xmm0, xmm1, xmm0
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ceil
  00081	c5 fb 2c c0	 vcvttsd2si eax, xmm0
  00085	89 85 a4 00 00
	00		 mov	 DWORD PTR _Ceil$[rbp], eax

; 260  :     const int _Kx   = _Ceil < 1 ? 1 : _Ceil;

  0008b	83 bd a4 00 00
	00 01		 cmp	 DWORD PTR _Ceil$[rbp], 1
  00092	7d 0c		 jge	 SHORT $LN6@generate_c
  00094	c7 85 f4 01 00
	00 01 00 00 00	 mov	 DWORD PTR tv75[rbp], 1
  0009e	eb 0c		 jmp	 SHORT $LN7@generate_c
$LN6@generate_c:
  000a0	8b 85 a4 00 00
	00		 mov	 eax, DWORD PTR _Ceil$[rbp]
  000a6	89 85 f4 01 00
	00		 mov	 DWORD PTR tv75[rbp], eax
$LN7@generate_c:
  000ac	8b 85 f4 01 00
	00		 mov	 eax, DWORD PTR tv75[rbp]
  000b2	89 85 c4 00 00
	00		 mov	 DWORD PTR _Kx$[rbp], eax

; 261  : 
; 262  :     _Real _Ans{0};

  000b8	c5 f9 57 c0	 vxorpd	 xmm0, xmm0, xmm0
  000bc	c5 fb 11 85 e8
	00 00 00	 vmovsd	 QWORD PTR _Ans$[rbp], xmm0

; 263  :     _Real _Factor{1};

  000c4	c5 fb 10 05 00
	00 00 00	 vmovsd	 xmm0, QWORD PTR __real@3ff0000000000000
  000cc	c5 fb 11 85 08
	01 00 00	 vmovsd	 QWORD PTR _Factor$[rbp], xmm0

; 264  : 
; 265  :     for (int _Idx = 0; _Idx < _Kx; ++_Idx) { // add in another set of bits

  000d4	c7 85 24 01 00
	00 00 00 00 00	 mov	 DWORD PTR _Idx$1[rbp], 0
  000de	eb 0e		 jmp	 SHORT $LN4@generate_c
$LN2@generate_c:
  000e0	8b 85 24 01 00
	00		 mov	 eax, DWORD PTR _Idx$1[rbp]
  000e6	ff c0		 inc	 eax
  000e8	89 85 24 01 00
	00		 mov	 DWORD PTR _Idx$1[rbp], eax
$LN4@generate_c:
  000ee	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR _Kx$[rbp]
  000f4	39 85 24 01 00
	00		 cmp	 DWORD PTR _Idx$1[rbp], eax
  000fa	7d 51		 jge	 SHORT $LN3@generate_c

; 266  :         _Ans += (static_cast<_Real>(_Gx()) - _Gxmin) * _Factor;

  000fc	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Gx$[rbp]
  00103	e8 00 00 00 00	 call	 ??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator()
  00108	8b c0		 mov	 eax, eax
  0010a	c4 e1 fb 2a c0	 vcvtsi2sd xmm0, xmm0, rax
  0010f	c5 fb 5c 05 00
	00 00 00	 vsubsd	 xmm0, xmm0, QWORD PTR __real@0000000000000000
  00117	c5 fb 59 85 08
	01 00 00	 vmulsd	 xmm0, xmm0, QWORD PTR _Factor$[rbp]
  0011f	c5 fb 10 8d e8
	00 00 00	 vmovsd	 xmm1, QWORD PTR _Ans$[rbp]
  00127	c5 f3 58 c0	 vaddsd	 xmm0, xmm1, xmm0
  0012b	c5 fb 11 85 e8
	00 00 00	 vmovsd	 QWORD PTR _Ans$[rbp], xmm0

; 267  :         _Factor *= _Rx;

  00133	c5 fb 10 85 08
	01 00 00	 vmovsd	 xmm0, QWORD PTR _Factor$[rbp]
  0013b	c5 fb 59 05 00
	00 00 00	 vmulsd	 xmm0, xmm0, QWORD PTR __real@41f0000000000000
  00143	c5 fb 11 85 08
	01 00 00	 vmovsd	 QWORD PTR _Factor$[rbp], xmm0

; 268  :     }

  0014b	eb 93		 jmp	 SHORT $LN2@generate_c
$LN3@generate_c:

; 269  : 
; 270  :     return _Ans / _Factor;

  0014d	c5 fb 10 85 e8
	00 00 00	 vmovsd	 xmm0, QWORD PTR _Ans$[rbp]
  00155	c5 fb 5e 85 08
	01 00 00	 vdivsd	 xmm0, xmm0, QWORD PTR _Factor$[rbp]

; 271  : }

  0015d	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00164	5f		 pop	 rdi
  00165	5d		 pop	 rbp
  00166	c3		 ret	 0
??$generate_canonical@N$0?0V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@YANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@0@@Z ENDP ; std::generate_canonical<double,-1,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\random
;	COMDAT ??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@AEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@AEBUparam_type@01@@Z
_TEXT	SEGMENT
this$ = 224
_Eng$ = 232
_Par0$ = 240
??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@AEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@AEBUparam_type@01@@Z PROC ; std::uniform_real<double>::_Eval<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >, COMDAT

; 2683 :     result_type _Eval(_Engine& _Eng, const param_type& _Par0) const {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F1D166C_random
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2684 :         return _NRAND(_Eng, _Ty) * (_Par0._Max - _Par0._Min) + _Par0._Min;

  00029	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Eng$[rbp]
  00030	e8 00 00 00 00	 call	 ??$generate_canonical@N$0?0V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@std@@YANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@0@@Z ; std::generate_canonical<double,-1,std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
  00035	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Par0$[rbp]
  0003c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Par0$[rbp]
  00043	c5 fb 10 48 08	 vmovsd	 xmm1, QWORD PTR [rax+8]
  00048	c5 f3 5c 09	 vsubsd	 xmm1, xmm1, QWORD PTR [rcx]
  0004c	c5 fb 59 c1	 vmulsd	 xmm0, xmm0, xmm1
  00050	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Par0$[rbp]
  00057	c5 fb 58 00	 vaddsd	 xmm0, xmm0, QWORD PTR [rax]

; 2685 :     }

  0005b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00062	5f		 pop	 rdi
  00063	5d		 pop	 rbp
  00064	c3		 ret	 0
??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@AEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@AEBUparam_type@01@@Z ENDP ; std::uniform_real<double>::_Eval<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\random
;	COMDAT ??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@QEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z
_TEXT	SEGMENT
this$ = 224
_Eng$ = 232
??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@QEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z PROC ; std::uniform_real<double>::operator()<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >, COMDAT

; 2655 :     _NODISCARD result_type operator()(_Engine& _Eng) const {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F1D166C_random
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2656 :         return _Eval(_Eng, _Par);

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	4c 8b c0	 mov	 r8, rax
  0002e	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Eng$[rbp]
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??$_Eval@V?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@AEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@AEBUparam_type@01@@Z ; std::uniform_real<double>::_Eval<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >

; 2657 :     }

  00041	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00048	5f		 pop	 rdi
  00049	5d		 pop	 rbp
  0004a	c3		 ret	 0
??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@QEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z ENDP ; std::uniform_real<double>::operator()<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\random
;	COMDAT ??0?$uniform_real_distribution@N@std@@QEAA@NN@Z
_TEXT	SEGMENT
this$ = 224
_Min0$ = 232
_Max0$ = 240
??0?$uniform_real_distribution@N@std@@QEAA@NN@Z PROC	; std::uniform_real_distribution<double>::uniform_real_distribution<double>, COMDAT

; 2724 :     explicit uniform_real_distribution(_Ty _Min0, _Ty _Max0 = _Ty{1}) : _Mybase(_Min0, _Max0) {}

$LN3:
  00000	c5 fb 11 54 24
	18		 vmovsd	 QWORD PTR [rsp+24], xmm2
  00006	c5 fb 11 4c 24
	10		 vmovsd	 QWORD PTR [rsp+16], xmm1
  0000c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00011	55		 push	 rbp
  00012	57		 push	 rdi
  00013	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F1D166C_random
  00026	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002b	c5 fb 10 95 f0
	00 00 00	 vmovsd	 xmm2, QWORD PTR _Max0$[rbp]
  00033	c5 fb 10 8d e8
	00 00 00	 vmovsd	 xmm1, QWORD PTR _Min0$[rbp]
  0003b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	e8 00 00 00 00	 call	 ??0?$uniform_real@N@std@@QEAA@NN@Z ; std::uniform_real<double>::uniform_real<double>
  00047	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
??0?$uniform_real_distribution@N@std@@QEAA@NN@Z ENDP	; std::uniform_real_distribution<double>::uniform_real_distribution<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\random
;	COMDAT ?_Init@param_type@?$uniform_real@N@std@@QEAAXNN@Z
_TEXT	SEGMENT
this$ = 224
_Min0$ = 232
_Max0$ = 240
?_Init@param_type@?$uniform_real@N@std@@QEAAXNN@Z PROC	; std::uniform_real<double>::param_type::_Init, COMDAT

; 2611 :         void _Init(_Ty _Min0, _Ty _Max0) { // set internal state

$LN13:
  00000	c5 fb 11 54 24
	18		 vmovsd	 QWORD PTR [rsp+24], xmm2
  00006	c5 fb 11 4c 24
	10		 vmovsd	 QWORD PTR [rsp+16], xmm1
  0000c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00011	55		 push	 rbp
  00012	57		 push	 rdi
  00013	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0001a	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F1D166C_random
  00026	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
$LN4@Init:

; 2612 :             _STL_ASSERT(_Min0 <= _Max0 && (0 <= _Min0 || _Max0 <= _Min0 + (numeric_limits<_Ty>::max)()),

  0002b	c5 fb 10 85 f0
	00 00 00	 vmovsd	 xmm0, QWORD PTR _Max0$[rbp]
  00033	c5 f9 2f 85 e8
	00 00 00	 vcomisd xmm0, QWORD PTR _Min0$[rbp]
  0003b	72 2f		 jb	 SHORT $LN8@Init
  0003d	c5 fb 10 85 e8
	00 00 00	 vmovsd	 xmm0, QWORD PTR _Min0$[rbp]
  00045	c5 f9 2f 05 00
	00 00 00	 vcomisd xmm0, QWORD PTR __real@0000000000000000
  0004d	73 1b		 jae	 SHORT $LN10@Init
  0004f	e8 00 00 00 00	 call	 ?max@?$numeric_limits@N@std@@SANXZ ; std::numeric_limits<double>::max
  00054	c5 fb 10 8d e8
	00 00 00	 vmovsd	 xmm1, QWORD PTR _Min0$[rbp]
  0005c	c5 f3 58 c0	 vaddsd	 xmm0, xmm1, xmm0
  00060	c5 f9 2f 85 f0
	00 00 00	 vcomisd xmm0, QWORD PTR _Max0$[rbp]
  00068	72 02		 jb	 SHORT $LN8@Init
$LN10@Init:
  0006a	eb 6b		 jmp	 SHORT $LN9@Init
$LN8@Init:
$LN7@Init:
  0006c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CP@CCNIMDMM@invalid?5min?5and?5max?5arguments?5f@
  00073	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00078	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0007f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00084	45 33 c9	 xor	 r9d, r9d
  00087	41 b8 35 0a 00
	00		 mov	 r8d, 2613		; 00000a35H
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GH@KGHOHOFN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00094	b9 02 00 00 00	 mov	 ecx, 2
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  0009f	83 f8 01	 cmp	 eax, 1
  000a2	75 03		 jne	 SHORT $LN12@Init
  000a4	cc		 int	 3
  000a5	33 c0		 xor	 eax, eax
$LN12@Init:
  000a7	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000b0	41 b9 35 0a 00
	00		 mov	 r9d, 2613		; 00000a35H
  000b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1MO@EFOBNBOJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1FK@ODOEAJFE@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAu?$AAn?$AAi?$AAf?$AAo?$AAr?$AAm?$AA_?$AAr?$AAe@
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GC@JPDJGDEF@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAi?$AAn?$AA?5?$AAa?$AAn@
  000cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000d1	33 c0		 xor	 eax, eax
  000d3	85 c0		 test	 eax, eax
  000d5	75 95		 jne	 SHORT $LN7@Init
$LN9@Init:
  000d7	33 c0		 xor	 eax, eax
  000d9	85 c0		 test	 eax, eax
  000db	0f 85 4a ff ff
	ff		 jne	 $LN4@Init

; 2613 :                 "invalid min and max arguments for uniform_real");
; 2614 :             _Min = _Min0;

  000e1	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e8	c5 fb 10 85 e8
	00 00 00	 vmovsd	 xmm0, QWORD PTR _Min0$[rbp]
  000f0	c5 fb 11 00	 vmovsd	 QWORD PTR [rax], xmm0

; 2615 :             _Max = _Max0;

  000f4	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fb	c5 fb 10 85 f0
	00 00 00	 vmovsd	 xmm0, QWORD PTR _Max0$[rbp]
  00103	c5 fb 11 40 08	 vmovsd	 QWORD PTR [rax+8], xmm0

; 2616 :         }

  00108	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0010f	5f		 pop	 rdi
  00110	5d		 pop	 rbp
  00111	c3		 ret	 0
?_Init@param_type@?$uniform_real@N@std@@QEAAXNN@Z ENDP	; std::uniform_real<double>::param_type::_Init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\random
;	COMDAT ??0param_type@?$uniform_real@N@std@@QEAA@NN@Z
_TEXT	SEGMENT
this$ = 224
_Min0$ = 232
_Max0$ = 240
??0param_type@?$uniform_real@N@std@@QEAA@NN@Z PROC	; std::uniform_real<double>::param_type::param_type, COMDAT

; 2591 :         explicit param_type(_Ty _Min0, _Ty _Max0 = _Ty{1}) {

$LN3:
  00000	c5 fb 11 54 24
	18		 vmovsd	 QWORD PTR [rsp+24], xmm2
  00006	c5 fb 11 4c 24
	10		 vmovsd	 QWORD PTR [rsp+16], xmm1
  0000c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00011	55		 push	 rbp
  00012	57		 push	 rdi
  00013	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F1D166C_random
  00026	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2592 :             _Init(_Min0, _Max0);

  0002b	c5 fb 10 95 f0
	00 00 00	 vmovsd	 xmm2, QWORD PTR _Max0$[rbp]
  00033	c5 fb 10 8d e8
	00 00 00	 vmovsd	 xmm1, QWORD PTR _Min0$[rbp]
  0003b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00042	e8 00 00 00 00	 call	 ?_Init@param_type@?$uniform_real@N@std@@QEAAXNN@Z ; std::uniform_real<double>::param_type::_Init

; 2593 :         }

  00047	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00055	5f		 pop	 rdi
  00056	5d		 pop	 rbp
  00057	c3		 ret	 0
??0param_type@?$uniform_real@N@std@@QEAA@NN@Z ENDP	; std::uniform_real<double>::param_type::param_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\random
;	COMDAT ??0?$uniform_real@N@std@@QEAA@NN@Z
_TEXT	SEGMENT
this$ = 224
_Min0$ = 232
_Max0$ = 240
??0?$uniform_real@N@std@@QEAA@NN@Z PROC			; std::uniform_real<double>::uniform_real<double>, COMDAT

; 2624 :     explicit uniform_real(_Ty _Min0, _Ty _Max0 = _Ty{1}) : _Par(_Min0, _Max0) {}

$LN3:
  00000	c5 fb 11 54 24
	18		 vmovsd	 QWORD PTR [rsp+24], xmm2
  00006	c5 fb 11 4c 24
	10		 vmovsd	 QWORD PTR [rsp+16], xmm1
  0000c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00011	55		 push	 rbp
  00012	57		 push	 rdi
  00013	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F1D166C_random
  00026	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	c5 fb 10 95 f0
	00 00 00	 vmovsd	 xmm2, QWORD PTR _Max0$[rbp]
  0003a	c5 fb 10 8d e8
	00 00 00	 vmovsd	 xmm1, QWORD PTR _Min0$[rbp]
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 ??0param_type@?$uniform_real@N@std@@QEAA@NN@Z ; std::uniform_real<double>::param_type::param_type
  0004a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00051	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
??0?$uniform_real@N@std@@QEAA@NN@Z ENDP			; std::uniform_real<double>::uniform_real<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch05_01_sol\Ch05_01\MT.h
;	COMDAT ??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z
_TEXT	SEGMENT
rng$ = 16
dist$ = 5048
i$5 = 5096
__$ArrayPad$ = 6648
x$ = 6688
n$ = 6696
min_val$ = 6704
max_val$ = 6712
rng_seed$ = 6720
??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z PROC		; MT::FillArrayFP<double>, COMDAT

; 43   :     {

$LN6:
  00000	c5 fb 11 5c 24
	20		 vmovsd	 QWORD PTR [rsp+32], xmm3
  00006	c5 fb 11 54 24
	18		 vmovsd	 QWORD PTR [rsp+24], xmm2
  0000c	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00011	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00016	55		 push	 rbp
  00017	57		 push	 rdi
  00018	b8 28 1a 00 00	 mov	 eax, 6696		; 00001a28H
  0001d	e8 00 00 00 00	 call	 __chkstk
  00022	48 2b e0	 sub	 rsp, rax
  00025	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0002a	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0002f	b9 02 05 00 00	 mov	 ecx, 1282		; 00000502H
  00034	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00039	f3 ab		 rep stosd
  0003b	48 8b 8c 24 48
	1a 00 00	 mov	 rcx, QWORD PTR [rsp+6728]
  00043	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0004a	48 33 c5	 xor	 rax, rbp
  0004d	48 89 85 f8 19
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A2CD886F_MT@h
  0005b	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 44   :         // Note: 'dist' uses hard-coded double instead of T to force generation
; 45   :         // of same sequences for both float and double arrays.
; 46   :         std::mt19937 rng {rng_seed};

  00060	8b 95 40 1a 00
	00		 mov	 edx, DWORD PTR rng_seed$[rbp]
  00066	48 8d 4d 10	 lea	 rcx, QWORD PTR rng$[rbp]
  0006a	e8 00 00 00 00	 call	 ??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAA@I@Z ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>

; 47   :         std::uniform_real_distribution<double> dist {(double)min_val, (double)max_val};

  0006f	c5 fb 10 95 38
	1a 00 00	 vmovsd	 xmm2, QWORD PTR max_val$[rbp]
  00077	c5 fb 10 8d 30
	1a 00 00	 vmovsd	 xmm1, QWORD PTR min_val$[rbp]
  0007f	48 8d 8d b8 13
	00 00		 lea	 rcx, QWORD PTR dist$[rbp]
  00086	e8 00 00 00 00	 call	 ??0?$uniform_real_distribution@N@std@@QEAA@NN@Z ; std::uniform_real_distribution<double>::uniform_real_distribution<double>

; 48   : 
; 49   :         for (size_t i = 0; i < n; i++)

  0008b	48 c7 85 e8 13
	00 00 00 00 00
	00		 mov	 QWORD PTR i$5[rbp], 0
  00096	eb 11		 jmp	 SHORT $LN4@FillArrayF
$LN2@FillArrayF:
  00098	48 8b 85 e8 13
	00 00		 mov	 rax, QWORD PTR i$5[rbp]
  0009f	48 ff c0	 inc	 rax
  000a2	48 89 85 e8 13
	00 00		 mov	 QWORD PTR i$5[rbp], rax
$LN4@FillArrayF:
  000a9	48 8b 85 28 1a
	00 00		 mov	 rax, QWORD PTR n$[rbp]
  000b0	48 39 85 e8 13
	00 00		 cmp	 QWORD PTR i$5[rbp], rax
  000b7	73 25		 jae	 SHORT $LN3@FillArrayF

; 50   :             x[i] = (T)dist(rng);

  000b9	48 8d 55 10	 lea	 rdx, QWORD PTR rng$[rbp]
  000bd	48 8d 8d b8 13
	00 00		 lea	 rcx, QWORD PTR dist$[rbp]
  000c4	e8 00 00 00 00	 call	 ??$?RV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@@?$uniform_real@N@std@@QEBANAEAV?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@1@@Z ; std::uniform_real<double>::operator()<std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253> >
  000c9	48 8b 85 20 1a
	00 00		 mov	 rax, QWORD PTR x$[rbp]
  000d0	48 8b 8d e8 13
	00 00		 mov	 rcx, QWORD PTR i$5[rbp]
  000d7	c5 fb 11 04 c8	 vmovsd	 QWORD PTR [rax+rcx*8], xmm0
  000dc	eb ba		 jmp	 SHORT $LN2@FillArrayF
$LN3@FillArrayF:

; 51   :     }

  000de	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z$rtcFrameData
  000e9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000ee	48 8b 8d f8 19
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000f5	48 33 cd	 xor	 rcx, rbp
  000f8	e8 00 00 00 00	 call	 __security_check_cookie
  000fd	48 8d a5 08 1a
	00 00		 lea	 rsp, QWORD PTR [rbp+6664]
  00104	5f		 pop	 rdi
  00105	5d		 pop	 rbp
  00106	c3		 ret	 0
??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z ENDP		; MT::FillArrayFP<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch05_01_sol\Ch05_01\AlignedMem.h
;	COMDAT ??$IsAligned@N@AlignedMem@@SA_NPEBN_K@Z
_TEXT	SEGMENT
p$ = 224
alignment$ = 232
??$IsAligned@N@AlignedMem@@SA_NPEBN_K@Z PROC		; AlignedMem::IsAligned<double>, COMDAT

; 29   :     {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0AAF5CB5_AlignedMem@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 30   :         if (p == nullptr)

  00024	48 83 bd e0 00
	00 00 00	 cmp	 QWORD PTR p$[rbp], 0
  0002c	75 04		 jne	 SHORT $LN2@IsAligned

; 31   :             return false;

  0002e	32 c0		 xor	 al, al
  00030	eb 1e		 jmp	 SHORT $LN1@IsAligned
$LN2@IsAligned:

; 32   : 
; 33   :         if (((uintptr_t)p % alignment) != 0)

  00032	33 d2		 xor	 edx, edx
  00034	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR p$[rbp]
  0003b	48 f7 b5 e8 00
	00 00		 div	 QWORD PTR alignment$[rbp]
  00042	48 8b c2	 mov	 rax, rdx
  00045	48 85 c0	 test	 rax, rax
  00048	74 04		 je	 SHORT $LN3@IsAligned

; 34   :             return false;

  0004a	32 c0		 xor	 al, al
  0004c	eb 02		 jmp	 SHORT $LN1@IsAligned
$LN3@IsAligned:

; 35   : 
; 36   :         return true;

  0004e	b0 01		 mov	 al, 1
$LN1@IsAligned:

; 37   :     }

  00050	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00057	5f		 pop	 rdi
  00058	5d		 pop	 rbp
  00059	c3		 ret	 0
??$IsAligned@N@AlignedMem@@SA_NPEBN_K@Z ENDP		; AlignedMem::IsAligned<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\random
;	COMDAT ?max@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ
_TEXT	SEGMENT
?max@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ PROC ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::max, COMDAT

; 1258 :     _NODISCARD static constexpr result_type(max)() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F1D166C_random
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1259 :         return _Mybase::_WMSK;

  0001b	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH

; 1260 :     }

  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
?max@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ ENDP ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\random
;	COMDAT ?min@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ
_TEXT	SEGMENT
?min@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ PROC ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::min, COMDAT

; 1254 :     _NODISCARD static constexpr result_type(min)() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F1D166C_random
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1255 :         return 0;

  0001b	33 c0		 xor	 eax, eax

; 1256 :     }

  0001d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?min@?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@SAIXZ ENDP ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\random
;	COMDAT ??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAA@I@Z
_TEXT	SEGMENT
this$ = 224
_Xx0$ = 232
??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAA@I@Z PROC ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>, COMDAT

; 1213 :     explicit mersenne_twister_engine(result_type _Xx0) : _Mybase(_Xx0, _Dx, _Fx) {}

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F1D166C_random
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00023	41 b9 65 89 07
	6c		 mov	 r9d, 1812433253		; 6c078965H
  00029	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  0002f	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR _Xx0$[rbp]
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAA@III@Z ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??0?$mersenne_twister_engine@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$0PPPPPPPP@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@$0GMAHIJGF@@std@@QEAA@I@Z ENDP ; std::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>::mersenne_twister_engine<unsigned int,32,624,397,31,2567483615,11,4294967295,7,2636928640,15,4022730752,18,1812433253>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\random
;	COMDAT ?_Refill_upper@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ
_TEXT	SEGMENT
_Ix$ = 8
_Tmp$1 = 36
tv128 = 244
this$ = 288
?_Refill_upper@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ PROC ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_upper, COMDAT

; 1135 :     void _Refill_upper() { // compute values for the upper half of the history array

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F1D166C_random
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1136 :         size_t _Ix;
; 1137 :         for (_Ix = _Nx; _Ix < 2 * _Nx; ++_Ix) { // fill in values

  0001f	48 c7 45 08 70
	02 00 00	 mov	 QWORD PTR _Ix$[rbp], 624 ; 00000270H
  00027	eb 0b		 jmp	 SHORT $LN4@Refill_upp
$LN2@Refill_upp:
  00029	48 8b 45 08	 mov	 rax, QWORD PTR _Ix$[rbp]
  0002d	48 ff c0	 inc	 rax
  00030	48 89 45 08	 mov	 QWORD PTR _Ix$[rbp], rax
$LN4@Refill_upp:
  00034	48 81 7d 08 e0
	04 00 00	 cmp	 QWORD PTR _Ix$[rbp], 1248 ; 000004e0H
  0003c	0f 83 83 00 00
	00		 jae	 $LN3@Refill_upp

; 1138 :             _Ty _Tmp       = (this->_Ax[_Ix - _Nx] & _HMSK) | (this->_Ax[_Ix - _Nx + 1] & _LMSK);

  00042	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ix$[rbp]
  0004d	8b 84 88 44 f6
	ff ff		 mov	 eax, DWORD PTR [rax+rcx*4-2492]
  00054	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00059	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00060	48 8b 55 08	 mov	 rdx, QWORD PTR _Ix$[rbp]
  00064	8b 8c 91 48 f6
	ff ff		 mov	 ecx, DWORD PTR [rcx+rdx*4-2488]
  0006b	0f ba f1 1f	 btr	 ecx, 31
  0006f	0b c1		 or	 eax, ecx
  00071	89 45 24	 mov	 DWORD PTR _Tmp$1[rbp], eax

; 1139 :             this->_Ax[_Ix] = (_Tmp >> 1) ^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix - _Nx + _Mx];

  00074	8b 45 24	 mov	 eax, DWORD PTR _Tmp$1[rbp]
  00077	83 e0 01	 and	 eax, 1
  0007a	85 c0		 test	 eax, eax
  0007c	74 0c		 je	 SHORT $LN6@Refill_upp
  0007e	c7 85 f4 00 00
	00 df b0 08 99	 mov	 DWORD PTR tv128[rbp], -1727483681 ; 9908b0dfH
  00088	eb 0a		 jmp	 SHORT $LN7@Refill_upp
$LN6@Refill_upp:
  0008a	c7 85 f4 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv128[rbp], 0
$LN7@Refill_upp:
  00094	8b 45 24	 mov	 eax, DWORD PTR _Tmp$1[rbp]
  00097	d1 e8		 shr	 eax, 1
  00099	33 85 f4 00 00
	00		 xor	 eax, DWORD PTR tv128[rbp]
  0009f	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a6	48 8b 55 08	 mov	 rdx, QWORD PTR _Ix$[rbp]
  000aa	33 84 91 78 fc
	ff ff		 xor	 eax, DWORD PTR [rcx+rdx*4-904]
  000b1	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b8	48 8b 55 08	 mov	 rdx, QWORD PTR _Ix$[rbp]
  000bc	89 44 91 04	 mov	 DWORD PTR [rcx+rdx*4+4], eax

; 1140 :         }

  000c0	e9 64 ff ff ff	 jmp	 $LN2@Refill_upp
$LN3@Refill_upp:

; 1141 :     }

  000c5	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000cc	5f		 pop	 rdi
  000cd	5d		 pop	 rbp
  000ce	c3		 ret	 0
?_Refill_upper@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ ENDP ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_upper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\random
;	COMDAT ?_Refill_lower@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ
_TEXT	SEGMENT
_Ix$ = 8
_Tmp$1 = 36
_Tmp$2 = 68
_Tmp$ = 100
tv212 = 308
tv172 = 308
tv128 = 308
this$ = 352
?_Refill_lower@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ PROC ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_lower, COMDAT

; 1118 :         void _Refill_lower() { // compute values for the lower half of the history array

$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F1D166C_random
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1119 :         size_t _Ix;
; 1120 :         for (_Ix = 0; _Ix < _Nx - _Mx; ++_Ix) { // fill in lower region

  0001f	48 c7 45 08 00
	00 00 00	 mov	 QWORD PTR _Ix$[rbp], 0
  00027	eb 0b		 jmp	 SHORT $LN4@Refill_low
$LN2@Refill_low:
  00029	48 8b 45 08	 mov	 rax, QWORD PTR _Ix$[rbp]
  0002d	48 ff c0	 inc	 rax
  00030	48 89 45 08	 mov	 QWORD PTR _Ix$[rbp], rax
$LN4@Refill_low:
  00034	48 81 7d 08 e3
	00 00 00	 cmp	 QWORD PTR _Ix$[rbp], 227 ; 000000e3H
  0003c	0f 83 83 00 00
	00		 jae	 $LN3@Refill_low

; 1121 :             _Ty _Tmp       = (this->_Ax[_Ix + _Nx] & _HMSK) | (this->_Ax[_Ix + _Nx + 1] & _LMSK);

  00042	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ix$[rbp]
  0004d	8b 84 88 c4 09
	00 00		 mov	 eax, DWORD PTR [rax+rcx*4+2500]
  00054	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00059	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00060	48 8b 55 08	 mov	 rdx, QWORD PTR _Ix$[rbp]
  00064	8b 8c 91 c8 09
	00 00		 mov	 ecx, DWORD PTR [rcx+rdx*4+2504]
  0006b	0f ba f1 1f	 btr	 ecx, 31
  0006f	0b c1		 or	 eax, ecx
  00071	89 45 24	 mov	 DWORD PTR _Tmp$1[rbp], eax

; 1122 :             this->_Ax[_Ix] = (_Tmp >> 1) ^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix + _Nx + _Mx];

  00074	8b 45 24	 mov	 eax, DWORD PTR _Tmp$1[rbp]
  00077	83 e0 01	 and	 eax, 1
  0007a	85 c0		 test	 eax, eax
  0007c	74 0c		 je	 SHORT $LN9@Refill_low
  0007e	c7 85 34 01 00
	00 df b0 08 99	 mov	 DWORD PTR tv128[rbp], -1727483681 ; 9908b0dfH
  00088	eb 0a		 jmp	 SHORT $LN10@Refill_low
$LN9@Refill_low:
  0008a	c7 85 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv128[rbp], 0
$LN10@Refill_low:
  00094	8b 45 24	 mov	 eax, DWORD PTR _Tmp$1[rbp]
  00097	d1 e8		 shr	 eax, 1
  00099	33 85 34 01 00
	00		 xor	 eax, DWORD PTR tv128[rbp]
  0009f	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a6	48 8b 55 08	 mov	 rdx, QWORD PTR _Ix$[rbp]
  000aa	33 84 91 f8 0f
	00 00		 xor	 eax, DWORD PTR [rcx+rdx*4+4088]
  000b1	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b8	48 8b 55 08	 mov	 rdx, QWORD PTR _Ix$[rbp]
  000bc	89 44 91 04	 mov	 DWORD PTR [rcx+rdx*4+4], eax

; 1123 :         }

  000c0	e9 64 ff ff ff	 jmp	 $LN2@Refill_low
$LN3@Refill_low:

; 1124 : 
; 1125 :         for (; _Ix < _Nx - 1; ++_Ix) { // fill in upper region (avoids modulus operation)

  000c5	eb 0b		 jmp	 SHORT $LN7@Refill_low
$LN5@Refill_low:
  000c7	48 8b 45 08	 mov	 rax, QWORD PTR _Ix$[rbp]
  000cb	48 ff c0	 inc	 rax
  000ce	48 89 45 08	 mov	 QWORD PTR _Ix$[rbp], rax
$LN7@Refill_low:
  000d2	48 81 7d 08 6f
	02 00 00	 cmp	 QWORD PTR _Ix$[rbp], 623 ; 0000026fH
  000da	0f 83 83 00 00
	00		 jae	 $LN6@Refill_low

; 1126 :             _Ty _Tmp       = (this->_Ax[_Ix + _Nx] & _HMSK) | (this->_Ax[_Ix + _Nx + 1] & _LMSK);

  000e0	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e7	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ix$[rbp]
  000eb	8b 84 88 c4 09
	00 00		 mov	 eax, DWORD PTR [rax+rcx*4+2500]
  000f2	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  000f7	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fe	48 8b 55 08	 mov	 rdx, QWORD PTR _Ix$[rbp]
  00102	8b 8c 91 c8 09
	00 00		 mov	 ecx, DWORD PTR [rcx+rdx*4+2504]
  00109	0f ba f1 1f	 btr	 ecx, 31
  0010d	0b c1		 or	 eax, ecx
  0010f	89 45 44	 mov	 DWORD PTR _Tmp$2[rbp], eax

; 1127 :             this->_Ax[_Ix] = (_Tmp >> 1) ^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Ix - _Nx + _Mx];

  00112	8b 45 44	 mov	 eax, DWORD PTR _Tmp$2[rbp]
  00115	83 e0 01	 and	 eax, 1
  00118	85 c0		 test	 eax, eax
  0011a	74 0c		 je	 SHORT $LN11@Refill_low
  0011c	c7 85 34 01 00
	00 df b0 08 99	 mov	 DWORD PTR tv172[rbp], -1727483681 ; 9908b0dfH
  00126	eb 0a		 jmp	 SHORT $LN12@Refill_low
$LN11@Refill_low:
  00128	c7 85 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv172[rbp], 0
$LN12@Refill_low:
  00132	8b 45 44	 mov	 eax, DWORD PTR _Tmp$2[rbp]
  00135	d1 e8		 shr	 eax, 1
  00137	33 85 34 01 00
	00		 xor	 eax, DWORD PTR tv172[rbp]
  0013d	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00144	48 8b 55 08	 mov	 rdx, QWORD PTR _Ix$[rbp]
  00148	33 84 91 78 fc
	ff ff		 xor	 eax, DWORD PTR [rcx+rdx*4-904]
  0014f	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00156	48 8b 55 08	 mov	 rdx, QWORD PTR _Ix$[rbp]
  0015a	89 44 91 04	 mov	 DWORD PTR [rcx+rdx*4+4], eax

; 1128 :         }

  0015e	e9 64 ff ff ff	 jmp	 $LN5@Refill_low
$LN6@Refill_low:

; 1129 : 
; 1130 :         _Ty _Tmp       = (this->_Ax[_Ix + _Nx] & _HMSK) | (this->_Ax[0] & _LMSK);

  00163	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0016a	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ix$[rbp]
  0016e	8b 84 88 c4 09
	00 00		 mov	 eax, DWORD PTR [rax+rcx*4+2500]
  00175	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0017a	b9 04 00 00 00	 mov	 ecx, 4
  0017f	48 6b c9 00	 imul	 rcx, rcx, 0
  00183	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  0018a	8b 4c 0a 04	 mov	 ecx, DWORD PTR [rdx+rcx+4]
  0018e	0f ba f1 1f	 btr	 ecx, 31
  00192	0b c1		 or	 eax, ecx
  00194	89 45 64	 mov	 DWORD PTR _Tmp$[rbp], eax

; 1131 :         this->_Ax[_Ix] = (_Tmp >> 1) ^ (_Tmp & 1 ? _Px : 0) ^ this->_Ax[_Mx - 1];

  00197	8b 45 64	 mov	 eax, DWORD PTR _Tmp$[rbp]
  0019a	83 e0 01	 and	 eax, 1
  0019d	85 c0		 test	 eax, eax
  0019f	74 0c		 je	 SHORT $LN13@Refill_low
  001a1	c7 85 34 01 00
	00 df b0 08 99	 mov	 DWORD PTR tv212[rbp], -1727483681 ; 9908b0dfH
  001ab	eb 0a		 jmp	 SHORT $LN14@Refill_low
$LN13@Refill_low:
  001ad	c7 85 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR tv212[rbp], 0
$LN14@Refill_low:
  001b7	8b 45 64	 mov	 eax, DWORD PTR _Tmp$[rbp]
  001ba	d1 e8		 shr	 eax, 1
  001bc	33 85 34 01 00
	00		 xor	 eax, DWORD PTR tv212[rbp]
  001c2	b9 04 00 00 00	 mov	 ecx, 4
  001c7	48 69 c9 8c 01
	00 00		 imul	 rcx, rcx, 396		; 0000018cH
  001ce	48 8b 95 60 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  001d5	33 44 0a 04	 xor	 eax, DWORD PTR [rdx+rcx+4]
  001d9	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001e0	48 8b 55 08	 mov	 rdx, QWORD PTR _Ix$[rbp]
  001e4	89 44 91 04	 mov	 DWORD PTR [rcx+rdx*4+4], eax

; 1132 :         this->_Idx     = 0;

  001e8	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  001ef	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1133 :     }

  001f5	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  001fc	5f		 pop	 rdi
  001fd	5d		 pop	 rbp
  001fe	c3		 ret	 0
?_Refill_lower@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ ENDP ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_lower
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\random
;	COMDAT ??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ
_TEXT	SEGMENT
_Res$ = 4
this$ = 256
??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ PROC ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator(), COMDAT

; 1094 :     _NODISCARD result_type operator()() {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F1D166C_random
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1095 :         if (this->_Idx == _Nx) {

  0001f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	81 38 70 02 00
	00		 cmp	 DWORD PTR [rax], 624	; 00000270H
  0002c	75 0e		 jne	 SHORT $LN2@operator

; 1096 :             _Refill_upper();

  0002e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ?_Refill_upper@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_upper
  0003a	eb 1b		 jmp	 SHORT $LN3@operator
$LN2@operator:

; 1097 :         } else if (2 * _Nx <= this->_Idx) {

  0003c	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	81 38 e0 04 00
	00		 cmp	 DWORD PTR [rax], 1248	; 000004e0H
  00049	72 0c		 jb	 SHORT $LN4@operator

; 1098 :             _Refill_lower();

  0004b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00052	e8 00 00 00 00	 call	 ?_Refill_lower@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@IEAAXXZ ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::_Refill_lower
$LN4@operator:
$LN3@operator:

; 1099 :         }
; 1100 : 
; 1101 :         _Ty _Res = this->_Ax[this->_Idx++] & _WMSK;

  00057	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005e	8b 00		 mov	 eax, DWORD PTR [rax]
  00060	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00067	8b 44 81 04	 mov	 eax, DWORD PTR [rcx+rax*4+4]
  0006b	89 45 04	 mov	 DWORD PTR _Res$[rbp], eax
  0006e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00075	8b 00		 mov	 eax, DWORD PTR [rax]
  00077	ff c0		 inc	 eax
  00079	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00080	89 01		 mov	 DWORD PTR [rcx], eax

; 1102 :         _Res ^= (_Res >> _Ux) & _Dxval;

  00082	8b 45 04	 mov	 eax, DWORD PTR _Res$[rbp]
  00085	c1 e8 0b	 shr	 eax, 11
  00088	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008f	23 81 84 13 00
	00		 and	 eax, DWORD PTR [rcx+4996]
  00095	8b 4d 04	 mov	 ecx, DWORD PTR _Res$[rbp]
  00098	33 c8		 xor	 ecx, eax
  0009a	8b c1		 mov	 eax, ecx
  0009c	89 45 04	 mov	 DWORD PTR _Res$[rbp], eax

; 1103 :         _Res ^= (_Res << _Sx) & _Bx;

  0009f	8b 45 04	 mov	 eax, DWORD PTR _Res$[rbp]
  000a2	c1 e0 07	 shl	 eax, 7
  000a5	25 80 56 2c 9d	 and	 eax, -1658038656	; 9d2c5680H
  000aa	8b 4d 04	 mov	 ecx, DWORD PTR _Res$[rbp]
  000ad	33 c8		 xor	 ecx, eax
  000af	8b c1		 mov	 eax, ecx
  000b1	89 45 04	 mov	 DWORD PTR _Res$[rbp], eax

; 1104 :         _Res ^= (_Res << _Tx) & _Cx;

  000b4	8b 45 04	 mov	 eax, DWORD PTR _Res$[rbp]
  000b7	c1 e0 0f	 shl	 eax, 15
  000ba	25 00 00 c6 ef	 and	 eax, -272236544		; efc60000H
  000bf	8b 4d 04	 mov	 ecx, DWORD PTR _Res$[rbp]
  000c2	33 c8		 xor	 ecx, eax
  000c4	8b c1		 mov	 eax, ecx
  000c6	89 45 04	 mov	 DWORD PTR _Res$[rbp], eax

; 1105 :         _Res ^= (_Res & _WMSK) >> _Lx;

  000c9	8b 45 04	 mov	 eax, DWORD PTR _Res$[rbp]
  000cc	c1 e8 12	 shr	 eax, 18
  000cf	8b 4d 04	 mov	 ecx, DWORD PTR _Res$[rbp]
  000d2	33 c8		 xor	 ecx, eax
  000d4	8b c1		 mov	 eax, ecx
  000d6	89 45 04	 mov	 DWORD PTR _Res$[rbp], eax

; 1106 :         return _Res;

  000d9	8b 45 04	 mov	 eax, DWORD PTR _Res$[rbp]

; 1107 :     }

  000dc	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000e3	5f		 pop	 rdi
  000e4	5d		 pop	 rbp
  000e5	c3		 ret	 0
??R?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAIXZ ENDP ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\random
;	COMDAT ?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAXII@Z
_TEXT	SEGMENT
_Prev$ = 4
_Ix$1 = 40
tv85 = 248
this$ = 288
_Xx0$ = 296
_Fx$ = 304
?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAXII@Z PROC ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::seed, COMDAT

; 1058 :     void seed(_Ty _Xx0 = default_seed, _Ty _Fx = static_cast<_Ty>(1812433253)) {

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F1D166C_random
  00023	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1059 :         // set initial values from specified value
; 1060 :         _Ty _Prev = this->_Ax[0] = _Xx0 & _WMSK;

  00028	b8 04 00 00 00	 mov	 eax, 4
  0002d	48 6b c0 00	 imul	 rax, rax, 0
  00031	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00038	8b 95 28 01 00
	00		 mov	 edx, DWORD PTR _Xx0$[rbp]
  0003e	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx
  00042	8b 85 28 01 00
	00		 mov	 eax, DWORD PTR _Xx0$[rbp]
  00048	89 45 04	 mov	 DWORD PTR _Prev$[rbp], eax

; 1061 :         for (size_t _Ix = 1; _Ix < _Nx; ++_Ix) {

  0004b	48 c7 45 28 01
	00 00 00	 mov	 QWORD PTR _Ix$1[rbp], 1
  00053	eb 0b		 jmp	 SHORT $LN4@seed
$LN2@seed:
  00055	48 8b 45 28	 mov	 rax, QWORD PTR _Ix$1[rbp]
  00059	48 ff c0	 inc	 rax
  0005c	48 89 45 28	 mov	 QWORD PTR _Ix$1[rbp], rax
$LN4@seed:
  00060	48 81 7d 28 70
	02 00 00	 cmp	 QWORD PTR _Ix$1[rbp], 624 ; 00000270H
  00068	73 53		 jae	 SHORT $LN3@seed

; 1062 :             _Prev = this->_Ax[_Ix] = (_Ix + _Fx * (_Prev ^ (_Prev >> (_Wx - 2)))) & _WMSK;

  0006a	8b 45 04	 mov	 eax, DWORD PTR _Prev$[rbp]
  0006d	c1 e8 1e	 shr	 eax, 30
  00070	8b 4d 04	 mov	 ecx, DWORD PTR _Prev$[rbp]
  00073	33 c8		 xor	 ecx, eax
  00075	8b c1		 mov	 eax, ecx
  00077	8b 8d 30 01 00
	00		 mov	 ecx, DWORD PTR _Fx$[rbp]
  0007d	0f af c8	 imul	 ecx, eax
  00080	8b c1		 mov	 eax, ecx
  00082	8b c0		 mov	 eax, eax
  00084	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ix$1[rbp]
  00088	48 03 c8	 add	 rcx, rax
  0008b	48 8b c1	 mov	 rax, rcx
  0008e	b9 ff ff ff ff	 mov	 ecx, -1			; ffffffffH
  00093	48 23 c1	 and	 rax, rcx
  00096	48 89 85 f8 00
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  0009d	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a4	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ix$1[rbp]
  000a8	8b 95 f8 00 00
	00		 mov	 edx, DWORD PTR tv85[rbp]
  000ae	89 54 88 04	 mov	 DWORD PTR [rax+rcx*4+4], edx
  000b2	8b 85 f8 00 00
	00		 mov	 eax, DWORD PTR tv85[rbp]
  000b8	89 45 04	 mov	 DWORD PTR _Prev$[rbp], eax

; 1063 :         }

  000bb	eb 98		 jmp	 SHORT $LN2@seed
$LN3@seed:

; 1064 : 
; 1065 :         this->_Idx = _Nx;

  000bd	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c4	c7 00 70 02 00
	00		 mov	 DWORD PTR [rax], 624	; 00000270H

; 1066 :     }

  000ca	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  000d1	5f		 pop	 rdi
  000d2	5d		 pop	 rbp
  000d3	c3		 ret	 0
?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAXII@Z ENDP ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::seed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\random
;	COMDAT ??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAA@III@Z
_TEXT	SEGMENT
this$ = 224
_Xx0$ = 232
_Dxarg$ = 240
_Fxarg$ = 248
??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAA@III@Z PROC ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>, COMDAT

; 1048 :     explicit mersenne_twister(_Ty _Xx0, _Ty _Dxarg = _WMSK, _Ty _Fxarg = static_cast<_Ty>(1812433253))

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	55		 push	 rbp
  00014	57		 push	 rdi
  00015	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001c	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__3F1D166C_random
  00028	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1049 :         : _Dxval(_Dxarg) {

  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	8b 8d f0 00 00
	00		 mov	 ecx, DWORD PTR _Dxarg$[rbp]
  0003a	89 88 84 13 00
	00		 mov	 DWORD PTR [rax+4996], ecx

; 1050 :         seed(_Xx0, _Fxarg);

  00040	44 8b 85 f8 00
	00 00		 mov	 r8d, DWORD PTR _Fxarg$[rbp]
  00047	8b 95 e8 00 00
	00		 mov	 edx, DWORD PTR _Xx0$[rbp]
  0004d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00054	e8 00 00 00 00	 call	 ?seed@?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAAXII@Z ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::seed

; 1051 :     }

  00059	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00060	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??0?$mersenne_twister@I$0CA@$0CHA@$0BIN@$0BP@$0JJAILANP@$0L@$06$0JNCMFGIA@$0P@$0OPMGAAAA@$0BC@@std@@QEAA@III@Z ENDP ; std::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>::mersenne_twister<unsigned int,32,624,397,31,2567483615,11,7,2636928640,15,4022730752,18>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\limits
;	COMDAT ?max@?$numeric_limits@N@std@@SANXZ
_TEXT	SEGMENT
?max@?$numeric_limits@N@std@@SANXZ PROC			; std::numeric_limits<double>::max, COMDAT

; 924  :     _NODISCARD static constexpr double(max)() noexcept {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000a	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7FE5F402_limits
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 925  :         return DBL_MAX;

  0001b	c5 fb 10 05 00
	00 00 00	 vmovsd	 xmm0, QWORD PTR __real@7fefffffffffffff

; 926  :     }

  00023	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002a	5f		 pop	 rdi
  0002b	5d		 pop	 rbp
  0002c	c3		 ret	 0
?max@?$numeric_limits@N@std@@SANXZ ENDP			; std::numeric_limits<double>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch05_01_sol\Ch05_01\Ch05_01_misc.cpp
;	COMDAT ?FillArrays@@YAXPEAN0_K@Z
_TEXT	SEGMENT
rng_seed1$ = 4
rng_seed2$ = 36
fill_min_val$ = 72
fill_max_val$ = 104
i$1 = 136
x$ = 384
y$ = 392
n$ = 400
?FillArrays@@YAXPEAN0_K@Z PROC				; FillArrays, COMDAT

; 19   : {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A5554A75_Ch05_01_misc@cpp
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 20   : 	const unsigned int rng_seed1 = 73;

  00029	c7 45 04 49 00
	00 00		 mov	 DWORD PTR rng_seed1$[rbp], 73 ; 00000049H

; 21   : 	const unsigned int rng_seed2 = 83;

  00030	c7 45 24 53 00
	00 00		 mov	 DWORD PTR rng_seed2$[rbp], 83 ; 00000053H

; 22   : 	const double fill_min_val = -25.0;

  00037	c5 fb 10 05 00
	00 00 00	 vmovsd	 xmm0, QWORD PTR __real@c039000000000000
  0003f	c5 fb 11 45 48	 vmovsd	 QWORD PTR fill_min_val$[rbp], xmm0

; 23   : 	const double fill_max_val = 25.0;

  00044	c5 fb 10 05 00
	00 00 00	 vmovsd	 xmm0, QWORD PTR __real@4039000000000000
  0004c	c5 fb 11 45 68	 vmovsd	 QWORD PTR fill_max_val$[rbp], xmm0

; 24   : 	MT::FillArrayFP(x, n, fill_min_val, fill_max_val, rng_seed1);

  00051	c7 44 24 20 49
	00 00 00	 mov	 DWORD PTR [rsp+32], 73	; 00000049H
  00059	c5 fb 10 1d 00
	00 00 00	 vmovsd	 xmm3, QWORD PTR __real@4039000000000000
  00061	c5 fb 10 15 00
	00 00 00	 vmovsd	 xmm2, QWORD PTR __real@c039000000000000
  00069	48 8b 95 90 01
	00 00		 mov	 rdx, QWORD PTR n$[rbp]
  00070	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  00077	e8 00 00 00 00	 call	 ??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z ; MT::FillArrayFP<double>

; 25   : 	MT::FillArrayFP(y, n, fill_min_val, fill_max_val, rng_seed2);

  0007c	c7 44 24 20 53
	00 00 00	 mov	 DWORD PTR [rsp+32], 83	; 00000053H
  00084	c5 fb 10 1d 00
	00 00 00	 vmovsd	 xmm3, QWORD PTR __real@4039000000000000
  0008c	c5 fb 10 15 00
	00 00 00	 vmovsd	 xmm2, QWORD PTR __real@c039000000000000
  00094	48 8b 95 90 01
	00 00		 mov	 rdx, QWORD PTR n$[rbp]
  0009b	48 8b 8d 88 01
	00 00		 mov	 rcx, QWORD PTR y$[rbp]
  000a2	e8 00 00 00 00	 call	 ??$FillArrayFP@N@MT@@YAXPEAN_KNNI@Z ; MT::FillArrayFP<double>

; 26   : 	for (size_t i = 0; i < n; i++)

  000a7	48 c7 85 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR i$1[rbp], 0
  000b2	eb 11		 jmp	 SHORT $LN4@FillArrays
$LN2@FillArrays:
  000b4	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR i$1[rbp]
  000bb	48 ff c0	 inc	 rax
  000be	48 89 85 88 00
	00 00		 mov	 QWORD PTR i$1[rbp], rax
$LN4@FillArrays:
  000c5	48 8b 85 90 01
	00 00		 mov	 rax, QWORD PTR n$[rbp]
  000cc	48 39 85 88 00
	00 00		 cmp	 QWORD PTR i$1[rbp], rax
  000d3	73 3c		 jae	 SHORT $LN3@FillArrays

; 27   : 		y[i] = y[i] * y[i];

  000d5	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR y$[rbp]
  000dc	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR i$1[rbp]
  000e3	48 8b 95 88 01
	00 00		 mov	 rdx, QWORD PTR y$[rbp]
  000ea	4c 8b 85 88 00
	00 00		 mov	 r8, QWORD PTR i$1[rbp]
  000f1	c5 fb 10 04 c8	 vmovsd	 xmm0, QWORD PTR [rax+rcx*8]
  000f6	c4 a1 7b 59 04
	c2		 vmulsd	 xmm0, xmm0, QWORD PTR [rdx+r8*8]
  000fc	48 8b 85 88 01
	00 00		 mov	 rax, QWORD PTR y$[rbp]
  00103	48 8b 8d 88 00
	00 00		 mov	 rcx, QWORD PTR i$1[rbp]
  0010a	c5 fb 11 04 c8	 vmovsd	 QWORD PTR [rax+rcx*8], xmm0
  0010f	eb a3		 jmp	 SHORT $LN2@FillArrays
$LN3@FillArrays:

; 28   : }

  00111	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  00118	5f		 pop	 rdi
  00119	5d		 pop	 rbp
  0011a	c3		 ret	 0
?FillArrays@@YAXPEAN0_K@Z ENDP				; FillArrays
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch05_01_sol\Ch05_01\Ch05_01_misc.cpp
;	COMDAT ?CheckArgs@@YA_NPEBN0_K@Z
_TEXT	SEGMENT
x$ = 224
y$ = 232
n$ = 240
?CheckArgs@@YA_NPEBN0_K@Z PROC				; CheckArgs, COMDAT

; 9    : {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__A5554A75_Ch05_01_misc@cpp
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 10   : 	if (n < 2)

  00029	48 83 bd f0 00
	00 00 02	 cmp	 QWORD PTR n$[rbp], 2
  00031	73 04		 jae	 SHORT $LN2@CheckArgs

; 11   : 		return false;

  00033	32 c0		 xor	 al, al
  00035	eb 3a		 jmp	 SHORT $LN1@CheckArgs
$LN2@CheckArgs:

; 12   : 	if (!AlignedMem::IsAligned(x, c_Alignment))

  00037	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0003c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  00043	e8 00 00 00 00	 call	 ??$IsAligned@N@AlignedMem@@SA_NPEBN_K@Z ; AlignedMem::IsAligned<double>
  00048	0f b6 c0	 movzx	 eax, al
  0004b	85 c0		 test	 eax, eax
  0004d	75 04		 jne	 SHORT $LN3@CheckArgs

; 13   : 		return false;

  0004f	32 c0		 xor	 al, al
  00051	eb 1e		 jmp	 SHORT $LN1@CheckArgs
$LN3@CheckArgs:

; 14   : 	if (!AlignedMem::IsAligned(y, c_Alignment))

  00053	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00058	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR y$[rbp]
  0005f	e8 00 00 00 00	 call	 ??$IsAligned@N@AlignedMem@@SA_NPEBN_K@Z ; AlignedMem::IsAligned<double>
  00064	0f b6 c0	 movzx	 eax, al
  00067	85 c0		 test	 eax, eax
  00069	75 04		 jne	 SHORT $LN4@CheckArgs

; 15   : 		return false;

  0006b	32 c0		 xor	 al, al
  0006d	eb 02		 jmp	 SHORT $LN1@CheckArgs
$LN4@CheckArgs:

; 16   : 	return true;

  0006f	b0 01		 mov	 al, 1
$LN1@CheckArgs:

; 17   : }

  00071	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
?CheckArgs@@YA_NPEBN0_K@Z ENDP				; CheckArgs
_TEXT	ENDS
END
