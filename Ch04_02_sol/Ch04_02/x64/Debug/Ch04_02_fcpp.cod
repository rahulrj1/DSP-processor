; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30143.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__20BB4341_malloc@h DB 01H
__97D3638F_vcruntime_new@h DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__B49664B7_stdlib@h DB 01H
__244AF085_cstdlib DB 01H
__7FE5F402_limits DB 01H
__589FA321_type_traits DB 01H
__B0A13A33_vcruntime_exception@h DB 01H
__FF458F76_exception DB 01H
__12269DE6_xutility DB 01H
__79D216CD_xmemory DB 01H
__0D019051_xstring DB 01H
__B2D2BA86_ctype@h DB 01H
__B7987E10_string DB 01H
__60BC708E_cmath DB 01H
__760BB52B_stdexcept DB 01H
__A4685E82_xcall_once@h DB 01H
__A0B61CF9_time@h DB 01H
__DDB379A0_xthreads@h DB 01H
__14D0A8C0_atomic DB 01H
__1B354CA2_system_error DB 01H
__65ADBEC9_vcruntime_typeinfo@h DB 01H
__62F96EFF_typeinfo DB 01H
__C34BF88C_memory DB 01H
__EF0EAF83_xfacet DB 01H
__7D708D37_xlocinfo DB 01H
__D23FE460_xlocale DB 01H
__4495FA24_xiosbase DB 01H
__4CB88277_xlocnum DB 01H
__845859A3_ios DB 01H
__67DA974F_xlocmon DB 01H
__D96D2425_xloctime DB 01H
__B8537A73_YmmVal@h DB 01H
__CC351F00_Ch04_02_fcpp@cpp DB 01H
__6151C81E_sstream DB 01H
__A2FF0B9E_istream DB 01H
__C12F3EA4_ostream DB 01H
__74AB0D97_streambuf DB 01H
__038A2AA6_iterator DB 01H
__B30C2184_iosfwd DB 01H
__1347750E_utility DB 01H
__E458E21C_xstddef DB 01H
__F54903A0_xatomic@h DB 01H
__5E3DCDCC_iomanip DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	wmemcpy
PUBLIC	??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	?_Maklocwcs@std@@YAPEA_WPEB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	?UnpackU32_U64_Iavx2@@YAXQEAUYmmVal@@PEBU1@1@Z	; UnpackU32_U64_Iavx2
PUBLIC	?PackI32_I16_Iavx2@@YAXPEAUYmmVal@@PEBU1@1@Z	; PackI32_I16_Iavx2
PUBLIC	?Unpack_with_itself@@YAXQEAUYmmVal@@PEBU1@@Z	; Unpack_with_itself
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
EXTRN	__imp__calloc_dbg:PROC
EXTRN	memcpy:PROC
EXTRN	__imp_wcslen:PROC
EXTRN	strlen:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	_Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wmemcpy DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$wmemcpy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z DD imagerel $LN12
	DD	imagerel $LN12+586
	DD	imagerel $unwind$??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Maklocwcs@std@@YAPEA_WPEB_W@Z DD imagerel $LN4
	DD	imagerel $LN4+142
	DD	imagerel $unwind$?_Maklocwcs@std@@YAPEA_WPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z DD imagerel $LN7
	DD	imagerel $LN7+200
	DD	imagerel $unwind$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+356
	DD	imagerel $unwind$??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+356
	DD	imagerel $unwind$??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?UnpackU32_U64_Iavx2@@YAXQEAUYmmVal@@PEBU1@1@Z DD imagerel $LN3
	DD	imagerel $LN3+264
	DD	imagerel $unwind$?UnpackU32_U64_Iavx2@@YAXQEAUYmmVal@@PEBU1@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PackI32_I16_Iavx2@@YAXPEAUYmmVal@@PEBU1@1@Z DD imagerel $LN3
	DD	imagerel $LN3+181
	DD	imagerel $unwind$?PackI32_I16_Iavx2@@YAXPEAUYmmVal@@PEBU1@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Unpack_with_itself@@YAXQEAUYmmVal@@PEBU1@@Z DD imagerel $LN3
	DD	imagerel $LN3+221
	DD	imagerel $unwind$?Unpack_with_itself@@YAXQEAUYmmVal@@PEBU1@@Z
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA DD 05aH ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Unpack_with_itself@@YAXQEAUYmmVal@@PEBU1@@Z DD 02d062301H
	DD	0115231aH
	DD	0700e0052H
	DD	0d00c500dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PackI32_I16_Iavx2@@YAXPEAUYmmVal@@PEBU1@1@Z DD 02d062801H
	DD	011a231fH
	DD	070130052H
	DD	0d0115012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?UnpackU32_U64_Iavx2@@YAXQEAUYmmVal@@PEBU1@1@Z DD 02d062801H
	DD	011a231fH
	DD	07013007aH
	DD	0d0115012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD 025061e01H
	DD	0119231eH
	DD	070120026H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD 025061e01H
	DD	0119231eH
	DD	070120026H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z DD 035051d01H
	DD	0118331dH
	DD	07011002bH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Maklocwcs@std@@YAPEA_WPEB_W@Z DD 035051301H
	DD	010e3313H
	DD	070070027H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0231H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z DD 035054719H
	DD	0118331dH
	DD	070110047H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0228H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$0 DB 05fH ; std::_Maklocstr<wchar_t>
	DB	057H
	DB	063H
	DB	00H
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$1 DB 05fH ; std::_Maklocstr<wchar_t>
	DB	04dH
	DB	062H
	DB	073H
	DB	074H
	DB	031H
	DB	00H
	ORG $+1
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$2 DB 05fH ; std::_Maklocstr<wchar_t>
	DB	04dH
	DB	062H
	DB	073H
	DB	074H
	DB	032H
	DB	00H
	ORG $+13
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcVarDesc DD 0158H ; std::_Maklocstr<wchar_t>
	DD	08H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$2
	DD	0f8H
	DD	08H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$1
	DD	0d4H
	DD	02H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$0
	ORG $+144
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcFrameData DD 03H ; std::_Maklocstr<wchar_t>
	DD	00H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wmemcpy DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch04_02_sol\Ch04_02\Ch04_02_fcpp.cpp
;	COMDAT ?Unpack_with_itself@@YAXQEAUYmmVal@@PEBU1@@Z
_TEXT	SEGMENT
a_vals$ = 32
c_vals0$ = 96
c_vals1$ = 160
$T1 = 416
$T2 = 480
$T3 = 544
c$ = 656
a$ = 664
?Unpack_with_itself@@YAXQEAUYmmVal@@PEBU1@@Z PROC	; Unpack_with_itself, COMDAT

; 7    : void Unpack_with_itself(YmmVal c[2], const YmmVal* a) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	41 55		 push	 r13
  0000c	55		 push	 rbp
  0000d	57		 push	 rdi
  0000e	48 81 ec 90 02
	00 00		 sub	 rsp, 656		; 00000290H
  00015	4c 8d 6c 24 20	 lea	 r13, QWORD PTR [rsp+32]
  0001a	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  0001f	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CC351F00_Ch04_02_fcpp@cpp
  0002a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 8    : 	__m256i a_vals = _mm256_load_si256((__m256i*)a);

  0002f	49 8b 85 98 02
	00 00		 mov	 rax, QWORD PTR a$[r13]
  00036	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0003a	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T1[rbp], ymm0
  00042	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T1[rbp]
  0004a	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR a_vals$[rbp], ymm0

; 9    : 	__m256i c_vals0 = _mm256_unpacklo_epi32(a_vals, a_vals);

  0004f	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR a_vals$[rbp]
  00054	c5 fd 62 45 20	 vpunpckldq ymm0, ymm0, YMMWORD PTR a_vals$[rbp]
  00059	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  00061	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T2[rbp]
  00069	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR c_vals0$[rbp], ymm0

; 10   : 	__m256i c_vals1 = _mm256_unpackhi_epi32(a_vals, a_vals);

  0006e	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR a_vals$[rbp]
  00073	c5 fd 6a 45 20	 vpunpckhdq ymm0, ymm0, YMMWORD PTR a_vals$[rbp]
  00078	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  00080	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T3[rbp]
  00088	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR c_vals1$[rbp], ymm0

; 11   : 	_mm256_store_si256((__m256i*) & c[0], c_vals0);

  00090	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00095	48 6b c0 00	 imul	 rax, rax, 0
  00099	49 8b 8d 90 02
	00 00		 mov	 rcx, QWORD PTR c$[r13]
  000a0	48 03 c8	 add	 rcx, rax
  000a3	48 8b c1	 mov	 rax, rcx
  000a6	c5 fe 6f 45 60	 vmovdqu ymm0, YMMWORD PTR c_vals0$[rbp]
  000ab	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 12   : 	_mm256_store_si256((__m256i*) & c[1], c_vals1);

  000af	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  000b4	48 6b c0 01	 imul	 rax, rax, 1
  000b8	49 8b 8d 90 02
	00 00		 mov	 rcx, QWORD PTR c$[r13]
  000bf	48 03 c8	 add	 rcx, rax
  000c2	48 8b c1	 mov	 rax, rcx
  000c5	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR c_vals1$[rbp]
  000cd	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 13   : }

  000d1	49 8d a5 70 02
	00 00		 lea	 rsp, QWORD PTR [r13+624]
  000d8	5f		 pop	 rdi
  000d9	5d		 pop	 rbp
  000da	41 5d		 pop	 r13
  000dc	c3		 ret	 0
?Unpack_with_itself@@YAXQEAUYmmVal@@PEBU1@@Z ENDP	; Unpack_with_itself
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch04_02_sol\Ch04_02\Ch04_02_fcpp.cpp
;	COMDAT ?PackI32_I16_Iavx2@@YAXPEAUYmmVal@@PEBU1@1@Z
_TEXT	SEGMENT
a_vals$ = 32
b_vals$ = 96
c_vals$ = 160
$T1 = 416
$T2 = 480
$T3 = 544
c$ = 656
a$ = 664
b$ = 672
?PackI32_I16_Iavx2@@YAXPEAUYmmVal@@PEBU1@1@Z PROC	; PackI32_I16_Iavx2, COMDAT

; 25   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	41 55		 push	 r13
  00011	55		 push	 rbp
  00012	57		 push	 rdi
  00013	48 81 ec 90 02
	00 00		 sub	 rsp, 656		; 00000290H
  0001a	4c 8d 6c 24 20	 lea	 r13, QWORD PTR [rsp+32]
  0001f	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00024	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CC351F00_Ch04_02_fcpp@cpp
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 26   : 	__m256i a_vals = _mm256_load_si256((__m256i*)a);

  00034	49 8b 85 98 02
	00 00		 mov	 rax, QWORD PTR a$[r13]
  0003b	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0003f	c5 fe 7f 85 a0
	01 00 00	 vmovdqu YMMWORD PTR $T1[rbp], ymm0
  00047	c5 fe 6f 85 a0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T1[rbp]
  0004f	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR a_vals$[rbp], ymm0

; 27   : 	__m256i b_vals = _mm256_load_si256((__m256i*)b);

  00054	49 8b 85 a0 02
	00 00		 mov	 rax, QWORD PTR b$[r13]
  0005b	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0005f	c5 fe 7f 85 e0
	01 00 00	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  00067	c5 fe 6f 85 e0
	01 00 00	 vmovdqu ymm0, YMMWORD PTR $T2[rbp]
  0006f	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR b_vals$[rbp], ymm0

; 28   : 	__m256i c_vals = _mm256_packs_epi32(a_vals, b_vals);

  00074	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR a_vals$[rbp]
  00079	c5 fd 6b 45 60	 vpackssdw ymm0, ymm0, YMMWORD PTR b_vals$[rbp]
  0007e	c5 fe 7f 85 20
	02 00 00	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  00086	c5 fe 6f 85 20
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T3[rbp]
  0008e	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR c_vals$[rbp], ymm0

; 29   : 	_mm256_store_si256((__m256i*)c, c_vals);

  00096	49 8b 85 90 02
	00 00		 mov	 rax, QWORD PTR c$[r13]
  0009d	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR c_vals$[rbp]
  000a5	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 30   : }

  000a9	49 8d a5 70 02
	00 00		 lea	 rsp, QWORD PTR [r13+624]
  000b0	5f		 pop	 rdi
  000b1	5d		 pop	 rbp
  000b2	41 5d		 pop	 r13
  000b4	c3		 ret	 0
?PackI32_I16_Iavx2@@YAXPEAUYmmVal@@PEBU1@1@Z ENDP	; PackI32_I16_Iavx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch04_02_sol\Ch04_02\Ch04_02_fcpp.cpp
;	COMDAT ?UnpackU32_U64_Iavx2@@YAXQEAUYmmVal@@PEBU1@1@Z
_TEXT	SEGMENT
a_vals$ = 32
b_vals$ = 96
c_vals0$ = 160
c_vals1$ = 224
$T1 = 672
$T2 = 736
$T3 = 800
$T4 = 864
c$ = 976
a$ = 984
b$ = 992
?UnpackU32_U64_Iavx2@@YAXQEAUYmmVal@@PEBU1@1@Z PROC	; UnpackU32_U64_Iavx2, COMDAT

; 16   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	41 55		 push	 r13
  00011	55		 push	 rbp
  00012	57		 push	 rdi
  00013	48 81 ec d0 03
	00 00		 sub	 rsp, 976		; 000003d0H
  0001a	4c 8d 6c 24 20	 lea	 r13, QWORD PTR [rsp+32]
  0001f	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00024	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CC351F00_Ch04_02_fcpp@cpp
  0002f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 17   : 	__m256i a_vals = _mm256_load_si256((__m256i*)a);

  00034	49 8b 85 d8 03
	00 00		 mov	 rax, QWORD PTR a$[r13]
  0003b	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0003f	c5 fe 7f 85 a0
	02 00 00	 vmovdqu YMMWORD PTR $T1[rbp], ymm0
  00047	c5 fe 6f 85 a0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T1[rbp]
  0004f	c5 fe 7f 45 20	 vmovdqu YMMWORD PTR a_vals$[rbp], ymm0

; 18   : 	__m256i b_vals = _mm256_load_si256((__m256i*)b);

  00054	49 8b 85 e0 03
	00 00		 mov	 rax, QWORD PTR b$[r13]
  0005b	c5 fe 6f 00	 vmovdqu ymm0, YMMWORD PTR [rax]
  0005f	c5 fe 7f 85 e0
	02 00 00	 vmovdqu YMMWORD PTR $T2[rbp], ymm0
  00067	c5 fe 6f 85 e0
	02 00 00	 vmovdqu ymm0, YMMWORD PTR $T2[rbp]
  0006f	c5 fe 7f 45 60	 vmovdqu YMMWORD PTR b_vals$[rbp], ymm0

; 19   : 	__m256i c_vals0 = _mm256_unpacklo_epi32(a_vals, b_vals);

  00074	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR a_vals$[rbp]
  00079	c5 fd 62 45 60	 vpunpckldq ymm0, ymm0, YMMWORD PTR b_vals$[rbp]
  0007e	c5 fe 7f 85 20
	03 00 00	 vmovdqu YMMWORD PTR $T3[rbp], ymm0
  00086	c5 fe 6f 85 20
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T3[rbp]
  0008e	c5 fe 7f 85 a0
	00 00 00	 vmovdqu YMMWORD PTR c_vals0$[rbp], ymm0

; 20   : 	__m256i c_vals1 = _mm256_unpackhi_epi32(a_vals, b_vals);

  00096	c5 fe 6f 45 20	 vmovdqu ymm0, YMMWORD PTR a_vals$[rbp]
  0009b	c5 fd 6a 45 60	 vpunpckhdq ymm0, ymm0, YMMWORD PTR b_vals$[rbp]
  000a0	c5 fe 7f 85 60
	03 00 00	 vmovdqu YMMWORD PTR $T4[rbp], ymm0
  000a8	c5 fe 6f 85 60
	03 00 00	 vmovdqu ymm0, YMMWORD PTR $T4[rbp]
  000b0	c5 fe 7f 85 e0
	00 00 00	 vmovdqu YMMWORD PTR c_vals1$[rbp], ymm0

; 21   : 	_mm256_store_si256((__m256i*) & c[0], c_vals0);

  000b8	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  000bd	48 6b c0 00	 imul	 rax, rax, 0
  000c1	49 8b 8d d0 03
	00 00		 mov	 rcx, QWORD PTR c$[r13]
  000c8	48 03 c8	 add	 rcx, rax
  000cb	48 8b c1	 mov	 rax, rcx
  000ce	c5 fe 6f 85 a0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR c_vals0$[rbp]
  000d6	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 22   : 	_mm256_store_si256((__m256i*) & c[1], c_vals1);

  000da	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  000df	48 6b c0 01	 imul	 rax, rax, 1
  000e3	49 8b 8d d0 03
	00 00		 mov	 rcx, QWORD PTR c$[r13]
  000ea	48 03 c8	 add	 rcx, rax
  000ed	48 8b c1	 mov	 rax, rcx
  000f0	c5 fe 6f 85 e0
	00 00 00	 vmovdqu ymm0, YMMWORD PTR c_vals1$[rbp]
  000f8	c5 fe 7f 00	 vmovdqu YMMWORD PTR [rax], ymm0

; 23   : }

  000fc	49 8d a5 b0 03
	00 00		 lea	 rsp, QWORD PTR [r13+944]
  00103	5f		 pop	 rdi
  00104	5d		 pop	 rbp
  00105	41 5d		 pop	 r13
  00107	c3		 ret	 0
?UnpackU32_U64_Iavx2@@YAXQEAUYmmVal@@PEBU1@1@Z ENDP	; UnpackU32_U64_Iavx2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = 200
tv93 = 264
tv85 = 264
this$ = 304
__formal$ = 312
_Lobj$ = 320
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT

; 173  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D96D2425_xloctime
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 174  :         _Cvt = _Lobj._Getcvt();

  0002a	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00031	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ
  0003e	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00045	48 8d 79 2c	 lea	 rdi, QWORD PTR [rcx+44]
  00049	48 8b f0	 mov	 rsi, rax
  0004c	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00051	f3 a4		 rep movsb

; 175  : 
; 176  :         if (is_same_v<_Elem2, wchar_t>) {

  00053	33 c0		 xor	 eax, eax
  00055	83 f8 01	 cmp	 eax, 1
  00058	74 5c		 je	 SHORT $LN2@Getvals

; 177  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ
  00067	48 8b c8	 mov	 rcx, rax
  0006a	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  0006f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 178  :             _Months =

  0007a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ
  00087	48 8b c8	 mov	 rcx, rax
  0008a	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  0008f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00096	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 179  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 180  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a1	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  000a6	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ad	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 181  :         } else {

  000b1	e9 a3 00 00 00	 jmp	 $LN3@Getvals
$LN2@Getvals:

; 182  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b6	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bd	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000c1	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  000c8	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ
  000d5	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv85[rbp]
  000dc	4c 8b c1	 mov	 r8, rcx
  000df	33 d2		 xor	 edx, edx
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000e9	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f0	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 183  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000f4	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fb	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000ff	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  00106	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ
  00113	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  0011a	4c 8b c1	 mov	 r8, rcx
  0011d	33 d2		 xor	 edx, edx
  0011f	48 8b c8	 mov	 rcx, rax
  00122	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00127	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012e	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 184  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00132	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00139	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0013d	4c 8b c0	 mov	 r8, rax
  00140	33 d2		 xor	 edx, edx
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  00149	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  0014e	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00155	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN3@Getvals:

; 185  :         }
; 186  :     }

  00159	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  00160	5f		 pop	 rdi
  00161	5e		 pop	 rsi
  00162	5d		 pop	 rbp
  00163	c3		 ret	 0
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = 200
tv93 = 264
tv85 = 264
this$ = 304
__formal$ = 312
_Lobj$ = 320
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT

; 173  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D96D2425_xloctime
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 174  :         _Cvt = _Lobj._Getcvt();

  0002a	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00031	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ
  0003e	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00045	48 8d 79 2c	 lea	 rdi, QWORD PTR [rcx+44]
  00049	48 8b f0	 mov	 rsi, rax
  0004c	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00051	f3 a4		 rep movsb

; 175  : 
; 176  :         if (is_same_v<_Elem2, wchar_t>) {

  00053	33 c0		 xor	 eax, eax
  00055	83 f8 01	 cmp	 eax, 1
  00058	74 5c		 je	 SHORT $LN2@Getvals

; 177  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ
  00067	48 8b c8	 mov	 rcx, rax
  0006a	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  0006f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 178  :             _Months =

  0007a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ
  00087	48 8b c8	 mov	 rcx, rax
  0008a	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  0008f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00096	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 179  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 180  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a1	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  000a6	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ad	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 181  :         } else {

  000b1	e9 a3 00 00 00	 jmp	 $LN3@Getvals
$LN2@Getvals:

; 182  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b6	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bd	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000c1	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  000c8	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ
  000d5	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv85[rbp]
  000dc	4c 8b c1	 mov	 r8, rcx
  000df	33 d2		 xor	 edx, edx
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000e9	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f0	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 183  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000f4	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fb	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000ff	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  00106	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ
  00113	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  0011a	4c 8b c1	 mov	 r8, rcx
  0011d	33 d2		 xor	 edx, edx
  0011f	48 8b c8	 mov	 rcx, rax
  00122	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00127	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012e	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 184  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00132	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00139	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0013d	4c 8b c0	 mov	 r8, rax
  00140	33 d2		 xor	 edx, edx
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  00149	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  0014e	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00155	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN3@Getvals:

; 185  :         }
; 186  :     }

  00159	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  00160	5f		 pop	 rdi
  00161	5e		 pop	 rsi
  00162	5d		 pop	 rbp
  00163	c3		 ret	 0
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z
_TEXT	SEGMENT
_Count$ = 8
_Ptrdest$ = 40
_Ptrnext$1 = 72
_Ptr$ = 320
__formal$ = 328
__formal$ = 336
??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 522  : _Elem* __CRTDECL _Maklocstr(const char* _Ptr, _Elem*, const _Locinfo::_Cvtvec&) {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D23FE460_xlocale
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 523  :     // convert C string to _Elem sequence using _Cvtvec
; 524  :     size_t _Count = _CSTD strlen(_Ptr) + 1;

  00029	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00030	e8 00 00 00 00	 call	 strlen
  00035	48 ff c0	 inc	 rax
  00038	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax

; 525  : 
; 526  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  0003c	c7 44 24 20 0e
	02 00 00	 mov	 DWORD PTR [rsp+32], 526	; 0000020eH
  00044	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0004b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00051	ba 01 00 00 00	 mov	 edx, 1
  00056	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__calloc_dbg
  00060	48 89 45 28	 mov	 QWORD PTR _Ptrdest$[rbp], rax

; 527  : 
; 528  :     if (!_Ptrdest) {

  00064	48 83 7d 28 00	 cmp	 QWORD PTR _Ptrdest$[rbp], 0
  00069	75 05		 jne	 SHORT $LN5@Maklocstr

; 529  :         _Xbad_alloc();

  0006b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 530  :     }
; 531  : 
; 532  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

  00070	48 8b 45 28	 mov	 rax, QWORD PTR _Ptrdest$[rbp]
  00074	48 89 45 48	 mov	 QWORD PTR _Ptrnext$1[rbp], rax
  00078	eb 27		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0007a	48 8b 45 08	 mov	 rax, QWORD PTR _Count$[rbp]
  0007e	48 ff c8	 dec	 rax
  00081	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  00085	48 8b 45 48	 mov	 rax, QWORD PTR _Ptrnext$1[rbp]
  00089	48 ff c0	 inc	 rax
  0008c	48 89 45 48	 mov	 QWORD PTR _Ptrnext$1[rbp], rax
  00090	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00097	48 ff c0	 inc	 rax
  0009a	48 89 85 40 01
	00 00		 mov	 QWORD PTR _Ptr$[rbp], rax
$LN4@Maklocstr:
  000a1	48 83 7d 08 00	 cmp	 QWORD PTR _Count$[rbp], 0
  000a6	76 12		 jbe	 SHORT $LN3@Maklocstr

; 533  :         *_Ptrnext = static_cast<_Elem>(static_cast<unsigned char>(*_Ptr));

  000a8	48 8b 45 48	 mov	 rax, QWORD PTR _Ptrnext$1[rbp]
  000ac	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000b3	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  000b6	88 08		 mov	 BYTE PTR [rax], cl

; 534  :     }

  000b8	eb c0		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 535  : 
; 536  :     return _Ptrdest;

  000ba	48 8b 45 28	 mov	 rax, QWORD PTR _Ptrdest$[rbp]
$LN6@Maklocstr:

; 537  : }

  000be	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000c5	5f		 pop	 rdi
  000c6	5d		 pop	 rbp
  000c7	c3		 ret	 0
??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
_TEXT	SEGMENT
_Count$ = 8
_Ptrdest$ = 40
_Ptr$ = 288
?_Maklocwcs@std@@YAPEA_WPEB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 90   : inline wchar_t* _Maklocwcs(const wchar_t* _Ptr) { // copy NTWCS to allocated storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4CB88277_xlocnum
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 91   :     const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  0001f	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcslen
  0002c	48 ff c0	 inc	 rax
  0002f	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax

; 92   : 
; 93   :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Count, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  00033	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA
  00039	83 c0 03	 add	 eax, 3
  0003c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00040	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00047	41 b8 02 00 00
	00		 mov	 r8d, 2
  0004d	ba 02 00 00 00	 mov	 edx, 2
  00052	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__calloc_dbg
  0005c	48 89 45 28	 mov	 QWORD PTR _Ptrdest$[rbp], rax

; 94   : 
; 95   :     if (!_Ptrdest) {

  00060	48 83 7d 28 00	 cmp	 QWORD PTR _Ptrdest$[rbp], 0
  00065	75 05		 jne	 SHORT $LN2@Maklocwcs

; 96   :         _Xbad_alloc();

  00067	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:

; 97   :     }
; 98   : 
; 99   :     _CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  0006c	4c 8b 45 08	 mov	 r8, QWORD PTR _Count$[rbp]
  00070	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00077	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptrdest$[rbp]
  0007b	e8 00 00 00 00	 call	 wmemcpy

; 100  :     return _Ptrdest;

  00080	48 8b 45 28	 mov	 rax, QWORD PTR _Ptrdest$[rbp]
$LN3@Maklocwcs:

; 101  : }

  00084	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
?_Maklocwcs@std@@YAPEA_WPEB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z
_TEXT	SEGMENT
_Count$ = 8
_Count1$ = 40
_Wchars$ = 72
_Ptr1$ = 104
_Bytes$ = 132
_Wc$ = 164
_Mbst1$ = 200
_Ptrdest$ = 232
_Ptrnext$ = 264
_Mbst2$ = 296
__$ArrayPad$ = 504
_Ptr$ = 544
__formal$ = 552
_Cvt$ = 560
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z PROC ; std::_Maklocstr<wchar_t>, COMDAT

; 540  : inline wchar_t* __CRTDECL _Maklocstr(const char* _Ptr, wchar_t*, const _Locinfo::_Cvtvec& _Cvt) {

$LN12:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00022	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR [rsp+600]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 f8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D23FE460_xlocale
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 541  :     // convert C string to wchar_t sequence using _Cvtvec
; 542  :     size_t _Count;
; 543  :     size_t _Count1;
; 544  :     size_t _Wchars;
; 545  :     const char* _Ptr1;
; 546  :     int _Bytes;
; 547  :     wchar_t _Wc;
; 548  :     mbstate_t _Mbst1 = {};

  00053	48 8d 85 c8 00
	00 00		 lea	 rax, QWORD PTR _Mbst1$[rbp]
  0005a	48 8b f8	 mov	 rdi, rax
  0005d	33 c0		 xor	 eax, eax
  0005f	b9 08 00 00 00	 mov	 ecx, 8
  00064	f3 aa		 rep stosb

; 549  : 
; 550  :     _Count1 = _CSTD strlen(_Ptr) + 1;

  00066	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0006d	e8 00 00 00 00	 call	 strlen
  00072	48 ff c0	 inc	 rax
  00075	48 89 45 28	 mov	 QWORD PTR _Count1$[rbp], rax

; 551  :     for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count; _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars) {

  00079	48 8b 45 28	 mov	 rax, QWORD PTR _Count1$[rbp]
  0007d	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  00081	48 c7 45 48 00
	00 00 00	 mov	 QWORD PTR _Wchars$[rbp], 0
  00089	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00090	48 89 45 68	 mov	 QWORD PTR _Ptr1$[rbp], rax
  00094	eb 35		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  00096	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  0009d	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  000a1	48 2b c8	 sub	 rcx, rax
  000a4	48 8b c1	 mov	 rax, rcx
  000a7	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  000ab	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  000b2	48 8b 4d 68	 mov	 rcx, QWORD PTR _Ptr1$[rbp]
  000b6	48 03 c8	 add	 rcx, rax
  000b9	48 8b c1	 mov	 rax, rcx
  000bc	48 89 45 68	 mov	 QWORD PTR _Ptr1$[rbp], rax
  000c0	48 8b 45 48	 mov	 rax, QWORD PTR _Wchars$[rbp]
  000c4	48 ff c0	 inc	 rax
  000c7	48 89 45 48	 mov	 QWORD PTR _Wchars$[rbp], rax
$LN4@Maklocstr:
  000cb	48 83 7d 08 00	 cmp	 QWORD PTR _Count$[rbp], 0
  000d0	76 3a		 jbe	 SHORT $LN3@Maklocstr

; 552  :         if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) {

  000d2	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Cvt$[rbp]
  000d9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000de	4c 8d 8d c8 00
	00 00		 lea	 r9, QWORD PTR _Mbst1$[rbp]
  000e5	4c 8b 45 08	 mov	 r8, QWORD PTR _Count$[rbp]
  000e9	48 8b 55 68	 mov	 rdx, QWORD PTR _Ptr1$[rbp]
  000ed	48 8d 8d a4 00
	00 00		 lea	 rcx, QWORD PTR _Wc$[rbp]
  000f4	e8 00 00 00 00	 call	 _Mbrtowc
  000f9	89 85 84 00 00
	00		 mov	 DWORD PTR _Bytes$[rbp], eax
  000ff	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR _Bytes$[rbp], 0
  00106	7f 02		 jg	 SHORT $LN8@Maklocstr

; 553  :             break;

  00108	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 554  :         }
; 555  :     }

  0010a	eb 8a		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 556  : 
; 557  :     ++_Wchars; // count terminating nul

  0010c	48 8b 45 48	 mov	 rax, QWORD PTR _Wchars$[rbp]
  00110	48 ff c0	 inc	 rax
  00113	48 89 45 48	 mov	 QWORD PTR _Wchars$[rbp], rax

; 558  : 
; 559  :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Wchars, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  00117	c7 44 24 20 2f
	02 00 00	 mov	 DWORD PTR [rsp+32], 559	; 0000022fH
  0011f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00126	41 b8 02 00 00
	00		 mov	 r8d, 2
  0012c	ba 02 00 00 00	 mov	 edx, 2
  00131	48 8b 4d 48	 mov	 rcx, QWORD PTR _Wchars$[rbp]
  00135	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__calloc_dbg
  0013b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Ptrdest$[rbp], rax

; 560  : 
; 561  :     if (!_Ptrdest) {

  00142	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR _Ptrdest$[rbp], 0
  0014a	75 05		 jne	 SHORT $LN9@Maklocstr

; 562  :         _Xbad_alloc();

  0014c	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 563  :     }
; 564  : 
; 565  :     wchar_t* _Ptrnext = _Ptrdest;

  00151	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Ptrdest$[rbp]
  00158	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Ptrnext$[rbp], rax

; 566  :     mbstate_t _Mbst2  = {};

  0015f	48 8d 85 28 01
	00 00		 lea	 rax, QWORD PTR _Mbst2$[rbp]
  00166	48 8b f8	 mov	 rdi, rax
  00169	33 c0		 xor	 eax, eax
  0016b	b9 08 00 00 00	 mov	 ecx, 8
  00170	f3 aa		 rep stosb

; 567  : 
; 568  :     for (; 0 < _Wchars; _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext) {

  00172	eb 4d		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:
  00174	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  0017b	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  0017f	48 2b c8	 sub	 rcx, rax
  00182	48 8b c1	 mov	 rax, rcx
  00185	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  00189	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  00190	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00197	48 03 c8	 add	 rcx, rax
  0019a	48 8b c1	 mov	 rax, rcx
  0019d	48 89 85 20 02
	00 00		 mov	 QWORD PTR _Ptr$[rbp], rax
  001a4	48 8b 45 48	 mov	 rax, QWORD PTR _Wchars$[rbp]
  001a8	48 ff c8	 dec	 rax
  001ab	48 89 45 48	 mov	 QWORD PTR _Wchars$[rbp], rax
  001af	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ptrnext$[rbp]
  001b6	48 83 c0 02	 add	 rax, 2
  001ba	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Ptrnext$[rbp], rax
$LN7@Maklocstr:
  001c1	48 83 7d 48 00	 cmp	 QWORD PTR _Wchars$[rbp], 0
  001c6	76 40		 jbe	 SHORT $LN6@Maklocstr

; 569  :         if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) {

  001c8	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Cvt$[rbp]
  001cf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d4	4c 8d 8d 28 01
	00 00		 lea	 r9, QWORD PTR _Mbst2$[rbp]
  001db	4c 8b 45 28	 mov	 r8, QWORD PTR _Count1$[rbp]
  001df	48 8b 95 20 02
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  001e6	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ptrnext$[rbp]
  001ed	e8 00 00 00 00	 call	 _Mbrtowc
  001f2	89 85 84 00 00
	00		 mov	 DWORD PTR _Bytes$[rbp], eax
  001f8	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR _Bytes$[rbp], 0
  001ff	7f 02		 jg	 SHORT $LN10@Maklocstr

; 570  :             break;

  00201	eb 05		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 571  :         }
; 572  :     }

  00203	e9 6c ff ff ff	 jmp	 $LN5@Maklocstr
$LN6@Maklocstr:

; 573  : 
; 574  :     *_Ptrnext = L'\0';

  00208	33 c0		 xor	 eax, eax
  0020a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ptrnext$[rbp]
  00211	66 89 01	 mov	 WORD PTR [rcx], ax

; 575  : 
; 576  :     return _Ptrdest;

  00214	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Ptrdest$[rbp]
$LN11@Maklocstr:

; 577  : }

  0021b	48 8b f8	 mov	 rdi, rax
  0021e	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00222	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcFrameData
  00229	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0022e	48 8b c7	 mov	 rax, rdi
  00231	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00238	48 33 cd	 xor	 rcx, rbp
  0023b	e8 00 00 00 00	 call	 __security_check_cookie
  00240	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00247	5f		 pop	 rdi
  00248	5d		 pop	 rbp
  00249	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ENDP ; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h
;	COMDAT wmemcpy
_TEXT	SEGMENT
_S1$ = 224
_S2$ = 232
_N$ = 240
wmemcpy	PROC						; COMDAT

; 234  :     {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__93DC0B45_wchar@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 235  :         #pragma warning(suppress: 6386) // Buffer overrun
; 236  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00029	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _N$[rbp]
  00030	48 d1 e0	 shl	 rax, 1
  00033	4c 8b c0	 mov	 r8, rax
  00036	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _S2$[rbp]
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _S1$[rbp]
  00044	e8 00 00 00 00	 call	 memcpy

; 237  :     }

  00049	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
wmemcpy	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch04_02_sol\Ch04_02\Ch04_02_fcpp.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CC351F00_Ch04_02_fcpp@cpp
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\DSP Project\Ch04_02_sol\Ch04_02\Ch04_02_fcpp.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__CC351F00_Ch04_02_fcpp@cpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
