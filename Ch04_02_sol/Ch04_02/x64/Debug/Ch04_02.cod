; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30143.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__97D3638F_vcruntime_new@h DB 01H
__741AE07E_corecrt_math@h DB 01H
__B49664B7_stdlib@h DB 01H
__244AF085_cstdlib DB 01H
__60BC708E_cmath DB 01H
__A2143F22_corecrt_stdio_config@h DB 01H
__829E1958_corecrt_wstdio@h DB 01H
__6DFAE8B8_stdio@h DB 01H
__1FEB9909_corecrt_memcpy_s@h DB 01H
__A751F051_corecrt_memory@h DB 01H
__9200769A_corecrt_wstring@h DB 01H
__32E5F013_string@h DB 01H
__C6E16F6F_corecrt_wconio@h DB 01H
__6D390390_corecrt_wio@h DB 01H
__1157D6BA_corecrt_wtime@h DB 01H
__1DC1E279_stat@h DB 01H
__93DC0B45_wchar@h DB 01H
__589FA321_type_traits DB 01H
__12269DE6_xutility DB 01H
__20BB4341_malloc@h DB 01H
__B0A13A33_vcruntime_exception@h DB 01H
__FF458F76_exception DB 01H
__7FE5F402_limits DB 01H
__79D216CD_xmemory DB 01H
__0D019051_xstring DB 01H
__760BB52B_stdexcept DB 01H
__A4685E82_xcall_once@h DB 01H
__A0B61CF9_time@h DB 01H
__DDB379A0_xthreads@h DB 01H
__14D0A8C0_atomic DB 01H
__1B354CA2_system_error DB 01H
__65ADBEC9_vcruntime_typeinfo@h DB 01H
__62F96EFF_typeinfo DB 01H
__C34BF88C_memory DB 01H
__EF0EAF83_xfacet DB 01H
__B2D2BA86_ctype@h DB 01H
__7D708D37_xlocinfo DB 01H
__D23FE460_xlocale DB 01H
__4495FA24_xiosbase DB 01H
__4CB88277_xlocnum DB 01H
__845859A3_ios DB 01H
__B7987E10_string DB 01H
__67DA974F_xlocmon DB 01H
__D96D2425_xloctime DB 01H
__107F9394_YmmVal@h DB 01H
__76BBE5F6_Ch04_02@cpp DB 01H
__6151C81E_sstream DB 01H
__A2FF0B9E_istream DB 01H
__C12F3EA4_ostream DB 01H
__74AB0D97_streambuf DB 01H
__038A2AA6_iterator DB 01H
__B30C2184_iosfwd DB 01H
__1347750E_utility DB 01H
__E458E21C_xstddef DB 01H
__F54903A0_xatomic@h DB 01H
__5E3DCDCC_iomanip DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPEAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPEAX_K@Z		; __empty_global_delete
PUBLIC	??2@YAPEAX_KPEAX@Z				; operator new
PUBLIC	wmemcpy
PUBLIC	??0exception@std@@QEAA@QEBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QEAA@AEBV01@@Z		; std::exception::exception
PUBLIC	??1exception@std@@UEAA@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UEBAPEBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UEAAPEAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AEAA@QEBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UEAA@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QEAA@AEBV01@@Z		; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UEAAPEAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QEAA@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UEAA@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QEAA@AEBV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UEAAPEAXI@Z	; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?max@?$numeric_limits@_J@std@@SA_JXZ		; std::numeric_limits<__int64>::max
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QEAA@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QEAAXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Swap_proxy_and_iterators@_Container_base12@std@@QEAAXAEAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AEAAXAEAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AEAAXAEAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_locked
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IEAA@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z	; std::_Char_traits<char,int>::copy
PUBLIC	?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z	; std::_Char_traits<char,int>::move
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?eq@?$_Narrow_char_traits@DH@std@@SA_NAEBD0@Z	; std::_Narrow_char_traits<char,int>::eq
PUBLIC	?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
PUBLIC	?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z ; std::_Narrow_char_traits<char,int>::not_eof
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@D@std@@QEAA@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QEAAPEAD_K@Z	; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
PUBLIC	?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
PUBLIC	?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
PUBLIC	??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ		; std::fpos<_Mbstatet>::operator __int64
PUBLIC	?_Maklocwcs@std@@YAPEA_WPEB_W@Z			; std::_Maklocwcs
PUBLIC	??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
PUBLIC	?hex@std@@YAAEAVios_base@1@AEAV21@@Z		; std::hex
PUBLIC	?uppercase@std@@YAAEAVios_base@1@AEAV21@@Z	; std::uppercase
PUBLIC	??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
PUBLIC	??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
PUBLIC	?ToStringI16@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringI16
PUBLIC	?ToStringI32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringI32
PUBLIC	?ToStringX32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringX32
PUBLIC	?ToStringX64@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringX64
PUBLIC	??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Get_buffer_view
PUBLIC	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
PUBLIC	?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
PUBLIC	?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
PUBLIC	?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
PUBLIC	?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
PUBLIC	?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
PUBLIC	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
PUBLIC	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
PUBLIC	??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2
PUBLIC	??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
PUBLIC	??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
PUBLIC	??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$setfill@D@std@@YA?AU?$_Fillobj@D@0@D@Z	; std::setfill<char>
PUBLIC	??0?$_Fillobj@D@std@@QEAA@D@Z			; std::_Fillobj<char>::_Fillobj<char>
PUBLIC	??$?6DU?$char_traits@D@std@@D@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Fillobj@D@0@@Z ; std::operator<<<char,std::char_traits<char>,char>
PUBLIC	??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z ; YmmVal::ToStringInt<short>
PUBLIC	??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z ; YmmVal::ToStringInt<int>
PUBLIC	??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z ; YmmVal::ToStringHex<unsigned int>
PUBLIC	??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z ; YmmVal::ToStringHex<unsigned __int64>
PUBLIC	main
PUBLIC	??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z		; std::max<char *>
PUBLIC	??$_Unfancy@D@std@@YAPEADPEAD@Z			; std::_Unfancy<char>
PUBLIC	?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z ; std::pointer_traits<char *>::pointer_to
PUBLIC	??$min@_K@std@@YAAEB_KAEB_K0@Z			; std::min<unsigned __int64>
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@D@std@@YAPEADAEAD@Z		; std::addressof<char>
PUBLIC	??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z ; <lambda_138c3d7c38c85abb84c7fc7bfe5747b7>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>
PUBLIC	??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
PUBLIC	??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z ; std::_Construct_in_place<char *,char * &>
PUBLIC	??$max@_K@std@@YAAEB_KAEB_K0@Z			; std::max<unsigned __int64>
PUBLIC	??$_Get_size_of_n@$00@std@@YA_K_K@Z		; std::_Get_size_of_n<1>
PUBLIC	??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>
PUBLIC	??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z	; std::_Deallocate<16,0>
PUBLIC	??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z		; std::_Get_size_of_n<16>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEBV?$_String_val@U?$_Simple_types@D@std@@@0@AEBV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
PUBLIC	??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z	; std::addressof<char *>
PUBLIC	??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z	; std::_Voidify_iter<char * *>
PUBLIC	??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z	; std::forward<char * const &>
PUBLIC	??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z	; std::forward<char * &>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::addressof<std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$forward@AEBV?$allocator@D@std@@@std@@YAAEBV?$allocator@D@0@AEBV10@@Z ; std::forward<std::allocator<char> const &>
PUBLIC	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
PUBLIC	__JustMyCode_Default
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	_TI3?AVbad_array_new_length@std@@
PUBLIC	_CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
PUBLIC	?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ ; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA ; `std::_Maklocwcs'::`1'::__LINE__Var
PUBLIC	??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ ; `string'
PUBLIC	??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
PUBLIC	??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
PUBLIC	??_C@_0CC@LIOLKKFF@?6Results?5for?5UnpackU32_U64_Iavx@ ; `string'
PUBLIC	??_C@_05OLKLENKD@a?5lo?5@			; `string'
PUBLIC	??_C@_05GNDPDPAN@b?5lo?5@			; `string'
PUBLIC	??_C@_05GAEEKGEG@a?5hi?5@			; `string'
PUBLIC	??_C@_05OGNANEOI@b?5hi?5@			; `string'
PUBLIC	??_C@_0O@BKOJOPKH@c?$FL0?$FN?5lo?5qword@	; `string'
PUBLIC	??_C@_0O@IBGKLHCM@c?$FL0?$FN?5hi?5qword@	; `string'
PUBLIC	??_C@_0O@IBEMKDMI@c?$FL1?$FN?5lo?5qword@	; `string'
PUBLIC	??_C@_0O@BKMPPLED@c?$FL1?$FN?5hi?5qword@	; `string'
PUBLIC	??_C@_0CA@MGNGEGIN@?6Results?5for?5PackI32_I16_Iavx2?6@ ; `string'
PUBLIC	??_C@_05KGGDOMKI@c?5lo?5@			; `string'
PUBLIC	??_C@_05CNIMAHEN@c?5hi?5@			; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
PUBLIC	??_C@_04ODOJPIMC@?5?5?5?$HM@			; `string'
PUBLIC	??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ ; `string'
PUBLIC	??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
PUBLIC	??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
PUBLIC	??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8	; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVios_base@std@@@8			; std::ios_base `RTTI Type Descriptor'
PUBLIC	??_R3ios_base@std@@8				; std::ios_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ios_base@std@@8				; std::ios_base::`RTTI Base Class Array'
PUBLIC	??_R17?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AV?$_Iosb@H@std@@@8			; std::_Iosb<int> `RTTI Type Descriptor'
PUBLIC	??_R3?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$_Iosb@H@std@@8				; std::_Iosb<int>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@A@3EA@ios_base@std@@8			; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
PUBLIC	??_R17A@3EA@?$_Iosb@H@std@@8			; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	??2@YAPEAX_K@Z:PROC				; operator new
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	atexit:PROC
EXTRN	__imp__invalid_parameter:PROC
EXTRN	__imp__calloc_dbg:PROC
EXTRN	__imp__CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QEAA@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QEAA@XZ:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	__imp_wcslen:PROC
EXTRN	strlen:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPEBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPEBD@Z:PROC		; std::_Xout_of_range
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	__std_exception_copy:PROC
EXTRN	__std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UEAAPEAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UEAAPEAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UEAAPEAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	_Mbrtowc:PROC
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?setf@ios_base@std@@QEAAHH@Z:PROC
EXTRN	__imp_?setf@ios_base@std@@QEAAHHH@Z:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ:PROC
EXTRN	__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z:PROC
EXTRN	__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z:PROC
EXTRN	__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ:PROC
EXTRN	__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD0@Z:PROC
EXTRN	__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z:PROC
EXTRN	__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ:PROC
EXTRN	__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAADD@Z:PROC
EXTRN	__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ:PROC
EXTRN	__imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:PROC
EXTRN	__imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_J@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_K@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z:PROC	; std::setw
EXTRN	??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z:PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z:PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
EXTRN	?UnpackU32_U64_Iavx2@@YAXQEAUYmmVal@@PEBU1@1@Z:PROC ; UnpackU32_U64_Iavx2
EXTRN	?PackI32_I16_Iavx2@@YAXPEAUYmmVal@@PEBU1@1@Z:PROC ; PackI32_I16_Iavx2
EXTRN	?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Lock
EXTRN	?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::_Unlock
EXTRN	?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::imbue
EXTRN	?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAPEAV12@PEAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::setbuf
EXTRN	?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::showmanyc
EXTRN	?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::sync
EXTRN	?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ:PROC ; std::basic_streambuf<char,std::char_traits<char> >::uflow
EXTRN	?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsgetn
EXTRN	?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z:PROC ; std::basic_streambuf<char,std::char_traits<char> >::xsputn
EXTRN	_CxxThrowException:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	??_7type_info@@6B@:BYTE				; type_info::`vftable'
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
?c_Line@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B DB 028H DUP (?) ; c_Line
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__empty_global_delete@@YAXPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$?__empty_global_delete@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??2@YAPEAX_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wmemcpy DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$wmemcpy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@QEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$??0exception@std@@QEAA@QEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0exception@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$??0exception@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1exception@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??1exception@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?what@exception@std@@UEBAPEBDXZ DD imagerel $LN5
	DD	imagerel $LN5+96
	DD	imagerel $unwind$?what@exception@std@@UEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gexception@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gexception@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@AEAA@QEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$??0bad_alloc@std@@AEAA@QEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_alloc@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??1bad_alloc@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_alloc@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_alloc@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1bad_array_new_length@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??1bad_array_new_length@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Throw_bad_array_new_length@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?_Throw_bad_array_new_length@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max@?$numeric_limits@_J@std@@SA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$?max@?$numeric_limits@_J@std@@SA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD imagerel $LN21
	DD	imagerel $LN21+453
	DD	imagerel $unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Container_base12@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0_Container_base12@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Swap_proxy_and_iterators@_Container_base12@std@@QEAAXAEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?_Swap_proxy_and_iterators@_Container_base12@std@@QEAAXAEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+138
	DD	imagerel $unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AEAAXAEAU12@@Z DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AEAAXAEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+151
	DD	imagerel $unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AEAAXAEAU12@@Z DD imagerel $LN3
	DD	imagerel $LN3+163
	DD	imagerel $unwind$?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AEAAXAEAU12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq@?$_Narrow_char_traits@DH@std@@SA_NAEBD0@Z DD imagerel $LN5
	DD	imagerel $LN5+99
	DD	imagerel $unwind$?eq@?$_Narrow_char_traits@DH@std@@SA_NAEBD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD imagerel $LN5
	DD	imagerel $LN5+95
	DD	imagerel $unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z DD imagerel $LN7
	DD	imagerel $LN7+123
	DD	imagerel $unwind$?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xlen_string@std@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_Xlen_string@std@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$allocator@D@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??0?$allocator@D@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD imagerel $LN4
	DD	imagerel $LN4+99
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD imagerel $LN4
	DD	imagerel $LN4+99
	DD	imagerel $unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+293
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA DD imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA
	DD	imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA+36
	DD	imagerel $unwind$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DD imagerel $LN5
	DD	imagerel $LN5+275
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA DD imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA
	DD	imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA+36
	DD	imagerel $unwind$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z DD imagerel $LN7
	DD	imagerel $LN7+332
	DD	imagerel $unwind$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+214
	DD	imagerel $unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD imagerel $LN4
	DD	imagerel $LN4+232
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z DD imagerel $LN4
	DD	imagerel $LN4+234
	DD	imagerel $unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+226
	DD	imagerel $unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+145
	DD	imagerel $unwind$?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z DD imagerel $LN5
	DD	imagerel $LN5+271
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+232
	DD	imagerel $unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z DD imagerel $LN12
	DD	imagerel $LN12+586
	DD	imagerel $unwind$??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Maklocwcs@std@@YAPEA_WPEB_W@Z DD imagerel $LN4
	DD	imagerel $LN4+142
	DD	imagerel $unwind$?_Maklocwcs@std@@YAPEA_WPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z DD imagerel $LN7
	DD	imagerel $LN7+200
	DD	imagerel $unwind$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?hex@std@@YAAEAVios_base@1@AEAV21@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?hex@std@@YAAEAVios_base@1@AEAV21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?uppercase@std@@YAAEAVios_base@1@AEAV21@@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?uppercase@std@@YAAEAVios_base@1@AEAV21@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+356
	DD	imagerel $unwind$??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD imagerel $LN5
	DD	imagerel $LN5+356
	DD	imagerel $unwind$??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ToStringI16@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD imagerel $LN5
	DD	imagerel $LN5+136
	DD	imagerel $unwind$?ToStringI16@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ToStringI32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD imagerel $LN5
	DD	imagerel $LN5+136
	DD	imagerel $unwind$?ToStringI32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ToStringX32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD imagerel $LN5
	DD	imagerel $LN5+136
	DD	imagerel $unwind$?ToStringX32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ToStringX64@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD imagerel $LN5
	DD	imagerel $LN5+136
	DD	imagerel $unwind$?ToStringX64@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+270
	DD	imagerel $unwind$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA+67
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA+44
	DD	imagerel $unwind$?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+178
	DD	imagerel $unwind$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN5
	DD	imagerel $LN5+104
	DD	imagerel $unwind$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD imagerel $LN4
	DD	imagerel $LN4+139
	DD	imagerel $unwind$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA DD imagerel ?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
	DD	imagerel ?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA+40
	DD	imagerel $unwind$?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ DD imagerel $LN7
	DD	imagerel $LN7+420
	DD	imagerel $unwind$?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD imagerel $LN7
	DD	imagerel $LN7+246
	DD	imagerel $unwind$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA DD imagerel ?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA
	DD	imagerel ?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD imagerel $LN16
	DD	imagerel $LN16+762
	DD	imagerel $unwind$?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD imagerel $LN6
	DD	imagerel $LN6+319
	DD	imagerel $unwind$?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ DD imagerel $LN8
	DD	imagerel $LN8+384
	DD	imagerel $unwind$?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD imagerel $LN25
	DD	imagerel $LN25+775
	DD	imagerel $unwind$?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD imagerel $LN12
	DD	imagerel $LN12+512
	DD	imagerel $unwind$?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+282
	DD	imagerel $unwind$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+138
	DD	imagerel $unwind$?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN25
	DD	imagerel $LN25+1036
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+80
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$setfill@D@std@@YA?AU?$_Fillobj@D@0@D@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??$setfill@D@std@@YA?AU?$_Fillobj@D@0@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Fillobj@D@std@@QEAA@D@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$??0?$_Fillobj@D@std@@QEAA@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6DU?$char_traits@D@std@@D@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Fillobj@D@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+99
	DD	imagerel $unwind$??$?6DU?$char_traits@D@std@@D@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Fillobj@D@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z DD imagerel $LN12
	DD	imagerel $LN12+490
	DD	imagerel $unwind$??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z@4HA DD imagerel ?dtor$0@?0???$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z@4HA
	DD	imagerel ?dtor$0@?0???$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z DD imagerel $LN12
	DD	imagerel $LN12+489
	DD	imagerel $unwind$??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z@4HA DD imagerel ?dtor$0@?0???$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z@4HA
	DD	imagerel ?dtor$0@?0???$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z DD imagerel $LN15
	DD	imagerel $LN15+747
	DD	imagerel $unwind$??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA DD imagerel ?dtor$0@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA
	DD	imagerel ?dtor$0@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA DD imagerel ?dtor$1@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA
	DD	imagerel ?dtor$1@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA+39
	DD	imagerel $unwind$?dtor$1@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA DD imagerel ?dtor$2@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA
	DD	imagerel ?dtor$2@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA+39
	DD	imagerel $unwind$?dtor$2@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA DD imagerel ?dtor$3@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA
	DD	imagerel ?dtor$3@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA+39
	DD	imagerel $unwind$?dtor$3@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z DD imagerel $LN15
	DD	imagerel $LN15+742
	DD	imagerel $unwind$??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA DD imagerel ?dtor$0@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA
	DD	imagerel ?dtor$0@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA DD imagerel ?dtor$1@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA
	DD	imagerel ?dtor$1@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA+39
	DD	imagerel $unwind$?dtor$1@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA DD imagerel ?dtor$2@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA
	DD	imagerel ?dtor$2@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA+39
	DD	imagerel $unwind$?dtor$2@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA DD imagerel ?dtor$3@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA
	DD	imagerel ?dtor$3@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA+39
	DD	imagerel $unwind$?dtor$3@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?UnpackU32_U64@@YAXXZ DD imagerel ?UnpackU32_U64@@YAXXZ
	DD	imagerel ?UnpackU32_U64@@YAXXZ+1349
	DD	imagerel $unwind$?UnpackU32_U64@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??UnpackU32_U64@@YAXXZ@4HA DD imagerel ?dtor$0@?0??UnpackU32_U64@@YAXXZ@4HA
	DD	imagerel ?dtor$0@?0??UnpackU32_U64@@YAXXZ@4HA+51
	DD	imagerel $unwind$?dtor$0@?0??UnpackU32_U64@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??UnpackU32_U64@@YAXXZ@4HA DD imagerel ?dtor$1@?0??UnpackU32_U64@@YAXXZ@4HA
	DD	imagerel ?dtor$1@?0??UnpackU32_U64@@YAXXZ@4HA+51
	DD	imagerel $unwind$?dtor$1@?0??UnpackU32_U64@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??UnpackU32_U64@@YAXXZ@4HA DD imagerel ?dtor$2@?0??UnpackU32_U64@@YAXXZ@4HA
	DD	imagerel ?dtor$2@?0??UnpackU32_U64@@YAXXZ@4HA+51
	DD	imagerel $unwind$?dtor$2@?0??UnpackU32_U64@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??UnpackU32_U64@@YAXXZ@4HA DD imagerel ?dtor$3@?0??UnpackU32_U64@@YAXXZ@4HA
	DD	imagerel ?dtor$3@?0??UnpackU32_U64@@YAXXZ@4HA+51
	DD	imagerel $unwind$?dtor$3@?0??UnpackU32_U64@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0??UnpackU32_U64@@YAXXZ@4HA DD imagerel ?dtor$4@?0??UnpackU32_U64@@YAXXZ@4HA
	DD	imagerel ?dtor$4@?0??UnpackU32_U64@@YAXXZ@4HA+51
	DD	imagerel $unwind$?dtor$4@?0??UnpackU32_U64@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$5@?0??UnpackU32_U64@@YAXXZ@4HA DD imagerel ?dtor$5@?0??UnpackU32_U64@@YAXXZ@4HA
	DD	imagerel ?dtor$5@?0??UnpackU32_U64@@YAXXZ@4HA+51
	DD	imagerel $unwind$?dtor$5@?0??UnpackU32_U64@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$6@?0??UnpackU32_U64@@YAXXZ@4HA DD imagerel ?dtor$6@?0??UnpackU32_U64@@YAXXZ@4HA
	DD	imagerel ?dtor$6@?0??UnpackU32_U64@@YAXXZ@4HA+51
	DD	imagerel $unwind$?dtor$6@?0??UnpackU32_U64@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$7@?0??UnpackU32_U64@@YAXXZ@4HA DD imagerel ?dtor$7@?0??UnpackU32_U64@@YAXXZ@4HA
	DD	imagerel ?dtor$7@?0??UnpackU32_U64@@YAXXZ@4HA+51
	DD	imagerel $unwind$?dtor$7@?0??UnpackU32_U64@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PackI32_I16@@YAXXZ DD imagerel ?PackI32_I16@@YAXXZ
	DD	imagerel ?PackI32_I16@@YAXXZ+1084
	DD	imagerel $unwind$?PackI32_I16@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??PackI32_I16@@YAXXZ@4HA DD imagerel ?dtor$0@?0??PackI32_I16@@YAXXZ@4HA
	DD	imagerel ?dtor$0@?0??PackI32_I16@@YAXXZ@4HA+51
	DD	imagerel $unwind$?dtor$0@?0??PackI32_I16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??PackI32_I16@@YAXXZ@4HA DD imagerel ?dtor$1@?0??PackI32_I16@@YAXXZ@4HA
	DD	imagerel ?dtor$1@?0??PackI32_I16@@YAXXZ@4HA+51
	DD	imagerel $unwind$?dtor$1@?0??PackI32_I16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??PackI32_I16@@YAXXZ@4HA DD imagerel ?dtor$2@?0??PackI32_I16@@YAXXZ@4HA
	DD	imagerel ?dtor$2@?0??PackI32_I16@@YAXXZ@4HA+51
	DD	imagerel $unwind$?dtor$2@?0??PackI32_I16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??PackI32_I16@@YAXXZ@4HA DD imagerel ?dtor$3@?0??PackI32_I16@@YAXXZ@4HA
	DD	imagerel ?dtor$3@?0??PackI32_I16@@YAXXZ@4HA+51
	DD	imagerel $unwind$?dtor$3@?0??PackI32_I16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0??PackI32_I16@@YAXXZ@4HA DD imagerel ?dtor$4@?0??PackI32_I16@@YAXXZ@4HA
	DD	imagerel ?dtor$4@?0??PackI32_I16@@YAXXZ@4HA+51
	DD	imagerel $unwind$?dtor$4@?0??PackI32_I16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$5@?0??PackI32_I16@@YAXXZ@4HA DD imagerel ?dtor$5@?0??PackI32_I16@@YAXXZ@4HA
	DD	imagerel ?dtor$5@?0??PackI32_I16@@YAXXZ@4HA+51
	DD	imagerel $unwind$?dtor$5@?0??PackI32_I16@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ec_Line@@YAXXZ DD imagerel ??__Ec_Line@@YAXXZ
	DD	imagerel ??__Ec_Line@@YAXXZ+69
	DD	imagerel $unwind$??__Ec_Line@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Fc_Line@@YAXXZ DD imagerel ??__Fc_Line@@YAXXZ
	DD	imagerel ??__Fc_Line@@YAXXZ+37
	DD	imagerel $unwind$??__Fc_Line@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+102
	DD	imagerel $unwind$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DD imagerel $LN23
	DD	imagerel $LN23+1003
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA+80
	DD	imagerel $unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@D@std@@YAPEADPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$min@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+184
	DD	imagerel $unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+133
	DD	imagerel $unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@D@std@@YAPEADAEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$addressof@D@std@@YAPEADAEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z DD imagerel $LN6
	DD	imagerel $LN6+421
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z DD imagerel $LN6
	DD	imagerel $LN6+420
	DD	imagerel $unwind$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$max@_K@std@@YAAEB_KAEB_K0@Z DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD imagerel $LN5
	DD	imagerel $LN5+94
	DD	imagerel $unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD imagerel $LN4
	DD	imagerel $LN4+98
	DD	imagerel $unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD imagerel $LN4
	DD	imagerel $LN4+91
	DD	imagerel $unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEBV?$_String_val@U?$_Simple_types@D@std@@@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEBV?$_String_val@U?$_Simple_types@D@std@@@0@AEBV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN4
	DD	imagerel $LN4+148
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+120
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN7
	DD	imagerel $LN7+261
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+116
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DD imagerel $LN26
	DD	imagerel $LN26+1015
	DD	imagerel $unwind$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD imagerel ?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DD	imagerel ?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DD	imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA+80
	DD	imagerel $unwind$?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD imagerel $LN13
	DD	imagerel $LN13+277
	DD	imagerel $unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$forward@AEBV?$allocator@D@std@@@std@@YAAEBV?$allocator@D@0@AEBV10@@Z DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??$forward@AEBV?$allocator@D@std@@@std@@YAAEBV?$allocator@D@0@AEBV10@@Z
pdata	ENDS
CRT$XCU	SEGMENT
?c_Line$initializer$@@3P6AXXZEA DQ FLAT:??__Ec_Line@@YAXXZ ; c_Line$initializer$
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD imagerel ??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD imagerel ??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@bad_alloc@std@@8
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 01H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	imagerel ??_R3bad_array_new_length@std@@8
	DD	imagerel ??_R4bad_array_new_length@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD imagerel ??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD imagerel ??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@exception@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 01H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	imagerel ??_R3bad_alloc@std@@8
	DD	imagerel ??_R4bad_alloc@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD imagerel ??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD imagerel ??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 01H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	imagerel ??_R3exception@std@@8
	DD	imagerel ??_R4exception@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R17A@3EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17A@3EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,0,4,64)'
	DD	00H
	DD	08H
	DD	00H
	DD	04H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@A@3EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@A@3EA@ios_base@std@@8 DD imagerel ??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,0,4,64)'
	DD	01H
	DD	00H
	DD	00H
	DD	04H
	DD	040H
	DD	imagerel ??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R2?$_Iosb@H@std@@8 DD imagerel ??_R1A@?0A@EA@?$_Iosb@H@std@@8 ; std::_Iosb<int>::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R3?$_Iosb@H@std@@8 DD 00H				; std::_Iosb<int>::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$_Iosb@H@std@@@8
data$rs	SEGMENT
??_R0?AV?$_Iosb@H@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::_Iosb<int> `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$_Iosb@H@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R17?0A@EA@?$_Iosb@H@std@@8
rdata$r	SEGMENT
??_R17?0A@EA@?$_Iosb@H@std@@8 DD imagerel ??_R0?AV?$_Iosb@H@std@@@8 ; std::_Iosb<int>::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$_Iosb@H@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ios_base@std@@8
rdata$r	SEGMENT
??_R2ios_base@std@@8 DD imagerel ??_R1A@?0A@EA@ios_base@std@@8 ; std::ios_base::`RTTI Base Class Array'
	DD	imagerel ??_R17?0A@EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3ios_base@std@@8
rdata$r	SEGMENT
??_R3ios_base@std@@8 DD 00H				; std::ios_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVios_base@std@@@8
data$rs	SEGMENT
??_R0?AVios_base@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::ios_base `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVios_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ios_base@std@@8 DD imagerel ??_R0?AVios_base@std@@@8 ; std::ios_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@ios_base@std@@8
	DD	imagerel ??_R17?0A@EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD 00H	; std::basic_ios<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	imagerel ??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ios<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ios@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ios<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,0,4,80)'
	DD	02H
	DD	00H
	DD	00H
	DD	04H
	DD	050H
	DD	imagerel ??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	imagerel ??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ostream<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8 ; std::basic_ostream<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8
	DD	imagerel ??_R1A@A@3EA@ios_base@std@@8
	DD	imagerel ??_R17A@3EA@?$_Iosb@H@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	imagerel ??_R2?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allo'
	DB	'cator@D@2@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 01H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	088H
	DD	04H
	DD	imagerel ??_R0?AV?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	imagerel ??_R3?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
	DD	imagerel ??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Array'
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD 00H ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	imagerel ??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_streambuf<char,std::char_traits<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8 DD imagerel ??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8 ; std::basic_streambuf<char,std::char_traits<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	imagerel ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD imagerel ??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Base Class Array'
	DD	imagerel ??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8
	ORG $+3
rdata$r	ENDS
;	COMDAT ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	SEGMENT
??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8 DD 00H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	imagerel ??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
data$rs	SEGMENT
??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocato'
	DB	'r@D@2@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	SEGMENT
??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DD 01H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	imagerel ??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8
	DD	imagerel ??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8
	DD	imagerel ??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
rdata$r	ENDS
;	COMDAT ??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
CONST	SEGMENT
??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'm', 00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04ODOJPIMC@?5?5?5?$HM@
CONST	SEGMENT
??_C@_04ODOJPIMC@?5?5?5?$HM@ DB '   |', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CNIMAHEN@c?5hi?5@
CONST	SEGMENT
??_C@_05CNIMAHEN@c?5hi?5@ DB 'c hi ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KGGDOMKI@c?5lo?5@
CONST	SEGMENT
??_C@_05KGGDOMKI@c?5lo?5@ DB 'c lo ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MGNGEGIN@?6Results?5for?5PackI32_I16_Iavx2?6@
CONST	SEGMENT
??_C@_0CA@MGNGEGIN@?6Results?5for?5PackI32_I16_Iavx2?6@ DB 0aH, 'Results '
	DB	'for PackI32_I16_Iavx2', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BKMPPLED@c?$FL1?$FN?5hi?5qword@
CONST	SEGMENT
??_C@_0O@BKMPPLED@c?$FL1?$FN?5hi?5qword@ DB 'c[1] hi qword', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IBEMKDMI@c?$FL1?$FN?5lo?5qword@
CONST	SEGMENT
??_C@_0O@IBEMKDMI@c?$FL1?$FN?5lo?5qword@ DB 'c[1] lo qword', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IBGKLHCM@c?$FL0?$FN?5hi?5qword@
CONST	SEGMENT
??_C@_0O@IBGKLHCM@c?$FL0?$FN?5hi?5qword@ DB 'c[0] hi qword', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BKOJOPKH@c?$FL0?$FN?5lo?5qword@
CONST	SEGMENT
??_C@_0O@BKOJOPKH@c?$FL0?$FN?5lo?5qword@ DB 'c[0] lo qword', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OGNANEOI@b?5hi?5@
CONST	SEGMENT
??_C@_05OGNANEOI@b?5hi?5@ DB 'b hi ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GAEEKGEG@a?5hi?5@
CONST	SEGMENT
??_C@_05GAEEKGEG@a?5hi?5@ DB 'a hi ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GNDPDPAN@b?5lo?5@
CONST	SEGMENT
??_C@_05GNDPDPAN@b?5lo?5@ DB 'b lo ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OLKLENKD@a?5lo?5@
CONST	SEGMENT
??_C@_05OLKLENKD@a?5lo?5@ DB 'a lo ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LIOLKKFF@?6Results?5for?5UnpackU32_U64_Iavx@
CONST	SEGMENT
??_C@_0CC@LIOLKKFF@?6Results?5for?5UnpackU32_U64_Iavx@ DB 0aH, 'Results f'
	DB	'or UnpackU32_U64_Iavx2', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
CONST	SEGMENT
??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@ DD 00H ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbtable'
	DD	088H
CONST	ENDS
;	COMDAT ??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DQ FLAT:??_R4?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DQ	FLAT:??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
CONST	ENDS
;	COMDAT ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
CONST	SEGMENT
??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ DQ FLAT:??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`vftable'
	DQ	FLAT:??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
	DQ	FLAT:?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAAXXZ
	DQ	FLAT:?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
	DQ	FLAT:?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
	DQ	FLAT:?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JXZ
	DQ	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ
	DQ	FLAT:?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z
	DQ	FLAT:?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z
	DQ	FLAT:?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
	DQ	FLAT:?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
	DQ	FLAT:?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAPEAV12@PEAD_J@Z
	DQ	FLAT:?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAHXZ
	DQ	FLAT:?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z
CONST	ENDS
;	COMDAT ??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\include\xlocnum', 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA DD 05aH ; `std::_Maklocwcs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\include\xlocale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@ DB 's'
	DB	00H, 't', 00H, 'd', 00H, ':', 00H, ':', 00H, '_', 00H, 'A', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'n', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '_', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H
	DB	'n', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, 'x', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H, 'r'
	DB	00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' ', 00H
	DB	'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H, ' '
	DB	00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	'\', 00H, '2', 00H, '0', 00H, '1', 00H, '9', 00H, '\', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H, 'T'
	DB	00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M', 00H
	DB	'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H, '.'
	DB	00H, '2', 00H, '9', 00H, '.', 00H, '3', 00H, '0', 00H, '1', 00H
	DB	'3', 00H, '3', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'l'
	DB	00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
CONST	SEGMENT
??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@ DB 'C:\Pro'
	DB	'gram Files (x86)\Microsoft Visual Studio\2019\Community\VC\To'
	DB	'ols\MSVC\14.29.30133\include\xmemory', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA DD 099H ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0exception@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24 DD 010H
	DD	imagerel ??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_alloc@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DQ FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
xdata$x	SEGMENT
_CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24 DD 00H
	DD	imagerel ??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	018H
	DD	imagerel ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DQ FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DQ	0000000000000000H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT _CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	imagerel _CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QEAA@AEBV01@@Z24
	DD	imagerel _CT??_R0?AVexception@std@@@8??0exception@std@@QEAA@AEBV01@@Z24
xdata$x	ENDS
;	COMDAT _TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
_TI3?AVbad_array_new_length@std@@ DD 00H
	DD	imagerel ??1bad_array_new_length@std@@UEAA@XZ
	DD	00H
	DD	imagerel _CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DQ FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DQ	FLAT:??_Ebad_array_new_length@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DQ FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DQ	FLAT:??_Ebad_alloc@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DQ FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DQ	FLAT:??_Eexception@std@@UEAAPEAXI@Z
	DQ	FLAT:?what@exception@std@@UEBAPEBDXZ
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBV?$allocator@D@std@@@std@@YAAEBV?$allocator@D@0@AEBV10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z DD 035051301H
	DD	010e3313H
	DD	07007002bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 025051819H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	03deH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 0aH
	DB	00H
	DB	00H
	DB	0e9H, 03H
	DB	02H
	DB	'<'
	DB	04H
	DB	099H, 09H
	DB	02H
	DB	't'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DB 038H
	DD	imagerel $stateUnwindMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	imagerel $tryMap$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	imagerel $ip2state$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z DD 025054719H
	DD	0118231dH
	DD	070110041H
	DD	05010H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
	DD	01fbH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcName$0 DB 05fH ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcVarDesc DD 068H ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
	DD	010H
	DQ	FLAT:??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcName$0
	ORG $+48
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcFrameData DD 01H ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
	DD	00H
	DQ	FLAT:??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 06H
	DB	00H
	DB	00H
	DB	'p'
	DB	02H
	DB	0f1H, 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025051811H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEBV?$_String_val@U?$_Simple_types@D@std@@@0@AEBV10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DB 060H
	DD	imagerel $ip2state$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z DD 025051819H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Get_size_of_n@$00@std@@YA_K_K@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@_K@std@@YAAEB_KAEB_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	018bH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z DD 025054c19H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcVarDesc DD 088H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
	DD	08H
	DQ	FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcName$0
	ORG $+48
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
	DD	00H
	DQ	FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z DD 025052201H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	018cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z DD 025054c19H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>
	DB	04eH
	DB	065H
	DB	077H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+7
??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z$rtcVarDesc DD 088H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>
	DD	08H
	DQ	FLAT:??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z$rtcName$0
	ORG $+48
??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>
	DD	00H
	DQ	FLAT:??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z DD 025052201H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@D@std@@YAPEADAEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z DD 025051d01H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$min@_K@std@@YAAEB_KAEB_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Unfancy@D@std@@YAPEADPEAD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03aH
	DW	03d2H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 0aH
	DB	00H
	DB	00H
	DB	0caH
	DB	02H
	DB	011H, 02H
	DB	04H
	DB	08dH, 09H
	DB	02H
	DB	0c0H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z DD 025054119H
	DD	01122317H
	DD	0700b0049H
	DD	0500aH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
	DD	023bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcVarDesc DD 048H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Fc_Line@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ec_Line@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	0421H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$5@?0??PackI32_I16@@YAXXZ@4HA DD 041201H
	DD	0d00e3212H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0??PackI32_I16@@YAXXZ@4HA DD 041201H
	DD	0d00e3212H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??PackI32_I16@@YAXXZ@4HA DD 041201H
	DD	0d00e3212H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??PackI32_I16@@YAXXZ@4HA DD 041201H
	DD	0d00e3212H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??PackI32_I16@@YAXXZ@4HA DD 041201H
	DD	0d00e3212H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??PackI32_I16@@YAXXZ@4HA DD 041201H
	DD	0d00e3212H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?PackI32_I16@@YAXXZ DB 01aH
	DB	00H
	DB	00H
	DB	019H, 07H
	DB	02H
	DB	'Z'
	DB	00H
	DB	'n'
	DB	04H
	DB	'n'
	DB	00H
	DB	'h'
	DB	06H
	DB	'Z'
	DB	00H
	DB	'n'
	DB	08H
	DB	'n'
	DB	00H
	DB	'n'
	DB	0aH
	DB	'Z'
	DB	00H
	DB	't'
	DB	0cH
	DB	'n'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?PackI32_I16@@YAXXZ DB 0cH
	DB	0eH
	DD	imagerel ?dtor$0@?0??PackI32_I16@@YAXXZ@4HA
	DB	036H
	DD	imagerel ?dtor$1@?0??PackI32_I16@@YAXXZ@4HA
	DB	05eH
	DD	imagerel ?dtor$2@?0??PackI32_I16@@YAXXZ@4HA
	DB	086H
	DD	imagerel ?dtor$3@?0??PackI32_I16@@YAXXZ@4HA
	DB	0aeH
	DD	imagerel ?dtor$4@?0??PackI32_I16@@YAXXZ@4HA
	DB	0d6H
	DD	imagerel ?dtor$5@?0??PackI32_I16@@YAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?PackI32_I16@@YAXXZ DB 028H
	DD	imagerel $stateUnwindMap$?PackI32_I16@@YAXXZ
	DD	imagerel $ip2state$?PackI32_I16@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PackI32_I16@@YAXXZ DD 02d063b19H
	DD	010b2310H
	DD	070040088H
	DD	0d0025003H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?PackI32_I16@@YAXXZ
	DD	03feH
	DD	040H
	DD	020H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PackI32_I16@@YAXXZ$rtcName$0 DB 061H			; PackI32_I16
	DB	00H
	ORG $+2
?PackI32_I16@@YAXXZ$rtcName$1 DB 062H			; PackI32_I16
	DB	00H
	ORG $+2
?PackI32_I16@@YAXXZ$rtcName$2 DB 063H			; PackI32_I16
	DB	00H
	ORG $+6
?PackI32_I16@@YAXXZ$rtcVarDesc DD 0c0H			; PackI32_I16
	DD	020H
	DQ	FLAT:?PackI32_I16@@YAXXZ$rtcName$2
	DD	080H
	DD	020H
	DQ	FLAT:?PackI32_I16@@YAXXZ$rtcName$1
	DD	040H
	DD	020H
	DQ	FLAT:?PackI32_I16@@YAXXZ$rtcName$0
	ORG $+144
?PackI32_I16@@YAXXZ$rtcFrameData DD 03H			; PackI32_I16
	DD	00H
	DQ	FLAT:?PackI32_I16@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	052aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$7@?0??UnpackU32_U64@@YAXXZ@4HA DD 041201H
	DD	0d00e3212H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$6@?0??UnpackU32_U64@@YAXXZ@4HA DD 041201H
	DD	0d00e3212H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$5@?0??UnpackU32_U64@@YAXXZ@4HA DD 041201H
	DD	0d00e3212H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0??UnpackU32_U64@@YAXXZ@4HA DD 041201H
	DD	0d00e3212H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??UnpackU32_U64@@YAXXZ@4HA DD 041201H
	DD	0d00e3212H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??UnpackU32_U64@@YAXXZ@4HA DD 041201H
	DD	0d00e3212H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??UnpackU32_U64@@YAXXZ@4HA DD 041201H
	DD	0d00e3212H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??UnpackU32_U64@@YAXXZ@4HA DD 041201H
	DD	0d00e3212H
	DD	0500b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?UnpackU32_U64@@YAXXZ DB '"'
	DB	00H
	DB	00H
	DB	019H, 07H
	DB	02H
	DB	'Z'
	DB	00H
	DB	'h'
	DB	04H
	DB	'n'
	DB	00H
	DB	'n'
	DB	06H
	DB	'Z'
	DB	00H
	DB	'n'
	DB	08H
	DB	'n'
	DB	00H
	DB	088H
	DB	0aH
	DB	'Z'
	DB	00H
	DB	08eH
	DB	0cH
	DB	'n'
	DB	00H
	DB	088H
	DB	0eH
	DB	'Z'
	DB	00H
	DB	08eH
	DB	010H
	DB	'n'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?UnpackU32_U64@@YAXXZ DB 010H
	DB	0eH
	DD	imagerel ?dtor$0@?0??UnpackU32_U64@@YAXXZ@4HA
	DB	036H
	DD	imagerel ?dtor$1@?0??UnpackU32_U64@@YAXXZ@4HA
	DB	05eH
	DD	imagerel ?dtor$2@?0??UnpackU32_U64@@YAXXZ@4HA
	DB	086H
	DD	imagerel ?dtor$3@?0??UnpackU32_U64@@YAXXZ@4HA
	DB	0aeH
	DD	imagerel ?dtor$4@?0??UnpackU32_U64@@YAXXZ@4HA
	DB	0d6H
	DD	imagerel ?dtor$5@?0??UnpackU32_U64@@YAXXZ@4HA
	DB	0feH
	DD	imagerel ?dtor$6@?0??UnpackU32_U64@@YAXXZ@4HA
	DB	04dH
	DB	02H
	DD	imagerel ?dtor$7@?0??UnpackU32_U64@@YAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?UnpackU32_U64@@YAXXZ DB 028H
	DD	imagerel $stateUnwindMap$?UnpackU32_U64@@YAXXZ
	DD	imagerel $ip2state$?UnpackU32_U64@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?UnpackU32_U64@@YAXXZ DD 02d063b19H
	DD	010b2310H
	DD	07004009cH
	DD	0d0025003H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?UnpackU32_U64@@YAXXZ
	DD	049eH
	DD	040H
	DD	020H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?UnpackU32_U64@@YAXXZ$rtcName$0 DB 061H			; UnpackU32_U64
	DB	00H
	ORG $+2
?UnpackU32_U64@@YAXXZ$rtcName$1 DB 062H			; UnpackU32_U64
	DB	00H
	ORG $+2
?UnpackU32_U64@@YAXXZ$rtcName$2 DB 063H			; UnpackU32_U64
	DB	00H
	ORG $+6
?UnpackU32_U64@@YAXXZ$rtcVarDesc DD 0c0H		; UnpackU32_U64
	DD	040H
	DQ	FLAT:?UnpackU32_U64@@YAXXZ$rtcName$2
	DD	080H
	DD	020H
	DQ	FLAT:?UnpackU32_U64@@YAXXZ$rtcName$1
	DD	040H
	DD	020H
	DQ	FLAT:?UnpackU32_U64@@YAXXZ$rtcName$0
	ORG $+144
?UnpackU32_U64@@YAXXZ$rtcFrameData DD 03H		; UnpackU32_U64
	DD	00H
	DQ	FLAT:?UnpackU32_U64@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	02cdH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z DB 012H
	DB	00H
	DB	00H
	DB	0feH
	DB	02H
	DB	0a1H, 02H
	DB	04H
	DB	0cdH, 02H
	DB	06H
	DB	'<'
	DB	08H
	DB	0caH
	DB	06H
	DB	01aH
	DB	04H
	DB	01aH
	DB	02H
	DB	'`'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z DB 08H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$3@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z DB 028H
	DD	imagerel $stateUnwindMap$??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z
	DD	imagerel $ip2state$??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z DD 025054c19H
	DD	011d2322H
	DD	0701600afH
	DD	05015H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z
	DD	0562H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z$rtcName$0 DB 06fH ; YmmVal::ToStringHex<unsigned __int64>
	DB	073H
	DB	073H
	DB	00H
??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z$rtcName$2 DB 073H ; YmmVal::ToStringHex<unsigned __int64>
	DB	031H
	DB	00H
	ORG $+1
??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z$rtcName$1 DB 06fH ; YmmVal::ToStringHex<unsigned __int64>
	DB	073H
	DB	073H
	DB	05fH
	DB	074H
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+3
??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z$rtcName$3 DB 073H ; YmmVal::ToStringHex<unsigned __int64>
	DB	032H
	DB	00H
	ORG $+1
??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z$rtcFrameData DD 04H ; YmmVal::ToStringHex<unsigned __int64>
	DD	00H
	DQ	FLAT:??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z$rtcVarDesc
	ORG $+8
??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z$rtcVarDesc DD 0308H ; YmmVal::ToStringHex<unsigned __int64>
	DD	028H
	DQ	FLAT:??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z$rtcName$3
	DD	02c8H
	DD	028H
	DQ	FLAT:??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z$rtcName$2
	DD	01c0H
	DD	0e8H
	DQ	FLAT:??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z$rtcName$1
	DD	030H
	DD	0e8H
	DQ	FLAT:??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z$rtcName$0
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	02d2H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z DB 012H
	DB	00H
	DB	00H
	DB	0feH
	DB	02H
	DB	0a1H, 02H
	DB	04H
	DB	0d5H, 02H
	DB	06H
	DB	'B'
	DB	08H
	DB	0caH
	DB	06H
	DB	01aH
	DB	04H
	DB	01aH
	DB	02H
	DB	'`'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z DB 08H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$3@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z DB 028H
	DD	imagerel $stateUnwindMap$??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z
	DD	imagerel $ip2state$??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z DD 025054c19H
	DD	011d2322H
	DD	0701600afH
	DD	05015H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z
	DD	0562H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z$rtcName$0 DB 06fH ; YmmVal::ToStringHex<unsigned int>
	DB	073H
	DB	073H
	DB	00H
??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z$rtcName$2 DB 073H ; YmmVal::ToStringHex<unsigned int>
	DB	031H
	DB	00H
	ORG $+1
??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z$rtcName$1 DB 06fH ; YmmVal::ToStringHex<unsigned int>
	DB	073H
	DB	073H
	DB	05fH
	DB	074H
	DB	065H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+3
??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z$rtcName$3 DB 073H ; YmmVal::ToStringHex<unsigned int>
	DB	032H
	DB	00H
	ORG $+1
??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z$rtcFrameData DD 04H ; YmmVal::ToStringHex<unsigned int>
	DD	00H
	DQ	FLAT:??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z$rtcVarDesc
	ORG $+8
??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z$rtcVarDesc DD 0308H ; YmmVal::ToStringHex<unsigned int>
	DD	028H
	DQ	FLAT:??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z$rtcName$3
	DD	02c8H
	DD	028H
	DQ	FLAT:??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z$rtcName$2
	DD	01c0H
	DD	0e8H
	DQ	FLAT:??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z$rtcName$1
	DD	030H
	DD	0e8H
	DQ	FLAT:??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z$rtcName$0
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	01d0H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z DB 06H
	DB	00H
	DB	00H
	DB	0feH
	DB	02H
	DB	0adH, 04H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z DB 028H
	DD	imagerel $stateUnwindMap$??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z
	DD	imagerel $ip2state$??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z DD 025054c19H
	DD	011d2322H
	DD	070160057H
	DD	05015H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z
	DD	02a2H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z$rtcName$0 DB 06fH ; YmmVal::ToStringInt<int>
	DB	073H
	DB	073H
	DB	00H
	ORG $+12
??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z$rtcVarDesc DD 030H ; YmmVal::ToStringInt<int>
	DD	0e8H
	DQ	FLAT:??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z$rtcName$0
	ORG $+48
??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z$rtcFrameData DD 01H ; YmmVal::ToStringInt<int>
	DD	00H
	DQ	FLAT:??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	01d1H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z DB 06H
	DB	00H
	DB	00H
	DB	0feH
	DB	02H
	DB	0b1H, 04H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z DB 028H
	DD	imagerel $stateUnwindMap$??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z
	DD	imagerel $ip2state$??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z DD 025054c19H
	DD	011d2322H
	DD	070160057H
	DD	05015H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z
	DD	02a2H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z$rtcName$0 DB 06fH ; YmmVal::ToStringInt<short>
	DB	073H
	DB	073H
	DB	00H
	ORG $+12
??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z$rtcVarDesc DD 030H ; YmmVal::ToStringInt<short>
	DD	0e8H
	DQ	FLAT:??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z$rtcName$0
	ORG $+48
??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z$rtcFrameData DD 01H ; YmmVal::ToStringInt<short>
	DD	00H
	DQ	FLAT:??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6DU?$char_traits@D@std@@D@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Fillobj@D@0@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_Fillobj@D@std@@QEAA@D@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$setfill@D@std@@YA?AU?$_Fillobj@D@0@D@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	03f3H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0aH
	DB	00H
	DB	00H
	DB	'A', 04H
	DB	02H
	DB	'<'
	DB	04H
	DB	095H, 09H
	DB	02H
	DB	't'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	01H
	DB	080H
	DD	imagerel ?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	02H
	DB	02H
	DB	04H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DB	028H
	DB	030H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 025054219H
	DD	01132318H
	DD	0700c0045H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	021bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0 DB 05fH ; std::operator<<<std::char_traits<char> >
	DB	04fH
	DB	06bH
	DB	00H
	ORG $+12
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc DD 088H ; std::operator<<<std::char_traits<char> >
	DD	010H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcName$0
	ORG $+48
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData DD 01H ; std::operator<<<std::char_traits<char> >
	DD	00H
	DQ	FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z DD 05051601H
	DD	01130316H
	DD	0700c0019H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z DD 025051201H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ DD 025051319H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z DD 025052201H
	DD	011d2322H
	DD	070160035H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z DD 025052201H
	DD	011d2322H
	DD	070160039H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	0167H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ DD 025053d19H
	DD	010e2313H
	DD	07007002bH
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0140H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ$rtcName$0 DB 05fH ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
	DB	050H
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+10
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ$rtcVarDesc DD 048H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
	DD	08H
	DQ	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ$rtcName$0
	ORG $+48
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ$rtcFrameData DD 01H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
	DD	00H
	DQ	FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b002dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b003dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03bH
	DB	0ddH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DB 06H
	DB	00H
	DB	00H
	DB	0e0H
	DB	02H
	DB	08eH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DB 028H
	DD	imagerel $stateUnwindMap$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	imagerel $ip2state$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 025054219H
	DD	01132318H
	DD	0700c002fH
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	016aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcName$0 DB 05fH ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
	DB	052H
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcName$1 DB 05fH ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
	DB	056H
	DB	069H
	DB	065H
	DB	077H
	DB	00H
	ORG $+2
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcVarDesc DD 068H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
	DD	018H
	DQ	FLAT:?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcName$1
	DD	028H
	DD	028H
	DQ	FLAT:?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcName$0
	ORG $+96
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcFrameData DD 02H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
	DD	00H
	DQ	FLAT:?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03cH
	DW	018aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ DB 060H
	DD	imagerel $ip2state$?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ DD 025064319H
	DD	01142319H
	DD	0700d002eH
	DD	0500b600cH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ
	DD	016bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ$rtcName$0 DB 05fH ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Get_buffer_view
	DB	052H
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	00H
	ORG $+8
?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ$rtcVarDesc DD 028H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Get_buffer_view
	DD	018H
	DQ	FLAT:?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ$rtcName$0
	ORG $+48
?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ$rtcFrameData DD 01H ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Get_buffer_view
	DD	00H
	DQ	FLAT:?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DB 06H
	DB	00H
	DB	00H
	DB	'b'
	DB	02H
	DB	092H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DB 028H
	DD	imagerel $stateUnwindMap$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
	DD	imagerel $ip2state$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z DD 025051711H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DB 08H
	DB	00H
	DB	00H
	DB	0bcH
	DB	02H
	DB	'r'
	DB	04H
	DB	0ccH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
	DD	imagerel $ip2state$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 025051711H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ToStringX64@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD 035051d01H
	DD	0118331dH
	DD	070110023H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ToStringX32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD 035051d01H
	DD	0118331dH
	DD	070110023H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ToStringI32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD 035051d01H
	DD	0118331dH
	DD	070110023H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ToStringI16@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z DD 035051d01H
	DD	0118331dH
	DD	070110023H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD 025061e01H
	DD	0119231eH
	DD	070120026H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z DD 025061e01H
	DD	0119231eH
	DD	070120026H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?uppercase@std@@YAAEAVios_base@1@AEAV21@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?hex@std@@YAAEAVios_base@1@AEAV21@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z DD 035051d01H
	DD	0118331dH
	DD	07011002bH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Maklocwcs@std@@YAPEA_WPEB_W@Z DD 035051301H
	DD	010e3313H
	DD	070070027H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0231H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z DD 035054719H
	DD	0118331dH
	DD	070110047H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0228H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$0 DB 05fH ; std::_Maklocstr<wchar_t>
	DB	057H
	DB	063H
	DB	00H
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$1 DB 05fH ; std::_Maklocstr<wchar_t>
	DB	04dH
	DB	062H
	DB	073H
	DB	074H
	DB	031H
	DB	00H
	ORG $+1
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$2 DB 05fH ; std::_Maklocstr<wchar_t>
	DB	04dH
	DB	062H
	DB	073H
	DB	074H
	DB	032H
	DB	00H
	ORG $+13
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcVarDesc DD 0158H ; std::_Maklocstr<wchar_t>
	DD	08H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$2
	DD	0f8H
	DD	08H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$1
	DD	0d4H
	DD	02H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcName$0
	ORG $+144
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcFrameData DD 03H ; std::_Maklocstr<wchar_t>
	DD	00H
	DQ	FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DB 060H
	DD	imagerel $ip2state$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD 025051319H
	DD	010e2313H
	DD	070070029H
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	040H
	DB	0f6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z DD 025054719H
	DD	0118231dH
	DD	070110025H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DB	04dH
	DB	061H
	DB	073H
	DB	06bH
	DB	065H
	DB	064H
	DB	00H
	ORG $+8
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcVarDesc DD 028H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	08H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcName$0
	ORG $+48
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	DD	00H
	DQ	FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z DD 035052201H
	DD	011d3322H
	DD	070160027H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	036H
	DB	0c9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 025053d19H
	DD	010e2313H
	DD	070070031H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+5
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc DD 028H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	08H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcName$0
	ORG $+48
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	DD	00H
	DQ	FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z DD 025051d01H
	DD	0118231dH
	DD	070110029H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z DD 025051d01H
	DD	0118231dH
	DD	070110029H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K_K@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	036H
	DB	0bdH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ DD 025053d19H
	DD	010e2313H
	DD	070070029H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcName$0 DB 024H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	053H
	DB	038H
	DB	00H
	ORG $+12
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcVarDesc DD 044H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	01H
	DQ	FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcName$0
	ORG $+48
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcFrameData DD 01H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z DB 060H
	DD	imagerel $ip2state$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z DD 025051819H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z DB 060H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z DD 025051819H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	040H
	DB	0faH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DB 0aH
	DB	00H
	DB	00H
	DB	0d4H
	DB	02H
	DB	'p'
	DB	04H
	DB	'b'
	DB	02H
	DB	014H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DB 028H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z DD 025054719H
	DD	0118231dH
	DD	07011002fH
	DD	05010H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
	DD	016aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z$rtcName$0 DB 024H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	053H
	DB	039H
	DB	00H
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z$rtcName$1 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+5
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z$rtcVarDesc DD 068H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	010H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z$rtcName$1
	DD	044H
	DD	01H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z$rtcName$0
	ORG $+96
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z$rtcFrameData DD 02H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	010cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z DB 0aH
	DB	00H
	DB	00H
	DB	0ecH
	DB	02H
	DB	'p'
	DB	04H
	DB	'n'
	DB	02H
	DB	014H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z DD 025054c19H
	DD	011d2322H
	DD	07016002fH
	DD	05015H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z
	DD	016aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z$rtcName$0 DB 024H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	053H
	DB	031H
	DB	035H
	DB	00H
	ORG $+3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z$rtcName$1 DB 05fH ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DB	050H
	DB	072H
	DB	06fH
	DB	078H
	DB	079H
	DB	00H
	ORG $+1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z$rtcVarDesc DD 068H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	010H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z$rtcName$1
	DD	044H
	DD	01H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z$rtcName$0
	ORG $+96
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z$rtcFrameData DD 02H ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	DD	00H
	DQ	FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z DB 060H
	DD	imagerel $ip2state$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z DD 025051819H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z DD 025051d01H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?allocate@?$allocator@D@std@@QEAAPEAD_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$allocator@D@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Xlen_string@std@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?eq@?$_Narrow_char_traits@DH@std@@SA_NAEBD0@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Basic_container_proxy_ptr12@std@@IEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03bH
	DB	08aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AEAAXAEAU12@@Z DD 025054219H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AEAAXAEAU12@@Z$rtcName$0 DB 05fH ; std::_Container_base12::_Swap_proxy_and_iterators_locked
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AEAAXAEAU12@@Z$rtcVarDesc DD 024H ; std::_Container_base12::_Swap_proxy_and_iterators_locked
	DD	04H
	DQ	FLAT:?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AEAAXAEAU12@@Z$rtcName$0
	ORG $+48
?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AEAAXAEAU12@@Z$rtcFrameData DD 01H ; std::_Container_base12::_Swap_proxy_and_iterators_locked
	DD	00H
	DQ	FLAT:?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AEAAXAEAU12@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	036H
	DB	07eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ DD 025053d19H
	DD	010e2313H
	DD	070070021H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0 DB 05fH ; std::_Container_base12::_Orphan_all_locked_v3
	DB	04cH
	DB	06fH
	DB	063H
	DB	06bH
	DB	00H
	ORG $+10
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc DD 024H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	04H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcName$0
	ORG $+48
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData DD 01H ; std::_Container_base12::_Orphan_all_locked_v3
	DD	00H
	DQ	FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AEAAXAEAU12@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Swap_proxy_and_iterators@_Container_base12@std@@QEAAXAEAU12@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Orphan_all@_Container_base12@std@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_base12@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z DD 035051801H
	DD	01133318H
	DD	0700c002fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?max@?$numeric_limits@_J@std@@SA_JXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_Throw_bad_array_new_length@std@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030023H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_array_new_length@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_array_new_length@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_array_new_length@std@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gbad_alloc@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1bad_alloc@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0bad_alloc@std@@AEAA@QEBD@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_Gexception@std@@UEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?what@exception@std@@UEBAPEBDXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1exception@std@@UEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@AEBV01@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0exception@std@@QEAA@QEBDH@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wmemcpy DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KPEAX@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?__empty_global_delete@@YAXPEAX@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	c2 00 00	 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odsp /RTCsu /ZI
;	COMDAT ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z
_TEXT	SEGMENT
??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor', COMDAT
  00000	48 63 41 fc	 movsxd	 rax, DWORD PTR [rcx-4]
  00004	48 2b c8	 sub	 rcx, rax
  00007	e9 00 00 00 00	 jmp	 ??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
??_E?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vector deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AEBV?$allocator@D@std@@@std@@YAAEBV?$allocator@D@0@AEBV10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@AEBV?$allocator@D@std@@@std@@YAAEBV?$allocator@D@0@AEBV10@@Z PROC ; std::forward<std::allocator<char> const &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__589FA321_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1444 :     return static_cast<_Ty&&>(_Arg);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1445 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$forward@AEBV?$allocator@D@std@@@std@@YAAEBV?$allocator@D@0@AEBV10@@Z ENDP ; std::forward<std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
_Al$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 693  :     static _CONSTEXPR20_DYNALLOC void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 694  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 695  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 696  :         if (_STD is_constant_evaluated()) {
; 697  :             _Al.deallocate(_Ptr, _Count);
; 698  :         } else
; 699  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 700  :         {
; 701  :             (void) _Al;
; 702  :             _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

  00029	48 6b 85 f0 00
	00 00 10	 imul	 rax, QWORD PTR _Count$[rbp], 16
  00031	48 8b d0	 mov	 rdx, rax
  00034	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0003b	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 703  :         }
; 704  :     }

  00040	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00047	5f		 pop	 rdi
  00048	5d		 pop	 rbp
  00049	c3		 ret	 0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
_Val1$ = 240
??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>, COMDAT

; 1395 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  00023	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00028	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Val1$[rbp]
  0002f	e8 00 00 00 00	 call	 ??$forward@AEBV?$allocator@D@std@@@std@@YAAEBV?$allocator@D@0@AEBV10@@Z ; std::forward<std::allocator<char> const &>
  00034	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z PROC ; std::addressof<std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E458E21C_xstddef
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 275  :     return __builtin_addressof(_Val);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 276  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ENDP ; std::addressof<std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Block_size$ = 8
_Ptr_container$ = 40
_Ptr$ = 72
_Bytes$ = 320
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 134  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 135  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 136  :     const size_t _Block_size = _Non_user_size + _Bytes;

  0001f	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  00026	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  0002a	48 89 45 08	 mov	 QWORD PTR _Block_size$[rbp], rax

; 137  :     if (_Block_size <= _Bytes) {

  0002e	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  00035	48 39 45 08	 cmp	 QWORD PTR _Block_size$[rbp], rax
  00039	77 05		 ja	 SHORT $LN8@Allocate_m

; 138  :         _Throw_bad_array_new_length(); // add overflow

  0003b	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN8@Allocate_m:

; 139  :     }
; 140  : 
; 141  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00040	48 8b 4d 08	 mov	 rcx, QWORD PTR _Block_size$[rbp]
  00044	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00049	48 89 45 28	 mov	 QWORD PTR _Ptr_container$[rbp], rax
$LN4@Allocate_m:

; 142  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004d	48 83 7d 28 00	 cmp	 QWORD PTR _Ptr_container$[rbp], 0
  00052	74 02		 je	 SHORT $LN9@Allocate_m
  00054	eb 6b		 jmp	 SHORT $LN10@Allocate_m
$LN9@Allocate_m:
$LN7@Allocate_m:
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  0005d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00062	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00069	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006e	45 33 c9	 xor	 r9d, r9d
  00071	41 b8 8e 00 00
	00		 mov	 r8d, 142		; 0000008eH
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0007e	b9 02 00 00 00	 mov	 ecx, 2
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00089	83 f8 01	 cmp	 eax, 1
  0008c	75 03		 jne	 SHORT $LN12@Allocate_m
  0008e	cc		 int	 3
  0008f	33 c0		 xor	 eax, eax
$LN12@Allocate_m:
  00091	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0009a	41 b9 8e 00 00
	00		 mov	 r9d, 142		; 0000008eH
  000a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EO@GFNCMDLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AA_@
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 95		 jne	 SHORT $LN7@Allocate_m
$LN10@Allocate_m:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 86		 jne	 SHORT $LN4@Allocate_m

; 143  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  000c7	48 8b 45 28	 mov	 rax, QWORD PTR _Ptr_container$[rbp]
  000cb	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  000cf	48 83 e0 e0	 and	 rax, -32		; ffffffffffffffe0H
  000d3	48 89 45 48	 mov	 QWORD PTR _Ptr$[rbp], rax

; 144  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  000d7	b8 08 00 00 00	 mov	 eax, 8
  000dc	48 6b c0 ff	 imul	 rax, rax, -1
  000e0	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000e4	48 8b 55 28	 mov	 rdx, QWORD PTR _Ptr_container$[rbp]
  000e8	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 145  : 
; 146  : #ifdef _DEBUG
; 147  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

  000ec	b8 08 00 00 00	 mov	 eax, 8
  000f1	48 6b c0 fe	 imul	 rax, rax, -2
  000f5	48 8b 4d 48	 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000f9	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  00103	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 148  : #endif // _DEBUG
; 149  :     return _Ptr;

  00107	48 8b 45 48	 mov	 rax, QWORD PTR _Ptr$[rbp]
$LN11@Allocate_m:

; 150  : }

  0010b	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  00112	5f		 pop	 rdi
  00113	5d		 pop	 rbp
  00114	c3		 ret	 0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z PROC		; std::forward<char * &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__589FA321_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1444 :     return static_cast<_Ty&&>(_Arg);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1445 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__589FA321_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1444 :     return static_cast<_Ty&&>(_Arg);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1445 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z
_TEXT	SEGMENT
_It$ = 224
??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z PROC	; std::_Voidify_iter<char * *>, COMDAT

; 130  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__12269DE6_xutility
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _It$[rbp]

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z ENDP	; std::_Voidify_iter<char * *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z PROC		; std::addressof<char *>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E458E21C_xstddef
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 275  :     return __builtin_addressof(_Val);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 276  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__589FA321_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1444 :     return static_cast<_Ty&&>(_Arg);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1445 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 224
_Ptr$ = 232
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 985  : _CONSTEXPR20_DYNALLOC void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 986  :     // deallocate a plain pointer using an allocator
; 987  :     using _Alloc_traits = allocator_traits<_Alloc>;
; 988  :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 989  :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

  00024	41 b8 01 00 00
	00		 mov	 r8d, 1
  0002a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00038	e8 00 00 00 00	 call	 ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAEAV?$allocator@U_Container_proxy@std@@@2@QEAU_Container_proxy@2@_K@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
  0003d	90		 npad	 1

; 990  :     } else {
; 991  :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 992  :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 993  :     }
; 994  : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
_TEXT	SEGMENT
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 308
$T5 = 340
$T6 = 372
$T7 = 404
$T8 = 440
tv296 = 452
tv291 = 452
tv136 = 452
tv297 = 456
tv294 = 456
tv292 = 456
tv298 = 464
tv295 = 464
tv293 = 464
__$ArrayPad$ = 472
_Ostr$ = 512
_Data$ = 520
_Size$ = 528
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z PROC ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>, COMDAT

; 501  :     basic_ostream<_Elem, _Traits>& _Ostr, const _Elem* const _Data, const _SizeT _Size) {

$LN26:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 4a 00 00 00	 mov	 ecx, 74			; 0000004aH
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR [rsp+552]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 d8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 502  :     // insert a character-type sequence into _Ostr as if through a basic_string copy
; 503  :     using _Ostr_t                    = basic_ostream<_Elem, _Traits>;
; 504  :     typename _Ostr_t::iostate _State = _Ostr_t::goodbit;

  00053	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 505  : 
; 506  :     _SizeT _Pad;
; 507  :     if (_Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size) {

  0005a	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00061	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00064	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00068	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0006f	48 03 c8	 add	 rcx, rax
  00072	48 8b c1	 mov	 rax, rcx
  00075	48 8b c8	 mov	 rcx, rax
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0007e	48 85 c0	 test	 rax, rax
  00081	7e 2d		 jle	 SHORT $LN10@Insert_str
  00083	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0008a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00091	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00098	48 03 c8	 add	 rcx, rax
  0009b	48 8b c1	 mov	 rax, rcx
  0009e	48 8b c8	 mov	 rcx, rax
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000a7	48 3b 85 10 02
	00 00		 cmp	 rax, QWORD PTR _Size$[rbp]
  000ae	77 0a		 ja	 SHORT $LN8@Insert_str
$LN10@Insert_str:

; 508  :         _Pad = 0;

  000b0	48 c7 45 28 00
	00 00 00	 mov	 QWORD PTR _Pad$[rbp], 0

; 509  :     } else {

  000b8	eb 2f		 jmp	 SHORT $LN9@Insert_str
$LN8@Insert_str:

; 510  :         _Pad = static_cast<_SizeT>(_Ostr.width()) - _Size;

  000ba	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c8	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000cf	48 03 c8	 add	 rcx, rax
  000d2	48 8b c1	 mov	 rax, rcx
  000d5	48 8b c8	 mov	 rcx, rax
  000d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000de	48 2b 85 10 02
	00 00		 sub	 rax, QWORD PTR _Size$[rbp]
  000e5	48 89 45 28	 mov	 QWORD PTR _Pad$[rbp], rax
$LN9@Insert_str:

; 511  :     }
; 512  : 
; 513  :     const typename _Ostr_t::sentry _Ok(_Ostr);

  000e9	48 8b 95 00 02
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  000f0	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  000f4	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  000f9	90		 npad	 1

; 514  : 
; 515  :     if (!_Ok) {

  000fa	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  000fe	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00103	0f b6 c0	 movzx	 eax, al
  00106	85 c0		 test	 eax, eax
  00108	75 0e		 jne	 SHORT $LN11@Insert_str

; 516  :         _State |= _Ostr_t::badbit;

  0010a	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0010d	83 c8 04	 or	 eax, 4
  00110	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 517  :     } else { // state okay, insert characters

  00113	e9 68 02 00 00	 jmp	 $LN12@Insert_str
$LN11@Insert_str:

; 518  :         _TRY_IO_BEGIN
; 519  :         if ((_Ostr.flags() & _Ostr_t::adjustfield) != _Ostr_t::left) {

  00118	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0011f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00122	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00126	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0012d	48 03 c8	 add	 rcx, rax
  00130	48 8b c1	 mov	 rax, rcx
  00133	48 8b c8	 mov	 rcx, rax
  00136	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  0013c	89 85 c4 01 00
	00		 mov	 DWORD PTR tv136[rbp], eax
  00142	8b 85 c4 01 00
	00		 mov	 eax, DWORD PTR tv136[rbp]
  00148	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0014d	83 f8 40	 cmp	 eax, 64			; 00000040H
  00150	0f 84 c8 00 00
	00		 je	 $LN14@Insert_str

; 520  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00156	eb 0b		 jmp	 SHORT $LN4@Insert_str
$LN2@Insert_str:
  00158	48 8b 45 28	 mov	 rax, QWORD PTR _Pad$[rbp]
  0015c	48 ff c8	 dec	 rax
  0015f	48 89 45 28	 mov	 QWORD PTR _Pad$[rbp], rax
$LN4@Insert_str:
  00163	48 83 7d 28 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  00168	0f 86 b0 00 00
	00		 jbe	 $LN14@Insert_str

; 521  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0016e	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00175	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00178	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0017c	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00183	48 03 c8	 add	 rcx, rax
  00186	48 8b c1	 mov	 rax, rcx
  00189	48 8b c8	 mov	 rcx, rax
  0018c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  00192	88 85 c4 01 00
	00		 mov	 BYTE PTR tv291[rbp], al
  00198	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0019f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001a6	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  001ad	48 03 c8	 add	 rcx, rax
  001b0	48 8b c1	 mov	 rax, rcx
  001b3	48 8b c8	 mov	 rcx, rax
  001b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001bc	48 89 85 c8 01
	00 00		 mov	 QWORD PTR tv292[rbp], rax
  001c3	0f b6 95 c4 01
	00 00		 movzx	 edx, BYTE PTR tv291[rbp]
  001ca	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR tv292[rbp]
  001d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001d7	89 85 d0 01 00
	00		 mov	 DWORD PTR tv293[rbp], eax
  001dd	8b 85 d0 01 00
	00		 mov	 eax, DWORD PTR tv293[rbp]
  001e3	89 85 34 01 00
	00		 mov	 DWORD PTR $T4[rbp], eax
  001e9	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001ee	89 85 54 01 00
	00		 mov	 DWORD PTR $T5[rbp], eax
  001f4	48 8d 95 34 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  001fb	48 8d 8d 54 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00202	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00207	0f b6 c0	 movzx	 eax, al
  0020a	85 c0		 test	 eax, eax
  0020c	74 0b		 je	 SHORT $LN15@Insert_str

; 522  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  0020e	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00211	83 c8 04	 or	 eax, 4
  00214	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 523  :                     break;

  00217	eb 05		 jmp	 SHORT $LN14@Insert_str
$LN15@Insert_str:

; 524  :                 }
; 525  :             }

  00219	e9 3a ff ff ff	 jmp	 $LN2@Insert_str
$LN14@Insert_str:

; 526  :         }
; 527  : 
; 528  :         if (_State == _Ostr_t::goodbit
; 529  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  0021e	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  00222	75 6b		 jne	 SHORT $LN16@Insert_str
  00224	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0022b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0022e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00232	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00239	48 03 c8	 add	 rcx, rax
  0023c	48 8b c1	 mov	 rax, rcx
  0023f	48 8b c8	 mov	 rcx, rax
  00242	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00248	48 89 85 c8 01
	00 00		 mov	 QWORD PTR tv294[rbp], rax
  0024f	4c 8b 85 10 02
	00 00		 mov	 r8, QWORD PTR _Size$[rbp]
  00256	48 8b 95 08 02
	00 00		 mov	 rdx, QWORD PTR _Data$[rbp]
  0025d	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR tv294[rbp]
  00264	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  0026a	48 89 85 d0 01
	00 00		 mov	 QWORD PTR tv295[rbp], rax
  00271	48 8b 85 10 02
	00 00		 mov	 rax, QWORD PTR _Size$[rbp]
  00278	48 39 85 d0 01
	00 00		 cmp	 QWORD PTR tv295[rbp], rax
  0027f	74 0e		 je	 SHORT $LN16@Insert_str

; 530  :             _State |= _Ostr_t::badbit;

  00281	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00284	83 c8 04	 or	 eax, 4
  00287	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 531  :         } else {

  0028a	e9 c8 00 00 00	 jmp	 $LN17@Insert_str
$LN16@Insert_str:

; 532  :             for (; 0 < _Pad; --_Pad) { // pad on right

  0028f	eb 0b		 jmp	 SHORT $LN7@Insert_str
$LN5@Insert_str:
  00291	48 8b 45 28	 mov	 rax, QWORD PTR _Pad$[rbp]
  00295	48 ff c8	 dec	 rax
  00298	48 89 45 28	 mov	 QWORD PTR _Pad$[rbp], rax
$LN7@Insert_str:
  0029c	48 83 7d 28 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  002a1	0f 86 b0 00 00
	00		 jbe	 $LN17@Insert_str

; 533  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002a7	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002ae	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002b1	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002b5	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002bc	48 03 c8	 add	 rcx, rax
  002bf	48 8b c1	 mov	 rax, rcx
  002c2	48 8b c8	 mov	 rcx, rax
  002c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002cb	88 85 c4 01 00
	00		 mov	 BYTE PTR tv296[rbp], al
  002d1	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002d8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002db	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002df	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002e6	48 03 c8	 add	 rcx, rax
  002e9	48 8b c1	 mov	 rax, rcx
  002ec	48 8b c8	 mov	 rcx, rax
  002ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002f5	48 89 85 c8 01
	00 00		 mov	 QWORD PTR tv297[rbp], rax
  002fc	0f b6 95 c4 01
	00 00		 movzx	 edx, BYTE PTR tv296[rbp]
  00303	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR tv297[rbp]
  0030a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  00310	89 85 d0 01 00
	00		 mov	 DWORD PTR tv298[rbp], eax
  00316	8b 85 d0 01 00
	00		 mov	 eax, DWORD PTR tv298[rbp]
  0031c	89 85 74 01 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  00322	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00327	89 85 94 01 00
	00		 mov	 DWORD PTR $T7[rbp], eax
  0032d	48 8d 95 74 01
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  00334	48 8d 8d 94 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  0033b	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00340	0f b6 c0	 movzx	 eax, al
  00343	85 c0		 test	 eax, eax
  00345	74 0b		 je	 SHORT $LN18@Insert_str

; 534  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  00347	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0034a	83 c8 04	 or	 eax, 4
  0034d	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 535  :                     break;

  00350	eb 05		 jmp	 SHORT $LN17@Insert_str
$LN18@Insert_str:

; 536  :                 }
; 537  :             }

  00352	e9 3a ff ff ff	 jmp	 $LN5@Insert_str
$LN17@Insert_str:

; 538  :         }
; 539  : 
; 540  :         _Ostr.width(0);

  00357	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0035e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00361	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00365	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0036c	48 03 c8	 add	 rcx, rax
  0036f	48 8b c1	 mov	 rax, rcx
  00372	33 d2		 xor	 edx, edx
  00374	48 8b c8	 mov	 rcx, rax
  00377	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  0037d	90		 npad	 1
  0037e	eb 00		 jmp	 SHORT $LN12@Insert_str
$LN24@Insert_str:
$LN12@Insert_str:

; 541  :         _CATCH_IO_(_Ostr_t, _Ostr)
; 542  :     }
; 543  : 
; 544  :     _Ostr.setstate(_State);

  00380	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00387	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0038a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0038e	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00395	48 03 c8	 add	 rcx, rax
  00398	48 8b c1	 mov	 rax, rcx
  0039b	45 33 c0	 xor	 r8d, r8d
  0039e	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  003a1	48 8b c8	 mov	 rcx, rax
  003a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 545  :     return _Ostr;

  003aa	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  003b1	48 89 85 b8 01
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  003b8	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  003bc	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003c1	48 8b 85 b8 01
	00 00		 mov	 rax, QWORD PTR $T8[rbp]

; 546  : }

  003c8	48 8b f8	 mov	 rdi, rax
  003cb	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  003cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$rtcFrameData
  003d6	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003db	48 8b c7	 mov	 rax, rdi
  003de	48 8b 8d d8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  003e5	48 33 cd	 xor	 rcx, rbp
  003e8	e8 00 00 00 00	 call	 __security_check_cookie
  003ed	48 8d a5 e8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+488]
  003f4	5f		 pop	 rdi
  003f5	5d		 pop	 rbp
  003f6	c3		 ret	 0
??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z ENDP ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 308
$T5 = 340
$T6 = 372
$T7 = 404
$T8 = 440
tv296 = 452
tv291 = 452
tv136 = 452
tv297 = 456
tv294 = 456
tv292 = 456
tv298 = 464
tv295 = 464
tv293 = 464
__$ArrayPad$ = 472
_Ostr$ = 512
_Data$ = 520
_Size$ = 528
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 308
$T5 = 340
$T6 = 372
$T7 = 404
$T8 = 440
tv296 = 452
tv291 = 452
tv136 = 452
tv297 = 456
tv294 = 456
tv292 = 456
tv298 = 464
tv295 = 464
tv293 = 464
__$ArrayPad$ = 472
_Ostr$ = 512
_Data$ = 520
_Size$ = 528
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1

; 541  :         _CATCH_IO_(_Ostr_t, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$0:
  00014	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN24@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 308
$T5 = 340
$T6 = 372
$T7 = 404
$T8 = 440
tv296 = 452
tv291 = 452
tv136 = 452
tv297 = 456
tv294 = 456
tv292 = 456
tv298 = 464
tv295 = 464
tv293 = 464
__$ArrayPad$ = 472
_Ostr$ = 512
_Data$ = 520
_Size$ = 528
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Pad$ = 40
_Ok$ = 72
$T4 = 308
$T5 = 340
$T6 = 372
$T7 = 404
$T8 = 440
tv296 = 452
tv291 = 452
tv136 = 452
tv297 = 456
tv294 = 456
tv292 = 456
tv298 = 464
tv295 = 464
tv293 = 464
__$ArrayPad$ = 472
_Ostr$ = 512
_Data$ = 520
_Size$ = 528
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA PROC ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1

; 541  :         _CATCH_IO_(_Ostr_t, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$0:
  00014	48 8b 85 00 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 00 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN24@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA ENDP ; `std::_Insert_string<char,std::char_traits<char>,unsigned __int64>'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 224
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 124  :         explicit __CLR_OR_THIS_CALL operator bool() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C12F3EA4_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 125  :             return _Ok;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]

; 126  :         }

  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Zero_uncaught_exceptions$ = 4
tv72 = 212
this$ = 256
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C12F3EA4_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  0001f	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00024	0f b6 c0	 movzx	 eax, al
  00027	85 c0		 test	 eax, eax
  00029	75 09		 jne	 SHORT $LN4@sentry
  0002b	c6 85 d4 00 00
	00 01		 mov	 BYTE PTR tv72[rbp], 1
  00032	eb 07		 jmp	 SHORT $LN5@sentry
$LN4@sentry:
  00034	c6 85 d4 00 00
	00 00		 mov	 BYTE PTR tv72[rbp], 0
$LN5@sentry:
  0003b	0f b6 85 d4 00
	00 00		 movzx	 eax, BYTE PTR tv72[rbp]
  00042	88 45 04	 mov	 BYTE PTR _Zero_uncaught_exceptions$[rbp], al

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

  00045	0f b6 45 04	 movzx	 eax, BYTE PTR _Zero_uncaught_exceptions$[rbp]
  00049	85 c0		 test	 eax, eax
  0004b	74 10		 je	 SHORT $LN2@sentry

; 119  :                 this->_Myostr._Osfx();

  0004d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
$LN2@sentry:

; 120  :             }
; 121  :         }

  0005d	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00064	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00069	90		 npad	 1
  0006a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C12F3EA4_ostream
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  0002b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00032	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00037	90		 npad	 1

; 93   :             if (!_Ostr.good()) {

  00038	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0003f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00042	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00046	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0004d	48 03 c8	 add	 rcx, rax
  00050	48 8b c1	 mov	 rax, rcx
  00053	48 8b c8	 mov	 rcx, rax
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  0005c	0f b6 c0	 movzx	 eax, al
  0005f	85 c0		 test	 eax, eax
  00061	75 10		 jne	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  00063	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	c6 40 08 00	 mov	 BYTE PTR [rax+8], 0

; 95   :                 return;

  0006e	e9 81 00 00 00	 jmp	 $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  00073	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0007a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00081	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00088	48 03 c8	 add	 rcx, rax
  0008b	48 8b c1	 mov	 rax, rcx
  0008e	48 8b c8	 mov	 rcx, rax
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  00097	48 89 45 08	 mov	 QWORD PTR _Tied$[rbp], rax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  0009b	48 83 7d 08 00	 cmp	 QWORD PTR _Tied$[rbp], 0
  000a0	74 0d		 je	 SHORT $LN4@sentry
  000a2	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000a9	48 39 45 08	 cmp	 QWORD PTR _Tied$[rbp], rax
  000ad	75 0d		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  000af	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b6	c6 40 08 01	 mov	 BYTE PTR [rax+8], 1

; 101  :                 return;

  000ba	eb 38		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

  000bc	48 8b 4d 08	 mov	 rcx, QWORD PTR _Tied$[rbp]
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000c6	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000cd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d0	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000d4	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000db	48 03 c8	 add	 rcx, rax
  000de	48 8b c1	 mov	 rax, rcx
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?good@ios_base@std@@QEBA_NXZ
  000ea	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f1	88 41 08	 mov	 BYTE PTR [rcx+8], al
$LN1@sentry:

; 106  :         }

  000f4	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fb	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00102	5f		 pop	 rdi
  00103	5d		 pop	 rbp
  00104	c3		 ret	 0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Tied$ = 8
this$ = 256
_Ostr$ = 264
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
_Rdbuf$ = 8
tv72 = 216
this$ = 256
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C12F3EA4_ostream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  0001f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00029	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv72[rbp], rax
  00030	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv72[rbp]
  00037	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003a	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0003e	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv72[rbp]
  00045	48 03 c8	 add	 rcx, rax
  00048	48 8b c1	 mov	 rax, rcx
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00054	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 80   :             if (_Rdbuf) {

  00058	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  0005d	74 0f		 je	 SHORT $LN2@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  0005f	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  00063	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00066	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  0006a	ff 50 10	 call	 QWORD PTR [rax+16]
  0006d	90		 npad	 1
$LN2@Sentry_bas:

; 82   :             }
; 83   :         }

  0006e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00075	5f		 pop	 rdi
  00076	5d		 pop	 rbp
  00077	c3		 ret	 0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
_Rdbuf$ = 8
tv73 = 216
this$ = 256
_Ostr$ = 264
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C12F3EA4_ostream
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003f	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv73[rbp], rax
  00046	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv73[rbp]
  0004d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00050	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00054	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR tv73[rbp]
  0005b	48 03 c8	 add	 rcx, rax
  0005e	48 8b c1	 mov	 rax, rcx
  00061	48 8b c8	 mov	 rcx, rax
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0006a	48 89 45 08	 mov	 QWORD PTR _Rdbuf$[rbp], rax

; 73   :             if (_Rdbuf) {

  0006e	48 83 7d 08 00	 cmp	 QWORD PTR _Rdbuf$[rbp], 0
  00073	74 0e		 je	 SHORT $LN2@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

  00075	48 8b 45 08	 mov	 rax, QWORD PTR _Rdbuf$[rbp]
  00079	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007c	48 8b 4d 08	 mov	 rcx, QWORD PTR _Rdbuf$[rbp]
  00080	ff 50 08	 call	 QWORD PTR [rax+8]
$LN2@Sentry_bas:

; 75   :             }
; 76   :         }

  00083	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00091	5f		 pop	 rdi
  00092	5d		 pop	 rbp
  00093	c3		 ret	 0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1443 :     remove_reference_t<_Ty>& _Arg) noexcept { // forward an lvalue as either an lvalue or an rvalue

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__589FA321_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1444 :     return static_cast<_Ty&&>(_Arg);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1445 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_It$ = 224
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z PROC ; std::_Voidify_iter<std::_Container_proxy *>, COMDAT

; 130  : _NODISCARD constexpr void* _Voidify_iter(_Iter _It) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__12269DE6_xutility
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 131  :     if constexpr (is_pointer_v<_Iter>) {
; 132  :         return const_cast<void*>(static_cast<const volatile void*>(_It));

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _It$[rbp]

; 133  :     } else {
; 134  :         return const_cast<void*>(static_cast<const volatile void*>(_STD addressof(*_It)));
; 135  :     }
; 136  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ENDP ; std::_Voidify_iter<std::_Container_proxy *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E458E21C_xstddef
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 275  :     return __builtin_addressof(_Val);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 276  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEBV?$_String_val@U?$_Simple_types@D@std@@@0@AEBV10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEBV?$_String_val@U?$_Simple_types@D@std@@@0@AEBV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > const >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E458E21C_xstddef
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 275  :     return __builtin_addressof(_Val);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 276  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEBV?$_String_val@U?$_Simple_types@D@std@@@0@AEBV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E458E21C_xstddef
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 275  :     return __builtin_addressof(_Val);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 276  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 4
_Max_possible$1 = 40
_Count$ = 288
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<16>, COMDAT

; 59   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0001f	c6 45 04 01	 mov	 BYTE PTR _Overflow_is_possible$[rbp], 1

; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

  00023	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0002d	48 89 45 28	 mov	 QWORD PTR _Max_possible$1[rbp], rax

; 64   :         if (_Count > _Max_possible) {

  00031	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0003b	48 39 85 20 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  00042	76 05		 jbe	 SHORT $LN2@Get_size_o

; 65   :             _Throw_bad_array_new_length(); // multiply overflow

  00044	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN2@Get_size_o:

; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00049	48 6b 85 20 01
	00 00 10	 imul	 rax, QWORD PTR _Count$[rbp], 16
$LN3@Get_size_o:

; 70   : }

  00051	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00058	5f		 pop	 rdi
  00059	5d		 pop	 rbp
  0005a	c3		 ret	 0
??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<16>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z
_TEXT	SEGMENT
_Ptr$ = 224
_Bytes$ = 232
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z PROC		; std::_Deallocate<16,0>, COMDAT

; 251  : _CONSTEXPR20_DYNALLOC void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 252  :     // deallocate storage allocated by _Allocate when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 253  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 254  :     if (_STD is_constant_evaluated()) {
; 255  :         ::operator delete(_Ptr);
; 256  :     } else
; 257  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 258  :     {
; 259  : #if defined(_M_IX86) || defined(_M_X64)
; 260  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  00024	48 81 bd e8 00
	00 00 00 10 00
	00		 cmp	 QWORD PTR _Bytes$[rbp], 4096 ; 00001000H
  0002f	72 13		 jb	 SHORT $LN2@Deallocate

; 261  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

  00031	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR _Bytes$[rbp]
  00038	48 8d 8d e0 00
	00 00		 lea	 rcx, QWORD PTR _Ptr$[rbp]
  0003f	e8 00 00 00 00	 call	 ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ; std::_Adjust_manually_vector_aligned
$LN2@Deallocate:

; 262  :         }
; 263  : #endif // defined(_M_IX86) || defined(_M_X64)
; 264  :         ::operator delete(_Ptr, _Bytes);

  00044	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Bytes$[rbp]
  0004b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00052	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
  00057	90		 npad	 1

; 265  :     }
; 266  : }

  00058	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005f	5f		 pop	 rdi
  00060	5d		 pop	 rbp
  00061	c3		 ret	 0
??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ENDP		; std::_Deallocate<16,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z PROC ; std::_Allocate<16,std::_Default_allocate_traits,0>, COMDAT

; 230  : __declspec(allocator) _CONSTEXPR20_DYNALLOC void* _Allocate(const size_t _Bytes) {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 231  :     // allocate _Bytes when !_HAS_ALIGNED_NEW || _Align <= __STDCPP_DEFAULT_NEW_ALIGNMENT__
; 232  : #if defined(_M_IX86) || defined(_M_X64)
; 233  : #ifdef __cpp_lib_constexpr_dynamic_alloc // TRANSITION, GH-1532
; 234  :     if (!_STD is_constant_evaluated())
; 235  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 236  :     {
; 237  :         if (_Bytes >= _Big_allocation_threshold) { // boost the alignment of big allocations to help autovectorization

  0001f	48 81 bd e0 00
	00 00 00 10 00
	00		 cmp	 QWORD PTR _Bytes$[rbp], 4096 ; 00001000H
  0002a	72 0e		 jb	 SHORT $LN2@Allocate

; 238  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

  0002c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00033	e8 00 00 00 00	 call	 ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
  00038	eb 1a		 jmp	 SHORT $LN1@Allocate
$LN2@Allocate:

; 239  :         }
; 240  :     }
; 241  : #endif // defined(_M_IX86) || defined(_M_X64)
; 242  : 
; 243  :     if (_Bytes != 0) {

  0003a	48 83 bd e0 00
	00 00 00	 cmp	 QWORD PTR _Bytes$[rbp], 0
  00042	74 0e		 je	 SHORT $LN3@Allocate

; 244  :         return _Traits::_Allocate(_Bytes);

  00044	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  0004b	e8 00 00 00 00	 call	 ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ; std::_Default_allocate_traits::_Allocate
  00050	eb 02		 jmp	 SHORT $LN1@Allocate
$LN3@Allocate:

; 245  :     }
; 246  : 
; 247  :     return nullptr;

  00052	33 c0		 xor	 eax, eax
$LN1@Allocate:

; 248  : }

  00054	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005b	5f		 pop	 rdi
  0005c	5d		 pop	 rbp
  0005d	c3		 ret	 0
??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ENDP ; std::_Allocate<16,std::_Default_allocate_traits,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YA_K_K@Z
_TEXT	SEGMENT
_Overflow_is_possible$ = 4
_Count$ = 256
??$_Get_size_of_n@$00@std@@YA_K_K@Z PROC		; std::_Get_size_of_n<1>, COMDAT

; 59   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 60   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

  0001f	c6 45 04 00	 mov	 BYTE PTR _Overflow_is_possible$[rbp], 0

; 61   : 
; 62   :     if constexpr (_Overflow_is_possible) {
; 63   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 64   :         if (_Count > _Max_possible) {
; 65   :             _Throw_bad_array_new_length(); // multiply overflow
; 66   :         }
; 67   :     }
; 68   : 
; 69   :     return _Count * _Ty_size;

  00023	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]

; 70   : }

  0002a	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
??$_Get_size_of_n@$00@std@@YA_K_K@Z ENDP		; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$max@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$max@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::max<unsigned __int64>, COMDAT

; 42   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1347750E_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 43   :     // return larger of _Left and _Right
; 44   :     return _Left < _Right ? _Right : _Left;

  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00032	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00035	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00038	73 10		 jae	 SHORT $LN3@max
  0003a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00041	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00048	eb 0e		 jmp	 SHORT $LN4@max
$LN3@max:
  0004a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00051	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@max:
  00058	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  0005f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00066	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 45   : }

  0006d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
??$max@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::max<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z
_TEXT	SEGMENT
$T1 = 200
_Obj$ = 256
<_Args_0>$ = 264
??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z PROC ; std::_Construct_in_place<char *,char * &>, COMDAT

; 151  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__12269DE6_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Obj$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char *>
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z ; std::_Voidify_iter<char * *>
  00038	48 8b d0	 mov	 rdx, rax
  0003b	b9 08 00 00 00	 mov	 ecx, 8
  00040	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00045	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  0004c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00053	e8 00 00 00 00	 call	 ??$forward@AEAPEAD@std@@YAAEAPEADAEAPEAD@Z ; std::forward<char * &>
  00058	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR $T1[rbp]
  0005f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00062	48 89 01	 mov	 QWORD PTR [rcx], rax

; 152  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 153  :     if (_STD is_constant_evaluated()) {
; 154  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 155  :     } else
; 156  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 157  :     {
; 158  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 159  :     }
; 160  : }

  00065	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z ENDP ; std::_Construct_in_place<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z
_TEXT	SEGMENT
$T1 = 200
_Obj$ = 256
<_Args_0>$ = 264
??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 151  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__12269DE6_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Obj$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$addressof@PEAD@std@@YAPEAPEADAEAPEAD@Z ; std::addressof<char *>
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??$_Voidify_iter@PEAPEAD@std@@YAPEAXPEAPEAD@Z ; std::_Voidify_iter<char * *>
  00038	48 8b d0	 mov	 rdx, rax
  0003b	b9 08 00 00 00	 mov	 ecx, 8
  00040	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00045	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  0004c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00053	e8 00 00 00 00	 call	 ??$forward@AEBQEAD@std@@YAAEBQEADAEBQEAD@Z ; std::forward<char * const &>
  00058	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR $T1[rbp]
  0005f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00062	48 89 01	 mov	 QWORD PTR [rcx], rax

; 152  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 153  :     if (_STD is_constant_evaluated()) {
; 154  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 155  :     } else
; 156  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 157  :     {
; 158  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 159  :     }
; 160  : }

  00065	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z
_TEXT	SEGMENT
_Old_capacity$ = 8
_New_capacity$ = 40
_Al$ = 72
_New_ptr$ = 104
__$ArrayPad$ = 312
this$ = 352
_New_size$ = 360
_Fn$ = 368
<_Args_0>$ = 376
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>, COMDAT

; 4505 :     _CONSTEXPR20_CONTAINER basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 22 00 00 00	 mov	 ecx, 34			; 00000022H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00053	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4506 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4507 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4508 :         if (_New_size > max_size()) {

  00058	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00064	48 39 85 68 01
	00 00		 cmp	 QWORD PTR _New_size$[rbp], rax
  0006b	76 05		 jbe	 SHORT $LN2@Reallocate

; 4509 :             _Xlen_string(); // result too long

  0006d	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4510 :         }
; 4511 : 
; 4512 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00072	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00079	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007d	48 89 45 08	 mov	 QWORD PTR _Old_capacity$[rbp], rax

; 4513 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00081	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR _New_size$[rbp]
  00088	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008f	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00094	48 89 45 28	 mov	 QWORD PTR _New_capacity$[rbp], rax

; 4514 :         auto& _Al                     = _Getal();

  00098	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  000a4	48 89 45 48	 mov	 QWORD PTR _Al$[rbp], rax

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000a8	48 8b 45 28	 mov	 rax, QWORD PTR _New_capacity$[rbp]
  000ac	48 83 c0 01	 add	 rax, 1
  000b0	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  000b7	48 0f 42 c1	 cmovb	 rax, rcx
  000bb	48 8b d0	 mov	 rdx, rax
  000be	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$[rbp]
  000c2	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  000c7	48 89 45 68	 mov	 QWORD PTR _New_ptr$[rbp], rax

; 4516 : 
; 4517 : #ifdef __cpp_lib_constexpr_string
; 4518 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4519 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4520 :         }
; 4521 : #endif // __cpp_lib_constexpr_string
; 4522 :         _Mypair._Myval2._Orphan_all();

  000cb	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d2	48 8b c8	 mov	 rcx, rax
  000d5	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000da	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e1	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _New_size$[rbp]
  000e8	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  000ec	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f3	48 8b 4d 28	 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  000f7	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 4525 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  000fb	48 8b 4d 68	 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  000ff	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00104	4c 8b 8d 78 01
	00 00		 mov	 r9, QWORD PTR <_Args_0>$[rbp]
  0010b	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR _New_size$[rbp]
  00112	48 8b d0	 mov	 rdx, rax
  00115	48 8d 8d 70 01
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  0011c	e8 00 00 00 00	 call	 ??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  00121	48 83 7d 08 10	 cmp	 QWORD PTR _Old_capacity$[rbp], 16
  00126	72 2f		 jb	 SHORT $LN3@Reallocate

; 4527 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00128	48 8b 45 08	 mov	 rax, QWORD PTR _Old_capacity$[rbp]
  0012c	48 ff c0	 inc	 rax
  0012f	4c 8b c0	 mov	 r8, rax
  00132	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00139	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0013d	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$[rbp]
  00141	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 4528 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  00146	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0014d	48 8b 4d 68	 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00151	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 4529 :         } else {

  00155	eb 17		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4530 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00157	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0015e	48 83 c0 08	 add	 rax, 8
  00162	48 8d 55 68	 lea	 rdx, QWORD PTR _New_ptr$[rbp]
  00166	48 8b c8	 mov	 rcx, rax
  00169	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN4@Reallocate:

; 4531 :         }
; 4532 : 
; 4533 :         return *this;

  0016e	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:

; 4534 :     }

  00175	48 8b f8	 mov	 rdi, rax
  00178	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0017c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z$rtcFrameData
  00183	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00188	48 8b c7	 mov	 rax, rdi
  0018b	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00192	48 33 cd	 xor	 rcx, rbp
  00195	e8 00 00 00 00	 call	 __security_check_cookie
  0019a	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  001a1	5f		 pop	 rdi
  001a2	5d		 pop	 rbp
  001a3	c3		 ret	 0
??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_New_ptr$ = 264
_Count$ = 272
_Ptr$ = 280
??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z PROC ; <lambda_66f57f934f28d61049862f64df852ff0>::operator(), COMDAT

; 3256 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3257 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

  0002e	4c 8b 85 10 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00035	48 8b 95 18 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0003c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00043	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00048	c6 85 c4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  0004f	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00056	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0005d	48 03 c8	 add	 rcx, rax
  00060	48 8b c1	 mov	 rax, rcx
  00063	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0006a	48 8b c8	 mov	 rcx, rax
  0006d	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3259 :             },

  00072	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00079	5f		 pop	 rdi
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
??R<lambda_66f57f934f28d61049862f64df852ff0>@@QEBA@QEAD_KQEBD@Z ENDP ; <lambda_66f57f934f28d61049862f64df852ff0>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z
_TEXT	SEGMENT
_Old_capacity$ = 8
_New_capacity$ = 40
_Al$ = 72
_New_ptr$ = 104
__$ArrayPad$ = 312
this$ = 352
_New_size$ = 360
_Fn$ = 368
<_Args_0>$ = 376
??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>, COMDAT

; 4505 :     _CONSTEXPR20_CONTAINER basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

$LN6:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 22 00 00 00	 mov	 ecx, 34			; 00000022H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR [rsp+392]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 38 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00053	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4506 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4507 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4508 :         if (_New_size > max_size()) {

  00058	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00064	48 39 85 68 01
	00 00		 cmp	 QWORD PTR _New_size$[rbp], rax
  0006b	76 05		 jbe	 SHORT $LN2@Reallocate

; 4509 :             _Xlen_string(); // result too long

  0006d	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN2@Reallocate:

; 4510 :         }
; 4511 : 
; 4512 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

  00072	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00079	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007d	48 89 45 08	 mov	 QWORD PTR _Old_capacity$[rbp], rax

; 4513 :         const size_type _New_capacity = _Calculate_growth(_New_size);

  00081	48 8b 95 68 01
	00 00		 mov	 rdx, QWORD PTR _New_size$[rbp]
  00088	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008f	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
  00094	48 89 45 28	 mov	 QWORD PTR _New_capacity$[rbp], rax

; 4514 :         auto& _Al                     = _Getal();

  00098	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009f	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  000a4	48 89 45 48	 mov	 QWORD PTR _Al$[rbp], rax

; 4515 :         const pointer _New_ptr        = _Al.allocate(_New_capacity + 1); // throws

  000a8	48 8b 45 28	 mov	 rax, QWORD PTR _New_capacity$[rbp]
  000ac	48 83 c0 01	 add	 rax, 1
  000b0	48 c7 c1 ff ff
	ff ff		 mov	 rcx, -1
  000b7	48 0f 42 c1	 cmovb	 rax, rcx
  000bb	48 8b d0	 mov	 rdx, rax
  000be	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$[rbp]
  000c2	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  000c7	48 89 45 68	 mov	 QWORD PTR _New_ptr$[rbp], rax

; 4516 : 
; 4517 : #ifdef __cpp_lib_constexpr_string
; 4518 :         if (_STD is_constant_evaluated()) { // Begin the lifetimes of the objects before copying to avoid UB
; 4519 :             _Traits::assign(_Unfancy(_New_ptr), _New_capacity + 1, _Elem());
; 4520 :         }
; 4521 : #endif // __cpp_lib_constexpr_string
; 4522 :         _Mypair._Myval2._Orphan_all();

  000cb	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000d2	48 8b c8	 mov	 rcx, rax
  000d5	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 4523 :         _Mypair._Myval2._Mysize = _New_size;

  000da	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e1	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _New_size$[rbp]
  000e8	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 4524 :         _Mypair._Myval2._Myres  = _New_capacity;

  000ec	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f3	48 8b 4d 28	 mov	 rcx, QWORD PTR _New_capacity$[rbp]
  000f7	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 4525 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

  000fb	48 8b 4d 68	 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  000ff	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00104	44 0f b6 8d 78
	01 00 00	 movzx	 r9d, BYTE PTR <_Args_0>$[rbp]
  0010c	4c 8b 85 68 01
	00 00		 mov	 r8, QWORD PTR _New_size$[rbp]
  00113	48 8b d0	 mov	 rdx, rax
  00116	48 8d 8d 70 01
	00 00		 lea	 rcx, QWORD PTR _Fn$[rbp]
  0011d	e8 00 00 00 00	 call	 ??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z ; <lambda_138c3d7c38c85abb84c7fc7bfe5747b7>::operator()

; 4526 :         if (_BUF_SIZE <= _Old_capacity) {

  00122	48 83 7d 08 10	 cmp	 QWORD PTR _Old_capacity$[rbp], 16
  00127	72 2f		 jb	 SHORT $LN3@Reallocate

; 4527 :             _Al.deallocate(_Mypair._Myval2._Bx._Ptr, _Old_capacity + 1);

  00129	48 8b 45 08	 mov	 rax, QWORD PTR _Old_capacity$[rbp]
  0012d	48 ff c0	 inc	 rax
  00130	4c 8b c0	 mov	 r8, rax
  00133	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0013a	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0013e	48 8b 4d 48	 mov	 rcx, QWORD PTR _Al$[rbp]
  00142	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate

; 4528 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

  00147	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0014e	48 8b 4d 68	 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00152	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 4529 :         } else {

  00156	eb 17		 jmp	 SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4530 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

  00158	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0015f	48 83 c0 08	 add	 rax, 8
  00163	48 8d 55 68	 lea	 rdx, QWORD PTR _New_ptr$[rbp]
  00167	48 8b c8	 mov	 rcx, rax
  0016a	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEADAEBQEAD@std@@YAXAEAPEADAEBQEAD@Z ; std::_Construct_in_place<char *,char * const &>
$LN4@Reallocate:

; 4531 :         }
; 4532 : 
; 4533 :         return *this;

  0016f	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
$LN5@Reallocate:

; 4534 :     }

  00176	48 8b f8	 mov	 rdi, rax
  00179	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0017d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z$rtcFrameData
  00184	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00189	48 8b c7	 mov	 rax, rdi
  0018c	48 8b 8d 38 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00193	48 33 cd	 xor	 rcx, rbp
  00196	e8 00 00 00 00	 call	 __security_check_cookie
  0019b	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  001a2	5f		 pop	 rdi
  001a3	5d		 pop	 rbp
  001a4	c3		 ret	 0
??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
_New_ptr$ = 264
_Count$ = 272
_Ch$ = 280
??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z PROC ; <lambda_138c3d7c38c85abb84c7fc7bfe5747b7>::operator(), COMDAT

; 3279 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem _Ch) {

$LN3:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3280 :                 _Traits::assign(_New_ptr, _Count, _Ch);

  0002e	44 0f b6 85 18
	01 00 00	 movzx	 r8d, BYTE PTR _Ch$[rbp]
  00036	48 8b 95 10 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  0003d	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  00044	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3281 :                 _Traits::assign(_New_ptr[_Count], _Elem());

  00049	c6 85 c4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  00050	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00057	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _New_ptr$[rbp]
  0005e	48 03 c8	 add	 rcx, rax
  00061	48 8b c1	 mov	 rax, rcx
  00064	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0006b	48 8b c8	 mov	 rcx, rax
  0006e	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3282 :             },

  00073	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0007a	5f		 pop	 rdi
  0007b	5d		 pop	 rbp
  0007c	c3		 ret	 0
??R<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@QEBA@QEAD_KD@Z ENDP ; <lambda_138c3d7c38c85abb84c7fc7bfe5747b7>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z
_TEXT	SEGMENT
_Obj$ = 224
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z PROC	; std::_Destroy_in_place<char *>, COMDAT

; 307  : _CONSTEXPR20_DYNALLOC void _Destroy_in_place(_Ty& _Obj) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 308  :     if constexpr (is_array_v<_Ty>) {
; 309  :         _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 310  :     } else {
; 311  :         _Obj.~_Ty();
; 312  :     }
; 313  : }

  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ENDP	; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPEADAEAD@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@D@std@@YAPEADAEAD@Z PROC			; std::addressof<char>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E458E21C_xstddef
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 275  :     return __builtin_addressof(_Val);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 276  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$addressof@D@std@@YAPEADAEAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E458E21C_xstddef
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 289  :     return _Ptr;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 290  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT

; 1390 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00023	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002a	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@XZ ; std::allocator<char>::allocator<char>
  0002f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  0003e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00045	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
_Val1$ = 240
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT

; 1395 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	55		 push	 rbp
  0000f	57		 push	 rdi
  00010	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00017	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  00023	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00028	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Val1$[rbp]
  0002f	e8 00 00 00 00	 call	 ??$forward@V?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::forward<std::allocator<char> >
  00034	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\type_traits
;	COMDAT ??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z
_TEXT	SEGMENT
_Arg$ = 224
??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1455 : _NODISCARD constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept { // forward _Arg as movable

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__589FA321_type_traits
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1456 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Arg$[rbp]

; 1457 : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
this$ = 224
__formal$ = 232
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT

; 829  :     constexpr allocator(const allocator<_Other>&) noexcept {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
_New_proxy$ = 8
$T1 = 232
this$ = 288
_Al$ = 296
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT

; 1073 :     _CONSTEXPR20_CONTAINER void _Alloc_proxy(_Alloc&& _Al) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1074 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

  00024	ba 01 00 00 00	 mov	 edx, 1
  00029	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00030	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  0003d	48 89 45 08	 mov	 QWORD PTR _New_proxy$[rbp], rax

; 1075 :         _Construct_in_place(*_New_proxy, this);

  00041	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  0004f	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00056	48 8b 4d 08	 mov	 rcx, QWORD PTR _New_proxy$[rbp]
  0005a	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1076 :         _Myproxy            = _New_proxy;

  0005f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00066	48 8b 4d 08	 mov	 rcx, QWORD PTR _New_proxy$[rbp]
  0006a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1077 :         _New_proxy->_Mycont = this;

  0006d	48 8b 45 08	 mov	 rax, QWORD PTR _New_proxy$[rbp]
  00071	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00078	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1078 :     }

  0007b	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00082	5f		 pop	 rdi
  00083	5d		 pop	 rbp
  00084	c3		 ret	 0
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1353 :     _CONSTEXPR20_CONTAINER ~_Container_proxy_ptr12() {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1354 :         if (_Ptr) {

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0002a	74 1a		 je	 SHORT $LN2@Container_

; 1355 :             _Delete_plain_internal(_Al, _Ptr);

  0002c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00033	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00041	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
$LN2@Container_:

; 1356 :         }
; 1357 :     }

  00046	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004d	5f		 pop	 rdi
  0004e	5d		 pop	 rbp
  0004f	c3		 ret	 0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Al_$ = 264
_Mycont$ = 272
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT

; 1339 :     _CONSTEXPR20_CONTAINER _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00030	e8 00 00 00 00	 call	 ??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
  00035	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Al_$[rbp]
  00043	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1340 :         // create a new _Container_proxy pointing at _Mycont
; 1341 :         _Ptr = _Unfancy(_Al_.allocate(1));

  00047	ba 01 00 00 00	 mov	 edx, 1
  0004c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Al_$[rbp]
  00053	e8 00 00 00 00	 call	 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ; std::allocator<std::_Container_proxy>::allocate
  00058	48 8b c8	 mov	 rcx, rax
  0005b	e8 00 00 00 00	 call	 ??$_Unfancy@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@PEAU10@@Z ; std::_Unfancy<std::_Container_proxy>
  00060	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00067	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1342 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

  0006a	48 8b 8d 10 01
	00 00		 mov	 rcx, QWORD PTR _Mycont$[rbp]
  00071	e8 00 00 00 00	 call	 ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ; std::addressof<std::_Container_base12>
  00076	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  0007d	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00084	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0008e	e8 00 00 00 00	 call	 ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>

; 1343 :         _Mycont._Myproxy = _Ptr;

  00093	48 8b 85 10 01
	00 00		 mov	 rax, QWORD PTR _Mycont$[rbp]
  0009a	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a4	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1344 :     }

  000a7	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ae	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000b5	5f		 pop	 rdi
  000b6	5d		 pop	 rbp
  000b7	c3		 ret	 0
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z
_TEXT	SEGMENT
_Al$ = 224
_Ptr$ = 232
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 998  : _CONSTEXPR20_DYNALLOC void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 999  :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1000 :     using _Ty = typename _Alloc::value_type;
; 1001 :     _Ptr->~_Ty();
; 1002 :     _Deallocate_plain(_Al, _Ptr);

  00024	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  0002b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Al$[rbp]
  00032	e8 00 00 00 00	 call	 ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >

; 1003 : }

  00037	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003e	5f		 pop	 rdi
  0003f	5d		 pop	 rbp
  00040	c3		 ret	 0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT

; 838  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00024	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$0BA@@std@@YA_K_K@Z ; std::_Get_size_of_n<16>
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 840  :     }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?allocate@?$allocator@U_Container_proxy@std@@@std@@QEAAPEAU_Container_proxy@2@_K@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$min@_K@std@@YAAEB_KAEB_K0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$min@_K@std@@YAAEB_KAEB_K0@Z PROC			; std::min<unsigned __int64>, COMDAT

; 66   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1347750E_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 67   :     // return smaller of _Left and _Right
; 68   :     return _Right < _Left ? _Right : _Left;

  00024	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0002b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Left$[rbp]
  00032	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00035	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00038	73 10		 jae	 SHORT $LN3@min
  0003a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00041	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00048	eb 0e		 jmp	 SHORT $LN4@min
$LN3@min:
  0004a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00051	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@min:
  00058	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  0005f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00066	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 69   : }

  0006d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
??$min@_K@std@@YAAEB_KAEB_K0@Z ENDP			; std::min<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z
_TEXT	SEGMENT
_Val$ = 224
?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z PROC ; std::pointer_traits<char *>::pointer_to, COMDAT

; 196  :     _NODISCARD static _CONSTEXPR20 pointer pointer_to(_Reftype _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__12269DE6_xutility
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 197  :         return _STD addressof(_Val);

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  00026	e8 00 00 00 00	 call	 ??$addressof@D@std@@YAPEADAEAD@Z ; std::addressof<char>

; 198  :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z ENDP ; std::pointer_traits<char *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPEADPEAD@Z
_TEXT	SEGMENT
_Ptr$ = 224
??$_Unfancy@D@std@@YAPEADPEAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 288  : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E458E21C_xstddef
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 289  :     return _Ptr;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]

; 290  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$_Unfancy@D@std@@YAPEADPEAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\utility
;	COMDAT ??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z
_TEXT	SEGMENT
$T1 = 200
tv65 = 216
_Left$ = 256
_Right$ = 264
??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z PROC		; std::max<char *>, COMDAT

; 42   :     const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__1347750E_utility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 43   :     // return larger of _Left and _Right
; 44   :     return _Left < _Right ? _Right : _Left;

  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002b	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00032	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00035	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00038	73 10		 jae	 SHORT $LN3@max
  0003a	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00041	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
  00048	eb 0e		 jmp	 SHORT $LN4@max
$LN3@max:
  0004a	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  00051	48 89 85 d8 00
	00 00		 mov	 QWORD PTR tv65[rbp], rax
$LN4@max:
  00058	48 8b 85 d8 00
	00 00		 mov	 rax, QWORD PTR tv65[rbp]
  0005f	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00066	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR $T1[rbp]

; 45   : }

  0006d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00074	5f		 pop	 rdi
  00075	5d		 pop	 rbp
  00076	c3		 ret	 0
??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z ENDP		; std::max<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z
_TEXT	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
$T10 = 468
$T11 = 504
tv289 = 516
tv284 = 516
tv65 = 516
tv290 = 520
tv287 = 520
tv285 = 520
tv130 = 520
tv291 = 528
tv288 = 528
tv286 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Ch$ = 584
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 779  :     basic_ostream<char, _Traits>& _Ostr, char _Ch) { // insert a char into char stream

$LN23:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 48 02
	00 00		 sub	 rsp, 584		; 00000248H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001c	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  00021	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00026	f3 ab		 rep stosd
  00028	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR [rsp+616]
  00030	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00037	48 33 c5	 xor	 rax, rbp
  0003a	48 89 85 18 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C12F3EA4_ostream
  00048	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 780  :     using _Elem = char;
; 781  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 782  : 
; 783  :     ios_base::iostate _State = ios_base::goodbit;

  0004d	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 784  :     const typename _Myos::sentry _Ok(_Ostr);

  00054	48 8b 95 40 02
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  0005b	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0005f	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  00064	90		 npad	 1

; 785  : 
; 786  :     if (_Ok) { // state okay, insert

  00065	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00069	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0006e	0f b6 c0	 movzx	 eax, al
  00071	85 c0		 test	 eax, eax
  00073	0f 84 d5 02 00
	00		 je	 $LN8@operator

; 787  :         streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

  00079	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00080	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00083	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00087	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0008e	48 03 c8	 add	 rcx, rax
  00091	48 8b c1	 mov	 rax, rcx
  00094	48 8b c8	 mov	 rcx, rax
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  0009d	48 83 f8 01	 cmp	 rax, 1
  000a1	7f 0d		 jg	 SHORT $LN15@operator
  000a3	48 c7 85 08 02
	00 00 00 00 00
	00		 mov	 QWORD PTR tv130[rbp], 0
  000ae	eb 2e		 jmp	 SHORT $LN16@operator
$LN15@operator:
  000b0	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000b7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ba	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000be	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000c5	48 03 c8	 add	 rcx, rax
  000c8	48 8b c1	 mov	 rax, rcx
  000cb	48 8b c8	 mov	 rcx, rax
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000d4	48 ff c8	 dec	 rax
  000d7	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv130[rbp], rax
$LN16@operator:
  000de	48 8b 85 08 02
	00 00		 mov	 rax, QWORD PTR tv130[rbp]
  000e5	48 89 45 58	 mov	 QWORD PTR _Pad$4[rbp], rax

; 788  : 
; 789  :         _TRY_IO_BEGIN
; 790  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000e9	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000f7	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000fe	48 03 c8	 add	 rcx, rax
  00101	48 8b c1	 mov	 rax, rcx
  00104	48 8b c8	 mov	 rcx, rax
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  0010d	89 85 04 02 00
	00		 mov	 DWORD PTR tv65[rbp], eax
  00113	8b 85 04 02 00
	00		 mov	 eax, DWORD PTR tv65[rbp]
  00119	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0011e	83 f8 40	 cmp	 eax, 64			; 00000040H
  00121	0f 84 d0 00 00
	00		 je	 $LN10@operator

; 791  :             for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on left

  00127	eb 0b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  00129	48 8b 45 58	 mov	 rax, QWORD PTR _Pad$4[rbp]
  0012d	48 ff c8	 dec	 rax
  00130	48 89 45 58	 mov	 QWORD PTR _Pad$4[rbp], rax
$LN4@operator:
  00134	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  00138	0f 85 b9 00 00
	00		 jne	 $LN10@operator
  0013e	48 83 7d 58 00	 cmp	 QWORD PTR _Pad$4[rbp], 0
  00143	0f 8e ae 00 00
	00		 jle	 $LN10@operator

; 792  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00149	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00150	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00153	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00157	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0015e	48 03 c8	 add	 rcx, rax
  00161	48 8b c1	 mov	 rax, rcx
  00164	48 8b c8	 mov	 rcx, rax
  00167	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  0016d	88 85 04 02 00
	00		 mov	 BYTE PTR tv284[rbp], al
  00173	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0017a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0017d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00181	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00188	48 03 c8	 add	 rcx, rax
  0018b	48 8b c1	 mov	 rax, rcx
  0018e	48 8b c8	 mov	 rcx, rax
  00191	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00197	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv285[rbp], rax
  0019e	0f b6 95 04 02
	00 00		 movzx	 edx, BYTE PTR tv284[rbp]
  001a5	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv285[rbp]
  001ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001b2	89 85 10 02 00
	00		 mov	 DWORD PTR tv286[rbp], eax
  001b8	8b 85 10 02 00
	00		 mov	 eax, DWORD PTR tv286[rbp]
  001be	89 85 34 01 00
	00		 mov	 DWORD PTR $T5[rbp], eax
  001c4	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  001c9	89 85 54 01 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  001cf	48 8d 95 34 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  001d6	48 8d 8d 54 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  001dd	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  001e2	0f b6 c0	 movzx	 eax, al
  001e5	85 c0		 test	 eax, eax
  001e7	74 09		 je	 SHORT $LN11@operator

; 793  :                     _State |= ios_base::badbit;

  001e9	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  001ec	83 c8 04	 or	 eax, 4
  001ef	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN11@operator:

; 794  :                 }
; 795  :             }

  001f2	e9 32 ff ff ff	 jmp	 $LN2@operator
$LN10@operator:

; 796  :         }
; 797  : 
; 798  :         if (_State == ios_base::goodbit && _Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ch))) {

  001f7	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  001fb	75 7f		 jne	 SHORT $LN12@operator
  001fd	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00204	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00207	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0020b	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00212	48 03 c8	 add	 rcx, rax
  00215	48 8b c1	 mov	 rax, rcx
  00218	48 8b c8	 mov	 rcx, rax
  0021b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00221	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv287[rbp], rax
  00228	0f b6 95 48 02
	00 00		 movzx	 edx, BYTE PTR _Ch$[rbp]
  0022f	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv287[rbp]
  00236	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  0023c	89 85 10 02 00
	00		 mov	 DWORD PTR tv288[rbp], eax
  00242	8b 85 10 02 00
	00		 mov	 eax, DWORD PTR tv288[rbp]
  00248	89 85 74 01 00
	00		 mov	 DWORD PTR $T7[rbp], eax
  0024e	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00253	89 85 94 01 00
	00		 mov	 DWORD PTR $T8[rbp], eax
  00259	48 8d 95 74 01
	00 00		 lea	 rdx, QWORD PTR $T7[rbp]
  00260	48 8d 8d 94 01
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00267	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0026c	0f b6 c0	 movzx	 eax, al
  0026f	85 c0		 test	 eax, eax
  00271	74 09		 je	 SHORT $LN12@operator

; 799  :             _State |= ios_base::badbit;

  00273	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00276	83 c8 04	 or	 eax, 4
  00279	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN12@operator:

; 800  :         }
; 801  : 
; 802  :         for (; _State == ios_base::goodbit && 0 < _Pad; --_Pad) { // pad on right

  0027c	eb 0b		 jmp	 SHORT $LN7@operator
$LN5@operator:
  0027e	48 8b 45 58	 mov	 rax, QWORD PTR _Pad$4[rbp]
  00282	48 ff c8	 dec	 rax
  00285	48 89 45 58	 mov	 QWORD PTR _Pad$4[rbp], rax
$LN7@operator:
  00289	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  0028d	0f 85 b9 00 00
	00		 jne	 $LN6@operator
  00293	48 83 7d 58 00	 cmp	 QWORD PTR _Pad$4[rbp], 0
  00298	0f 8e ae 00 00
	00		 jle	 $LN6@operator

; 803  :             if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0029e	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002a5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002a8	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002ac	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002b3	48 03 c8	 add	 rcx, rax
  002b6	48 8b c1	 mov	 rax, rcx
  002b9	48 8b c8	 mov	 rcx, rax
  002bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002c2	88 85 04 02 00
	00		 mov	 BYTE PTR tv289[rbp], al
  002c8	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002cf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002d2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002d6	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002dd	48 03 c8	 add	 rcx, rax
  002e0	48 8b c1	 mov	 rax, rcx
  002e3	48 8b c8	 mov	 rcx, rax
  002e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  002ec	48 89 85 08 02
	00 00		 mov	 QWORD PTR tv290[rbp], rax
  002f3	0f b6 95 04 02
	00 00		 movzx	 edx, BYTE PTR tv289[rbp]
  002fa	48 8b 8d 08 02
	00 00		 mov	 rcx, QWORD PTR tv290[rbp]
  00301	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  00307	89 85 10 02 00
	00		 mov	 DWORD PTR tv291[rbp], eax
  0030d	8b 85 10 02 00
	00		 mov	 eax, DWORD PTR tv291[rbp]
  00313	89 85 b4 01 00
	00		 mov	 DWORD PTR $T9[rbp], eax
  00319	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0031e	89 85 d4 01 00
	00		 mov	 DWORD PTR $T10[rbp], eax
  00324	48 8d 95 b4 01
	00 00		 lea	 rdx, QWORD PTR $T9[rbp]
  0032b	48 8d 8d d4 01
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00332	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00337	0f b6 c0	 movzx	 eax, al
  0033a	85 c0		 test	 eax, eax
  0033c	74 09		 je	 SHORT $LN13@operator

; 804  :                 _State |= ios_base::badbit;

  0033e	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00341	83 c8 04	 or	 eax, 4
  00344	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN13@operator:

; 805  :             }
; 806  :         }

  00347	e9 32 ff ff ff	 jmp	 $LN5@operator
$LN6@operator:
  0034c	eb 00		 jmp	 SHORT $LN8@operator
$LN21@operator:
$LN8@operator:

; 807  :         _CATCH_IO_(ios_base, _Ostr)
; 808  :     }
; 809  : 
; 810  :     _Ostr.width(0);

  0034e	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00355	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00358	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0035c	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00363	48 03 c8	 add	 rcx, rax
  00366	48 8b c1	 mov	 rax, rcx
  00369	33 d2		 xor	 edx, edx
  0036b	48 8b c8	 mov	 rcx, rax
  0036e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z

; 811  :     _Ostr.setstate(_State);

  00374	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0037b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0037e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00382	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00389	48 03 c8	 add	 rcx, rax
  0038c	48 8b c1	 mov	 rax, rcx
  0038f	45 33 c0	 xor	 r8d, r8d
  00392	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  00395	48 8b c8	 mov	 rcx, rax
  00398	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 812  :     return _Ostr;

  0039e	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  003a5	48 89 85 f8 01
	00 00		 mov	 QWORD PTR $T11[rbp], rax
  003ac	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  003b0	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003b5	48 8b 85 f8 01
	00 00		 mov	 rax, QWORD PTR $T11[rbp]

; 813  : }

  003bc	48 8b f8	 mov	 rdi, rax
  003bf	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  003c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$rtcFrameData
  003ca	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003cf	48 8b c7	 mov	 rax, rdi
  003d2	48 8b 8d 18 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  003d9	48 33 cd	 xor	 rcx, rbp
  003dc	e8 00 00 00 00	 call	 __security_check_cookie
  003e1	48 8d a5 28 02
	00 00		 lea	 rsp, QWORD PTR [rbp+552]
  003e8	5f		 pop	 rdi
  003e9	5d		 pop	 rbp
  003ea	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
$T10 = 468
$T11 = 504
tv289 = 516
tv284 = 516
tv65 = 516
tv290 = 520
tv287 = 520
tv285 = 520
tv130 = 520
tv291 = 528
tv288 = 528
tv286 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Ch$ = 584
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
$T10 = 468
$T11 = 504
tv289 = 516
tv284 = 516
tv65 = 516
tv290 = 520
tv287 = 520
tv285 = 520
tv130 = 520
tv291 = 528
tv288 = 528
tv286 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Ch$ = 584
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 807  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$0:
  00014	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN21@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
$T10 = 468
$T11 = 504
tv289 = 516
tv284 = 516
tv65 = 516
tv290 = 520
tv287 = 520
tv285 = 520
tv130 = 520
tv291 = 528
tv288 = 528
tv286 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Ch$ = 584
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 28	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Ok$ = 40
_Pad$4 = 88
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
$T10 = 468
$T11 = 504
tv289 = 516
tv284 = 516
tv65 = 516
tv290 = 520
tv287 = 520
tv285 = 520
tv130 = 520
tv291 = 528
tv288 = 528
tv286 = 528
__$ArrayPad$ = 536
_Ostr$ = 576
_Ch$ = 584
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 807  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z$0:
  00014	48 8b 85 40 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 40 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN21@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
tv66 = 192
_Ostr$ = 240
_Str$ = 248
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 4982 :     basic_ostream<_Elem, _Traits>& _Ostr, const basic_string<_Elem, _Traits, _Alloc>& _Str) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4983 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  00024	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  0002b	e8 00 00 00 00	 call	 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
  00030	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv66[rbp], rax
  00037	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Str$[rbp]
  0003e	e8 00 00 00 00	 call	 ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
  00043	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv66[rbp]
  0004a	4c 8b c1	 mov	 r8, rcx
  0004d	48 8b d0	 mov	 rdx, rax
  00050	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00057	e8 00 00 00 00	 call	 ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z ; std::_Insert_string<char,std::char_traits<char>,unsigned __int64>

; 4984 : }

  0005c	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00063	5f		 pop	 rdi
  00064	5d		 pop	 rbp
  00065	c3		 ret	 0
??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Rahul Kumar\source\repos\Ch04_02_sol\Ch04_02\Ch04_02.cpp
;	COMDAT main
_TEXT	SEGMENT
main	PROC						; COMDAT

; 11   : {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__76BBE5F6_Ch04_02@cpp
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 12   : 	UnpackU32_U64();

  0001b	e8 00 00 00 00	 call	 ?UnpackU32_U64@@YAXXZ	; UnpackU32_U64

; 13   : 	PackI32_I16();

  00020	e8 00 00 00 00	 call	 ?PackI32_I16@@YAXXZ	; PackI32_I16

; 14   : 	return 0;

  00025	33 c0		 xor	 eax, eax

; 15   : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fc_Line@@YAXXZ
text$yd	SEGMENT
??__Fc_Line@@YAXXZ PROC					; `dynamic atexit destructor for 'c_Line'', COMDAT
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?c_Line@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B
  00016	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00022	5f		 pop	 rdi
  00023	5d		 pop	 rbp
  00024	c3		 ret	 0
??__Fc_Line@@YAXXZ ENDP					; `dynamic atexit destructor for 'c_Line''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Rahul Kumar\source\repos\Ch04_02_sol\Ch04_02\Ch04_02.cpp
;	COMDAT ??__Ec_Line@@YAXXZ
text$di	SEGMENT
??__Ec_Line@@YAXXZ PROC					; `dynamic initializer for 'c_Line'', COMDAT

; 9    : static const std::string c_Line(82, '-');

  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__76BBE5F6_Ch04_02@cpp
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001b	41 b0 2d	 mov	 r8b, 45			; 0000002dH
  0001e	ba 52 00 00 00	 mov	 edx, 82			; 00000052H
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?c_Line@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B
  0002a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??__Fc_Line@@YAXXZ ; `dynamic atexit destructor for 'c_Line''
  00036	e8 00 00 00 00	 call	 atexit
  0003b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00042	5f		 pop	 rdi
  00043	5d		 pop	 rbp
  00044	c3		 ret	 0
??__Ec_Line@@YAXXZ ENDP					; `dynamic initializer for 'c_Line''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Rahul Kumar\source\repos\Ch04_02_sol\Ch04_02\Ch04_02.cpp
;	COMDAT ?PackI32_I16@@YAXXZ
_TEXT	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 212
$T6 = 632
$T7 = 696
$T8 = 760
$T9 = 824
$T10 = 888
$T11 = 952
tv250 = 1000
tv249 = 1000
tv248 = 1000
tv247 = 1000
tv246 = 1000
tv245 = 1000
tv244 = 1008
tv242 = 1008
tv240 = 1008
tv238 = 1008
tv236 = 1008
tv234 = 1008
__$ArrayPad$ = 1016
?PackI32_I16@@YAXXZ PROC				; PackI32_I16, COMDAT

; 40   : {

  00000	41 55		 push	 r13
  00002	55		 push	 rbp
  00003	57		 push	 rdi
  00004	48 81 ec 40 04
	00 00		 sub	 rsp, 1088		; 00000440H
  0000b	4c 8d 6c 24 20	 lea	 r13, QWORD PTR [rsp+32]
  00010	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00015	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00019	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001e	b9 a8 00 00 00	 mov	 ecx, 168		; 000000a8H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	49 33 c5	 xor	 rax, r13
  00034	48 89 85 f8 03
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__76BBE5F6_Ch04_02@cpp
  00042	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 41   : 	YmmVal a, b, c;
; 42   : 	const char nl = '\n';

  00047	c6 85 d4 00 00
	00 0a		 mov	 BYTE PTR nl$[rbp], 10

; 43   : 	a.m_I32[0] = 10; b.m_I32[0] = 32768;

  0004e	b8 04 00 00 00	 mov	 eax, 4
  00053	48 6b c0 00	 imul	 rax, rax, 0
  00057	c7 44 05 20 0a
	00 00 00	 mov	 DWORD PTR a$[rbp+rax], 10
  0005f	b8 04 00 00 00	 mov	 eax, 4
  00064	48 6b c0 00	 imul	 rax, rax, 0
  00068	c7 44 05 60 00
	80 00 00	 mov	 DWORD PTR b$[rbp+rax], 32768 ; 00008000H

; 44   : 	a.m_I32[1] = -200000; b.m_I32[1] = 6500;

  00070	b8 04 00 00 00	 mov	 eax, 4
  00075	48 6b c0 01	 imul	 rax, rax, 1
  00079	c7 44 05 20 c0
	f2 fc ff	 mov	 DWORD PTR a$[rbp+rax], -200000 ; fffffffffffcf2c0H
  00081	b8 04 00 00 00	 mov	 eax, 4
  00086	48 6b c0 01	 imul	 rax, rax, 1
  0008a	c7 44 05 60 64
	19 00 00	 mov	 DWORD PTR b$[rbp+rax], 6500 ; 00001964H

; 45   : 	a.m_I32[2] = 300000; b.m_I32[2] = 42000;

  00092	b8 04 00 00 00	 mov	 eax, 4
  00097	48 6b c0 02	 imul	 rax, rax, 2
  0009b	c7 44 05 20 e0
	93 04 00	 mov	 DWORD PTR a$[rbp+rax], 300000 ; 000493e0H
  000a3	b8 04 00 00 00	 mov	 eax, 4
  000a8	48 6b c0 02	 imul	 rax, rax, 2
  000ac	c7 44 05 60 10
	a4 00 00	 mov	 DWORD PTR b$[rbp+rax], 42000 ; 0000a410H

; 46   : 	a.m_I32[3] = -4000; b.m_I32[3] = -68000;

  000b4	b8 04 00 00 00	 mov	 eax, 4
  000b9	48 6b c0 03	 imul	 rax, rax, 3
  000bd	c7 44 05 20 60
	f0 ff ff	 mov	 DWORD PTR a$[rbp+rax], -4000 ; fffffffffffff060H
  000c5	b8 04 00 00 00	 mov	 eax, 4
  000ca	48 6b c0 03	 imul	 rax, rax, 3
  000ce	c7 44 05 60 60
	f6 fe ff	 mov	 DWORD PTR b$[rbp+rax], -68000 ; fffffffffffef660H

; 47   : 	a.m_I32[4] = 9000; b.m_I32[4] = 25000;

  000d6	b8 04 00 00 00	 mov	 eax, 4
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	c7 44 05 20 28
	23 00 00	 mov	 DWORD PTR a$[rbp+rax], 9000 ; 00002328H
  000e7	b8 04 00 00 00	 mov	 eax, 4
  000ec	48 6b c0 04	 imul	 rax, rax, 4
  000f0	c7 44 05 60 a8
	61 00 00	 mov	 DWORD PTR b$[rbp+rax], 25000 ; 000061a8H

; 48   : 	a.m_I32[5] = 80000; b.m_I32[5] = 500000;

  000f8	b8 04 00 00 00	 mov	 eax, 4
  000fd	48 6b c0 05	 imul	 rax, rax, 5
  00101	c7 44 05 20 80
	38 01 00	 mov	 DWORD PTR a$[rbp+rax], 80000 ; 00013880H
  00109	b8 04 00 00 00	 mov	 eax, 4
  0010e	48 6b c0 05	 imul	 rax, rax, 5
  00112	c7 44 05 60 20
	a1 07 00	 mov	 DWORD PTR b$[rbp+rax], 500000 ; 0007a120H

; 49   : 	a.m_I32[6] = 200; b.m_I32[6] = -7000;

  0011a	b8 04 00 00 00	 mov	 eax, 4
  0011f	48 6b c0 06	 imul	 rax, rax, 6
  00123	c7 44 05 20 c8
	00 00 00	 mov	 DWORD PTR a$[rbp+rax], 200 ; 000000c8H
  0012b	b8 04 00 00 00	 mov	 eax, 4
  00130	48 6b c0 06	 imul	 rax, rax, 6
  00134	c7 44 05 60 a8
	e4 ff ff	 mov	 DWORD PTR b$[rbp+rax], -7000 ; ffffffffffffe4a8H

; 50   : 	a.m_I32[7] = -32769; b.m_I32[7] = 12500;

  0013c	b8 04 00 00 00	 mov	 eax, 4
  00141	48 6b c0 07	 imul	 rax, rax, 7
  00145	c7 44 05 20 ff
	7f ff ff	 mov	 DWORD PTR a$[rbp+rax], -32769 ; ffffffffffff7fffH
  0014d	b8 04 00 00 00	 mov	 eax, 4
  00152	48 6b c0 07	 imul	 rax, rax, 7
  00156	c7 44 05 60 d4
	30 00 00	 mov	 DWORD PTR b$[rbp+rax], 12500 ; 000030d4H

; 51   : 	PackI32_I16_Iavx2(&c, &a, &b);

  0015e	4c 8d 45 60	 lea	 r8, QWORD PTR b$[rbp]
  00162	48 8d 55 20	 lea	 rdx, QWORD PTR a$[rbp]
  00166	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR c$[rbp]
  0016d	e8 00 00 00 00	 call	 ?PackI32_I16_Iavx2@@YAXPEAUYmmVal@@PEBU1@1@Z ; PackI32_I16_Iavx2

; 52   : 	std::cout << "\nResults for PackI32_I16_Iavx2\n" << c_Line << nl;

  00172	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@MGNGEGIN@?6Results?5for?5PackI32_I16_Iavx2?6@
  00179	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00180	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00185	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?c_Line@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B
  0018c	48 8b c8	 mov	 rcx, rax
  0018f	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00194	b2 0a		 mov	 dl, 10
  00196	48 8b c8	 mov	 rcx, rax
  00199	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >

; 53   : 	std::cout << "a lo " << a.ToStringI32(0) << nl;

  0019e	45 33 c0	 xor	 r8d, r8d
  001a1	48 8d 95 78 02
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  001a8	48 8d 4d 20	 lea	 rcx, QWORD PTR a$[rbp]
  001ac	e8 00 00 00 00	 call	 ?ToStringI32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringI32
  001b1	48 89 85 e8 03
	00 00		 mov	 QWORD PTR tv245[rbp], rax
  001b8	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR tv245[rbp]
  001bf	48 89 85 f0 03
	00 00		 mov	 QWORD PTR tv234[rbp], rax
  001c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05OLKLENKD@a?5lo?5@
  001cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001d4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001d9	48 8b 95 f0 03
	00 00		 mov	 rdx, QWORD PTR tv234[rbp]
  001e0	48 8b c8	 mov	 rcx, rax
  001e3	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  001e8	b2 0a		 mov	 dl, 10
  001ea	48 8b c8	 mov	 rcx, rax
  001ed	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  001f2	90		 npad	 1
  001f3	48 8d 8d 78 02
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  001fa	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 54   : 	std::cout << "a hi " << a.ToStringI32(1) << nl << nl;

  001ff	41 b8 01 00 00
	00		 mov	 r8d, 1
  00205	48 8d 95 b8 02
	00 00		 lea	 rdx, QWORD PTR $T7[rbp]
  0020c	48 8d 4d 20	 lea	 rcx, QWORD PTR a$[rbp]
  00210	e8 00 00 00 00	 call	 ?ToStringI32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringI32
  00215	48 89 85 e8 03
	00 00		 mov	 QWORD PTR tv246[rbp], rax
  0021c	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR tv246[rbp]
  00223	48 89 85 f0 03
	00 00		 mov	 QWORD PTR tv236[rbp], rax
  0022a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GAEEKGEG@a?5hi?5@
  00231	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00238	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0023d	48 8b 95 f0 03
	00 00		 mov	 rdx, QWORD PTR tv236[rbp]
  00244	48 8b c8	 mov	 rcx, rax
  00247	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0024c	b2 0a		 mov	 dl, 10
  0024e	48 8b c8	 mov	 rcx, rax
  00251	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00256	b2 0a		 mov	 dl, 10
  00258	48 8b c8	 mov	 rcx, rax
  0025b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00260	90		 npad	 1
  00261	48 8d 8d b8 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00268	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 55   : 	std::cout << "b lo " << b.ToStringI32(0) << nl;

  0026d	45 33 c0	 xor	 r8d, r8d
  00270	48 8d 95 f8 02
	00 00		 lea	 rdx, QWORD PTR $T8[rbp]
  00277	48 8d 4d 60	 lea	 rcx, QWORD PTR b$[rbp]
  0027b	e8 00 00 00 00	 call	 ?ToStringI32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringI32
  00280	48 89 85 e8 03
	00 00		 mov	 QWORD PTR tv247[rbp], rax
  00287	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR tv247[rbp]
  0028e	48 89 85 f0 03
	00 00		 mov	 QWORD PTR tv238[rbp], rax
  00295	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GNDPDPAN@b?5lo?5@
  0029c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002a3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  002a8	48 8b 95 f0 03
	00 00		 mov	 rdx, QWORD PTR tv238[rbp]
  002af	48 8b c8	 mov	 rcx, rax
  002b2	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  002b7	b2 0a		 mov	 dl, 10
  002b9	48 8b c8	 mov	 rcx, rax
  002bc	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  002c1	90		 npad	 1
  002c2	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  002c9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 56   : 	std::cout << "b hi " << b.ToStringI32(1) << nl << nl;

  002ce	41 b8 01 00 00
	00		 mov	 r8d, 1
  002d4	48 8d 95 38 03
	00 00		 lea	 rdx, QWORD PTR $T9[rbp]
  002db	48 8d 4d 60	 lea	 rcx, QWORD PTR b$[rbp]
  002df	e8 00 00 00 00	 call	 ?ToStringI32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringI32
  002e4	48 89 85 e8 03
	00 00		 mov	 QWORD PTR tv248[rbp], rax
  002eb	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR tv248[rbp]
  002f2	48 89 85 f0 03
	00 00		 mov	 QWORD PTR tv240[rbp], rax
  002f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05OGNANEOI@b?5hi?5@
  00300	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00307	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0030c	48 8b 95 f0 03
	00 00		 mov	 rdx, QWORD PTR tv240[rbp]
  00313	48 8b c8	 mov	 rcx, rax
  00316	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0031b	b2 0a		 mov	 dl, 10
  0031d	48 8b c8	 mov	 rcx, rax
  00320	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00325	b2 0a		 mov	 dl, 10
  00327	48 8b c8	 mov	 rcx, rax
  0032a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  0032f	90		 npad	 1
  00330	48 8d 8d 38 03
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00337	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 57   : 	std::cout << "c lo " << c.ToStringI16(0) << nl;

  0033c	45 33 c0	 xor	 r8d, r8d
  0033f	48 8d 95 78 03
	00 00		 lea	 rdx, QWORD PTR $T10[rbp]
  00346	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR c$[rbp]
  0034d	e8 00 00 00 00	 call	 ?ToStringI16@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringI16
  00352	48 89 85 e8 03
	00 00		 mov	 QWORD PTR tv249[rbp], rax
  00359	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR tv249[rbp]
  00360	48 89 85 f0 03
	00 00		 mov	 QWORD PTR tv242[rbp], rax
  00367	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KGGDOMKI@c?5lo?5@
  0036e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00375	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0037a	48 8b 95 f0 03
	00 00		 mov	 rdx, QWORD PTR tv242[rbp]
  00381	48 8b c8	 mov	 rcx, rax
  00384	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00389	b2 0a		 mov	 dl, 10
  0038b	48 8b c8	 mov	 rcx, rax
  0038e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00393	90		 npad	 1
  00394	48 8d 8d 78 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  0039b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 58   : 	std::cout << "c hi " << c.ToStringI16(1) << nl << nl;

  003a0	41 b8 01 00 00
	00		 mov	 r8d, 1
  003a6	48 8d 95 b8 03
	00 00		 lea	 rdx, QWORD PTR $T11[rbp]
  003ad	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR c$[rbp]
  003b4	e8 00 00 00 00	 call	 ?ToStringI16@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringI16
  003b9	48 89 85 e8 03
	00 00		 mov	 QWORD PTR tv250[rbp], rax
  003c0	48 8b 85 e8 03
	00 00		 mov	 rax, QWORD PTR tv250[rbp]
  003c7	48 89 85 f0 03
	00 00		 mov	 QWORD PTR tv244[rbp], rax
  003ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05CNIMAHEN@c?5hi?5@
  003d5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003dc	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  003e1	48 8b 95 f0 03
	00 00		 mov	 rdx, QWORD PTR tv244[rbp]
  003e8	48 8b c8	 mov	 rcx, rax
  003eb	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  003f0	b2 0a		 mov	 dl, 10
  003f2	48 8b c8	 mov	 rcx, rax
  003f5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  003fa	b2 0a		 mov	 dl, 10
  003fc	48 8b c8	 mov	 rcx, rax
  003ff	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00404	90		 npad	 1
  00405	48 8d 8d b8 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  0040c	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 59   : }

  00411	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00415	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?PackI32_I16@@YAXXZ$rtcFrameData
  0041c	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00421	48 8b 8d f8 03
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00428	49 33 cd	 xor	 rcx, r13
  0042b	e8 00 00 00 00	 call	 __security_check_cookie
  00430	49 8d a5 20 04
	00 00		 lea	 rsp, QWORD PTR [r13+1056]
  00437	5f		 pop	 rdi
  00438	5d		 pop	 rbp
  00439	41 5d		 pop	 r13
  0043b	c3		 ret	 0
?PackI32_I16@@YAXXZ ENDP				; PackI32_I16
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 212
$T6 = 632
$T7 = 696
$T8 = 760
$T9 = 824
$T10 = 888
$T11 = 952
tv250 = 1000
tv249 = 1000
tv248 = 1000
tv247 = 1000
tv246 = 1000
tv245 = 1000
tv244 = 1008
tv242 = 1008
tv240 = 1008
tv238 = 1008
tv236 = 1008
tv234 = 1008
__$ArrayPad$ = 1016
?dtor$0@?0??PackI32_I16@@YAXXZ@4HA PROC			; `PackI32_I16'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 78 02
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$0@?0??PackI32_I16@@YAXXZ@4HA ENDP			; `PackI32_I16'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 212
$T6 = 632
$T7 = 696
$T8 = 760
$T9 = 824
$T10 = 888
$T11 = 952
tv250 = 1000
tv249 = 1000
tv248 = 1000
tv247 = 1000
tv246 = 1000
tv245 = 1000
tv244 = 1008
tv242 = 1008
tv240 = 1008
tv238 = 1008
tv236 = 1008
tv234 = 1008
__$ArrayPad$ = 1016
?dtor$1@?0??PackI32_I16@@YAXXZ@4HA PROC			; `PackI32_I16'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d b8 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$1@?0??PackI32_I16@@YAXXZ@4HA ENDP			; `PackI32_I16'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 212
$T6 = 632
$T7 = 696
$T8 = 760
$T9 = 824
$T10 = 888
$T11 = 952
tv250 = 1000
tv249 = 1000
tv248 = 1000
tv247 = 1000
tv246 = 1000
tv245 = 1000
tv244 = 1008
tv242 = 1008
tv240 = 1008
tv238 = 1008
tv236 = 1008
tv234 = 1008
__$ArrayPad$ = 1016
?dtor$2@?0??PackI32_I16@@YAXXZ@4HA PROC			; `PackI32_I16'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$2@?0??PackI32_I16@@YAXXZ@4HA ENDP			; `PackI32_I16'::`1'::dtor$2
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 212
$T6 = 632
$T7 = 696
$T8 = 760
$T9 = 824
$T10 = 888
$T11 = 952
tv250 = 1000
tv249 = 1000
tv248 = 1000
tv247 = 1000
tv246 = 1000
tv245 = 1000
tv244 = 1008
tv242 = 1008
tv240 = 1008
tv238 = 1008
tv236 = 1008
tv234 = 1008
__$ArrayPad$ = 1016
?dtor$3@?0??PackI32_I16@@YAXXZ@4HA PROC			; `PackI32_I16'::`1'::dtor$3
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 38 03
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$3@?0??PackI32_I16@@YAXXZ@4HA ENDP			; `PackI32_I16'::`1'::dtor$3
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 212
$T6 = 632
$T7 = 696
$T8 = 760
$T9 = 824
$T10 = 888
$T11 = 952
tv250 = 1000
tv249 = 1000
tv248 = 1000
tv247 = 1000
tv246 = 1000
tv245 = 1000
tv244 = 1008
tv242 = 1008
tv240 = 1008
tv238 = 1008
tv236 = 1008
tv234 = 1008
__$ArrayPad$ = 1016
?dtor$4@?0??PackI32_I16@@YAXXZ@4HA PROC			; `PackI32_I16'::`1'::dtor$4
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 78 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$4@?0??PackI32_I16@@YAXXZ@4HA ENDP			; `PackI32_I16'::`1'::dtor$4
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 212
$T6 = 632
$T7 = 696
$T8 = 760
$T9 = 824
$T10 = 888
$T11 = 952
tv250 = 1000
tv249 = 1000
tv248 = 1000
tv247 = 1000
tv246 = 1000
tv245 = 1000
tv244 = 1008
tv242 = 1008
tv240 = 1008
tv238 = 1008
tv236 = 1008
tv234 = 1008
__$ArrayPad$ = 1016
?dtor$5@?0??PackI32_I16@@YAXXZ@4HA PROC			; `PackI32_I16'::`1'::dtor$5
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d b8 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$5@?0??PackI32_I16@@YAXXZ@4HA ENDP			; `PackI32_I16'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 212
$T6 = 632
$T7 = 696
$T8 = 760
$T9 = 824
$T10 = 888
$T11 = 952
tv250 = 1000
tv249 = 1000
tv248 = 1000
tv247 = 1000
tv246 = 1000
tv245 = 1000
tv244 = 1008
tv242 = 1008
tv240 = 1008
tv238 = 1008
tv236 = 1008
tv234 = 1008
__$ArrayPad$ = 1016
?dtor$0@?0??PackI32_I16@@YAXXZ@4HA PROC			; `PackI32_I16'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 78 02
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$0@?0??PackI32_I16@@YAXXZ@4HA ENDP			; `PackI32_I16'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 212
$T6 = 632
$T7 = 696
$T8 = 760
$T9 = 824
$T10 = 888
$T11 = 952
tv250 = 1000
tv249 = 1000
tv248 = 1000
tv247 = 1000
tv246 = 1000
tv245 = 1000
tv244 = 1008
tv242 = 1008
tv240 = 1008
tv238 = 1008
tv236 = 1008
tv234 = 1008
__$ArrayPad$ = 1016
?dtor$1@?0??PackI32_I16@@YAXXZ@4HA PROC			; `PackI32_I16'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d b8 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$1@?0??PackI32_I16@@YAXXZ@4HA ENDP			; `PackI32_I16'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 212
$T6 = 632
$T7 = 696
$T8 = 760
$T9 = 824
$T10 = 888
$T11 = 952
tv250 = 1000
tv249 = 1000
tv248 = 1000
tv247 = 1000
tv246 = 1000
tv245 = 1000
tv244 = 1008
tv242 = 1008
tv240 = 1008
tv238 = 1008
tv236 = 1008
tv234 = 1008
__$ArrayPad$ = 1016
?dtor$2@?0??PackI32_I16@@YAXXZ@4HA PROC			; `PackI32_I16'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d f8 02
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$2@?0??PackI32_I16@@YAXXZ@4HA ENDP			; `PackI32_I16'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 212
$T6 = 632
$T7 = 696
$T8 = 760
$T9 = 824
$T10 = 888
$T11 = 952
tv250 = 1000
tv249 = 1000
tv248 = 1000
tv247 = 1000
tv246 = 1000
tv245 = 1000
tv244 = 1008
tv242 = 1008
tv240 = 1008
tv238 = 1008
tv236 = 1008
tv234 = 1008
__$ArrayPad$ = 1016
?dtor$3@?0??PackI32_I16@@YAXXZ@4HA PROC			; `PackI32_I16'::`1'::dtor$3
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 38 03
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$3@?0??PackI32_I16@@YAXXZ@4HA ENDP			; `PackI32_I16'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 212
$T6 = 632
$T7 = 696
$T8 = 760
$T9 = 824
$T10 = 888
$T11 = 952
tv250 = 1000
tv249 = 1000
tv248 = 1000
tv247 = 1000
tv246 = 1000
tv245 = 1000
tv244 = 1008
tv242 = 1008
tv240 = 1008
tv238 = 1008
tv236 = 1008
tv234 = 1008
__$ArrayPad$ = 1016
?dtor$4@?0??PackI32_I16@@YAXXZ@4HA PROC			; `PackI32_I16'::`1'::dtor$4
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 78 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$4@?0??PackI32_I16@@YAXXZ@4HA ENDP			; `PackI32_I16'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 212
$T6 = 632
$T7 = 696
$T8 = 760
$T9 = 824
$T10 = 888
$T11 = 952
tv250 = 1000
tv249 = 1000
tv248 = 1000
tv247 = 1000
tv246 = 1000
tv245 = 1000
tv244 = 1008
tv242 = 1008
tv240 = 1008
tv238 = 1008
tv236 = 1008
tv234 = 1008
__$ArrayPad$ = 1016
?dtor$5@?0??PackI32_I16@@YAXXZ@4HA PROC			; `PackI32_I16'::`1'::dtor$5
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d b8 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$5@?0??PackI32_I16@@YAXXZ@4HA ENDP			; `PackI32_I16'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Rahul Kumar\source\repos\Ch04_02_sol\Ch04_02\Ch04_02.cpp
;	COMDAT ?UnpackU32_U64@@YAXXZ
_TEXT	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?UnpackU32_U64@@YAXXZ PROC				; UnpackU32_U64, COMDAT

; 17   : {

  00000	41 55		 push	 r13
  00002	55		 push	 rbp
  00003	57		 push	 rdi
  00004	48 81 ec e0 04
	00 00		 sub	 rsp, 1248		; 000004e0H
  0000b	4c 8d 6c 24 20	 lea	 r13, QWORD PTR [rsp+32]
  00010	48 8d 6c 24 40	 lea	 rbp, QWORD PTR [rsp+64]
  00015	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  00019	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001e	b9 d0 00 00 00	 mov	 ecx, 208		; 000000d0H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00031	49 33 c5	 xor	 rax, r13
  00034	48 89 85 98 04
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__76BBE5F6_Ch04_02@cpp
  00042	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 18   : 	YmmVal a, b, c[2];
; 19   : 	const char nl = '\n';

  00047	c6 85 f4 00 00
	00 0a		 mov	 BYTE PTR nl$[rbp], 10

; 20   : 	a.m_U32[0] = 0x00000000; b.m_U32[0] = 0x88888888;

  0004e	b8 04 00 00 00	 mov	 eax, 4
  00053	48 6b c0 00	 imul	 rax, rax, 0
  00057	c7 44 05 20 00
	00 00 00	 mov	 DWORD PTR a$[rbp+rax], 0
  0005f	b8 04 00 00 00	 mov	 eax, 4
  00064	48 6b c0 00	 imul	 rax, rax, 0
  00068	c7 44 05 60 88
	88 88 88	 mov	 DWORD PTR b$[rbp+rax], -2004318072 ; 88888888H

; 21   : 	a.m_U32[1] = 0x11111111; b.m_U32[1] = 0x99999999;

  00070	b8 04 00 00 00	 mov	 eax, 4
  00075	48 6b c0 01	 imul	 rax, rax, 1
  00079	c7 44 05 20 11
	11 11 11	 mov	 DWORD PTR a$[rbp+rax], 286331153 ; 11111111H
  00081	b8 04 00 00 00	 mov	 eax, 4
  00086	48 6b c0 01	 imul	 rax, rax, 1
  0008a	c7 44 05 60 99
	99 99 99	 mov	 DWORD PTR b$[rbp+rax], -1717986919 ; 99999999H

; 22   : 	a.m_U32[2] = 0x22222222; b.m_U32[2] = 0xaaaaaaaa;

  00092	b8 04 00 00 00	 mov	 eax, 4
  00097	48 6b c0 02	 imul	 rax, rax, 2
  0009b	c7 44 05 20 22
	22 22 22	 mov	 DWORD PTR a$[rbp+rax], 572662306 ; 22222222H
  000a3	b8 04 00 00 00	 mov	 eax, 4
  000a8	48 6b c0 02	 imul	 rax, rax, 2
  000ac	c7 44 05 60 aa
	aa aa aa	 mov	 DWORD PTR b$[rbp+rax], -1431655766 ; aaaaaaaaH

; 23   : 	a.m_U32[3] = 0x33333333; b.m_U32[3] = 0xbbbbbbbb;

  000b4	b8 04 00 00 00	 mov	 eax, 4
  000b9	48 6b c0 03	 imul	 rax, rax, 3
  000bd	c7 44 05 20 33
	33 33 33	 mov	 DWORD PTR a$[rbp+rax], 858993459 ; 33333333H
  000c5	b8 04 00 00 00	 mov	 eax, 4
  000ca	48 6b c0 03	 imul	 rax, rax, 3
  000ce	c7 44 05 60 bb
	bb bb bb	 mov	 DWORD PTR b$[rbp+rax], -1145324613 ; bbbbbbbbH

; 24   : 	a.m_U32[4] = 0x44444444; b.m_U32[4] = 0xcccccccc;

  000d6	b8 04 00 00 00	 mov	 eax, 4
  000db	48 6b c0 04	 imul	 rax, rax, 4
  000df	c7 44 05 20 44
	44 44 44	 mov	 DWORD PTR a$[rbp+rax], 1145324612 ; 44444444H
  000e7	b8 04 00 00 00	 mov	 eax, 4
  000ec	48 6b c0 04	 imul	 rax, rax, 4
  000f0	c7 44 05 60 cc
	cc cc cc	 mov	 DWORD PTR b$[rbp+rax], -858993460 ; ccccccccH

; 25   : 	a.m_U32[5] = 0x55555555; b.m_U32[5] = 0xdddddddd;

  000f8	b8 04 00 00 00	 mov	 eax, 4
  000fd	48 6b c0 05	 imul	 rax, rax, 5
  00101	c7 44 05 20 55
	55 55 55	 mov	 DWORD PTR a$[rbp+rax], 1431655765 ; 55555555H
  00109	b8 04 00 00 00	 mov	 eax, 4
  0010e	48 6b c0 05	 imul	 rax, rax, 5
  00112	c7 44 05 60 dd
	dd dd dd	 mov	 DWORD PTR b$[rbp+rax], -572662307 ; ddddddddH

; 26   : 	a.m_U32[6] = 0x66666666; b.m_U32[6] = 0xeeeeeeee;

  0011a	b8 04 00 00 00	 mov	 eax, 4
  0011f	48 6b c0 06	 imul	 rax, rax, 6
  00123	c7 44 05 20 66
	66 66 66	 mov	 DWORD PTR a$[rbp+rax], 1717986918 ; 66666666H
  0012b	b8 04 00 00 00	 mov	 eax, 4
  00130	48 6b c0 06	 imul	 rax, rax, 6
  00134	c7 44 05 60 ee
	ee ee ee	 mov	 DWORD PTR b$[rbp+rax], -286331154 ; eeeeeeeeH

; 27   : 	a.m_U32[7] = 0x77777777; b.m_U32[7] = 0xffffffff;

  0013c	b8 04 00 00 00	 mov	 eax, 4
  00141	48 6b c0 07	 imul	 rax, rax, 7
  00145	c7 44 05 20 77
	77 77 77	 mov	 DWORD PTR a$[rbp+rax], 2004318071 ; 77777777H
  0014d	b8 04 00 00 00	 mov	 eax, 4
  00152	48 6b c0 07	 imul	 rax, rax, 7
  00156	c7 44 05 60 ff
	ff ff ff	 mov	 DWORD PTR b$[rbp+rax], -1 ; ffffffffH

; 28   : 	UnpackU32_U64_Iavx2(c, &a, &b);

  0015e	4c 8d 45 60	 lea	 r8, QWORD PTR b$[rbp]
  00162	48 8d 55 20	 lea	 rdx, QWORD PTR a$[rbp]
  00166	48 8d 8d a0 00
	00 00		 lea	 rcx, QWORD PTR c$[rbp]
  0016d	e8 00 00 00 00	 call	 ?UnpackU32_U64_Iavx2@@YAXQEAUYmmVal@@PEBU1@1@Z ; UnpackU32_U64_Iavx2

; 29   : 	std::cout << "\nResults for UnpackU32_U64_Iavx2\n" << c_Line << nl;

  00172	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@LIOLKKFF@?6Results?5for?5UnpackU32_U64_Iavx@
  00179	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00180	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00185	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?c_Line@@3V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@B
  0018c	48 8b c8	 mov	 rcx, rax
  0018f	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00194	b2 0a		 mov	 dl, 10
  00196	48 8b c8	 mov	 rcx, rax
  00199	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >

; 30   : 	std::cout << "a lo " << a.ToStringX32(0) << nl;

  0019e	45 33 c0	 xor	 r8d, r8d
  001a1	48 8d 95 98 02
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  001a8	48 8d 4d 20	 lea	 rcx, QWORD PTR a$[rbp]
  001ac	e8 00 00 00 00	 call	 ?ToStringX32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringX32
  001b1	48 89 85 88 04
	00 00		 mov	 QWORD PTR tv288[rbp], rax
  001b8	48 8b 85 88 04
	00 00		 mov	 rax, QWORD PTR tv288[rbp]
  001bf	48 89 85 90 04
	00 00		 mov	 QWORD PTR tv273[rbp], rax
  001c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05OLKLENKD@a?5lo?5@
  001cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001d4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  001d9	48 8b 95 90 04
	00 00		 mov	 rdx, QWORD PTR tv273[rbp]
  001e0	48 8b c8	 mov	 rcx, rax
  001e3	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  001e8	b2 0a		 mov	 dl, 10
  001ea	48 8b c8	 mov	 rcx, rax
  001ed	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  001f2	90		 npad	 1
  001f3	48 8d 8d 98 02
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  001fa	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 31   : 	std::cout << "b lo " << b.ToStringX32(0) << nl << nl;

  001ff	45 33 c0	 xor	 r8d, r8d
  00202	48 8d 95 d8 02
	00 00		 lea	 rdx, QWORD PTR $T7[rbp]
  00209	48 8d 4d 60	 lea	 rcx, QWORD PTR b$[rbp]
  0020d	e8 00 00 00 00	 call	 ?ToStringX32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringX32
  00212	48 89 85 88 04
	00 00		 mov	 QWORD PTR tv289[rbp], rax
  00219	48 8b 85 88 04
	00 00		 mov	 rax, QWORD PTR tv289[rbp]
  00220	48 89 85 90 04
	00 00		 mov	 QWORD PTR tv275[rbp], rax
  00227	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GNDPDPAN@b?5lo?5@
  0022e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00235	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0023a	48 8b 95 90 04
	00 00		 mov	 rdx, QWORD PTR tv275[rbp]
  00241	48 8b c8	 mov	 rcx, rax
  00244	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00249	b2 0a		 mov	 dl, 10
  0024b	48 8b c8	 mov	 rcx, rax
  0024e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00253	b2 0a		 mov	 dl, 10
  00255	48 8b c8	 mov	 rcx, rax
  00258	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  0025d	90		 npad	 1
  0025e	48 8d 8d d8 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00265	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 32   : 	std::cout << "a hi " << a.ToStringX32(1) << nl;

  0026a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00270	48 8d 95 18 03
	00 00		 lea	 rdx, QWORD PTR $T8[rbp]
  00277	48 8d 4d 20	 lea	 rcx, QWORD PTR a$[rbp]
  0027b	e8 00 00 00 00	 call	 ?ToStringX32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringX32
  00280	48 89 85 88 04
	00 00		 mov	 QWORD PTR tv290[rbp], rax
  00287	48 8b 85 88 04
	00 00		 mov	 rax, QWORD PTR tv290[rbp]
  0028e	48 89 85 90 04
	00 00		 mov	 QWORD PTR tv277[rbp], rax
  00295	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GAEEKGEG@a?5hi?5@
  0029c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  002a3	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  002a8	48 8b 95 90 04
	00 00		 mov	 rdx, QWORD PTR tv277[rbp]
  002af	48 8b c8	 mov	 rcx, rax
  002b2	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  002b7	b2 0a		 mov	 dl, 10
  002b9	48 8b c8	 mov	 rcx, rax
  002bc	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  002c1	90		 npad	 1
  002c2	48 8d 8d 18 03
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  002c9	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 33   : 	std::cout << "b hi " << b.ToStringX32(1) << nl << nl;

  002ce	41 b8 01 00 00
	00		 mov	 r8d, 1
  002d4	48 8d 95 58 03
	00 00		 lea	 rdx, QWORD PTR $T9[rbp]
  002db	48 8d 4d 60	 lea	 rcx, QWORD PTR b$[rbp]
  002df	e8 00 00 00 00	 call	 ?ToStringX32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringX32
  002e4	48 89 85 88 04
	00 00		 mov	 QWORD PTR tv291[rbp], rax
  002eb	48 8b 85 88 04
	00 00		 mov	 rax, QWORD PTR tv291[rbp]
  002f2	48 89 85 90 04
	00 00		 mov	 QWORD PTR tv279[rbp], rax
  002f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05OGNANEOI@b?5hi?5@
  00300	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00307	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0030c	48 8b 95 90 04
	00 00		 mov	 rdx, QWORD PTR tv279[rbp]
  00313	48 8b c8	 mov	 rcx, rax
  00316	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0031b	b2 0a		 mov	 dl, 10
  0031d	48 8b c8	 mov	 rcx, rax
  00320	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00325	b2 0a		 mov	 dl, 10
  00327	48 8b c8	 mov	 rcx, rax
  0032a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  0032f	90		 npad	 1
  00330	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00337	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 34   : 	std::cout << "c[0] lo qword" << c[0].ToStringX64(0) << nl;

  0033c	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00341	48 6b c0 00	 imul	 rax, rax, 0
  00345	48 8d 84 05 a0
	00 00 00	 lea	 rax, QWORD PTR c$[rbp+rax]
  0034d	45 33 c0	 xor	 r8d, r8d
  00350	48 8d 95 98 03
	00 00		 lea	 rdx, QWORD PTR $T10[rbp]
  00357	48 8b c8	 mov	 rcx, rax
  0035a	e8 00 00 00 00	 call	 ?ToStringX64@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringX64
  0035f	48 89 85 88 04
	00 00		 mov	 QWORD PTR tv292[rbp], rax
  00366	48 8b 85 88 04
	00 00		 mov	 rax, QWORD PTR tv292[rbp]
  0036d	48 89 85 90 04
	00 00		 mov	 QWORD PTR tv281[rbp], rax
  00374	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@BKOJOPKH@c?$FL0?$FN?5lo?5qword@
  0037b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00382	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00387	48 8b 95 90 04
	00 00		 mov	 rdx, QWORD PTR tv281[rbp]
  0038e	48 8b c8	 mov	 rcx, rax
  00391	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00396	b2 0a		 mov	 dl, 10
  00398	48 8b c8	 mov	 rcx, rax
  0039b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  003a0	90		 npad	 1
  003a1	48 8d 8d 98 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  003a8	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 35   : 	std::cout << "c[0] hi qword" << c[0].ToStringX64(1) << nl << nl;

  003ad	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  003b2	48 6b c0 00	 imul	 rax, rax, 0
  003b6	48 8d 84 05 a0
	00 00 00	 lea	 rax, QWORD PTR c$[rbp+rax]
  003be	41 b8 01 00 00
	00		 mov	 r8d, 1
  003c4	48 8d 95 d8 03
	00 00		 lea	 rdx, QWORD PTR $T11[rbp]
  003cb	48 8b c8	 mov	 rcx, rax
  003ce	e8 00 00 00 00	 call	 ?ToStringX64@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringX64
  003d3	48 89 85 88 04
	00 00		 mov	 QWORD PTR tv293[rbp], rax
  003da	48 8b 85 88 04
	00 00		 mov	 rax, QWORD PTR tv293[rbp]
  003e1	48 89 85 90 04
	00 00		 mov	 QWORD PTR tv283[rbp], rax
  003e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@IBGKLHCM@c?$FL0?$FN?5hi?5qword@
  003ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  003f6	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  003fb	48 8b 95 90 04
	00 00		 mov	 rdx, QWORD PTR tv283[rbp]
  00402	48 8b c8	 mov	 rcx, rax
  00405	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  0040a	b2 0a		 mov	 dl, 10
  0040c	48 8b c8	 mov	 rcx, rax
  0040f	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00414	b2 0a		 mov	 dl, 10
  00416	48 8b c8	 mov	 rcx, rax
  00419	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  0041e	90		 npad	 1
  0041f	48 8d 8d d8 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00426	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 36   : 	std::cout << "c[1] lo qword" << c[1].ToStringX64(0) << nl;

  0042b	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00430	48 6b c0 01	 imul	 rax, rax, 1
  00434	48 8d 84 05 a0
	00 00 00	 lea	 rax, QWORD PTR c$[rbp+rax]
  0043c	45 33 c0	 xor	 r8d, r8d
  0043f	48 8d 95 18 04
	00 00		 lea	 rdx, QWORD PTR $T12[rbp]
  00446	48 8b c8	 mov	 rcx, rax
  00449	e8 00 00 00 00	 call	 ?ToStringX64@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringX64
  0044e	48 89 85 88 04
	00 00		 mov	 QWORD PTR tv294[rbp], rax
  00455	48 8b 85 88 04
	00 00		 mov	 rax, QWORD PTR tv294[rbp]
  0045c	48 89 85 90 04
	00 00		 mov	 QWORD PTR tv285[rbp], rax
  00463	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@IBEMKDMI@c?$FL1?$FN?5lo?5qword@
  0046a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00471	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00476	48 8b 95 90 04
	00 00		 mov	 rdx, QWORD PTR tv285[rbp]
  0047d	48 8b c8	 mov	 rcx, rax
  00480	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  00485	b2 0a		 mov	 dl, 10
  00487	48 8b c8	 mov	 rcx, rax
  0048a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  0048f	90		 npad	 1
  00490	48 8d 8d 18 04
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  00497	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 37   : 	std::cout << "c[1] hi qword" << c[1].ToStringX64(1) << nl << nl;

  0049c	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  004a1	48 6b c0 01	 imul	 rax, rax, 1
  004a5	48 8d 84 05 a0
	00 00 00	 lea	 rax, QWORD PTR c$[rbp+rax]
  004ad	41 b8 01 00 00
	00		 mov	 r8d, 1
  004b3	48 8d 95 58 04
	00 00		 lea	 rdx, QWORD PTR $T13[rbp]
  004ba	48 8b c8	 mov	 rcx, rax
  004bd	e8 00 00 00 00	 call	 ?ToStringX64@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ; YmmVal::ToStringX64
  004c2	48 89 85 88 04
	00 00		 mov	 QWORD PTR tv295[rbp], rax
  004c9	48 8b 85 88 04
	00 00		 mov	 rax, QWORD PTR tv295[rbp]
  004d0	48 89 85 90 04
	00 00		 mov	 QWORD PTR tv287[rbp], rax
  004d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@BKMPPLED@c?$FL1?$FN?5hi?5qword@
  004de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  004e5	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  004ea	48 8b 95 90 04
	00 00		 mov	 rdx, QWORD PTR tv287[rbp]
  004f1	48 8b c8	 mov	 rcx, rax
  004f4	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >
  004f9	b2 0a		 mov	 dl, 10
  004fb	48 8b c8	 mov	 rcx, rax
  004fe	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  00503	b2 0a		 mov	 dl, 10
  00505	48 8b c8	 mov	 rcx, rax
  00508	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@D@Z ; std::operator<<<std::char_traits<char> >
  0050d	90		 npad	 1
  0050e	48 8d 8d 58 04
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  00515	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >

; 38   : }

  0051a	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0051e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?UnpackU32_U64@@YAXXZ$rtcFrameData
  00525	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0052a	48 8b 8d 98 04
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00531	49 33 cd	 xor	 rcx, r13
  00534	e8 00 00 00 00	 call	 __security_check_cookie
  00539	49 8d a5 c0 04
	00 00		 lea	 rsp, QWORD PTR [r13+1216]
  00540	5f		 pop	 rdi
  00541	5d		 pop	 rbp
  00542	41 5d		 pop	 r13
  00544	c3		 ret	 0
?UnpackU32_U64@@YAXXZ ENDP				; UnpackU32_U64
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$0@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 98 02
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$0@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$1@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d d8 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$1@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$2@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 18 03
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$2@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$2
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$3@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$3
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$3@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$3
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$4@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$4
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 98 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$4@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$4
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$5@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$5
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d d8 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$5@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$5
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$6@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$6
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 18 04
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$6@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$6
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$7@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$7
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 58 04
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$7@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$7
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$0@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 98 02
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$0@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$1@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d d8 02
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$1@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$2@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 18 03
	00 00		 lea	 rcx, QWORD PTR $T8[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$2@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$3@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$3
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 58 03
	00 00		 lea	 rcx, QWORD PTR $T9[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$3@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$4@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$4
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 98 03
	00 00		 lea	 rcx, QWORD PTR $T10[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$4@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$5@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$5
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d d8 03
	00 00		 lea	 rcx, QWORD PTR $T11[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$5@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$6@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$6
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 18 04
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$6@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$6
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
a$ = 32
b$ = 96
c$ = 160
nl$ = 244
$T6 = 664
$T7 = 728
$T8 = 792
$T9 = 856
$T10 = 920
$T11 = 984
$T12 = 1048
$T13 = 1112
tv295 = 1160
tv294 = 1160
tv293 = 1160
tv292 = 1160
tv291 = 1160
tv290 = 1160
tv289 = 1160
tv288 = 1160
tv287 = 1168
tv285 = 1168
tv283 = 1168
tv281 = 1168
tv279 = 1168
tv277 = 1168
tv275 = 1168
tv273 = 1168
__$ArrayPad$ = 1176
?dtor$7@?0??UnpackU32_U64@@YAXXZ@4HA PROC		; `UnpackU32_U64'::`1'::dtor$7
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	41 55		 push	 r13
  0000e	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00012	4c 8d 6a 20	 lea	 r13, QWORD PTR [rdx+32]
  00016	48 8d 6a 40	 lea	 rbp, QWORD PTR [rdx+64]
  0001a	48 83 e5 e0	 and	 rbp, -32		; ffffffffffffffe0H
  0001e	48 8d 8d 58 04
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  00025	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0002a	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0002e	41 5d		 pop	 r13
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?dtor$7@?0??UnpackU32_U64@@YAXXZ@4HA ENDP		; `UnpackU32_U64'::`1'::dtor$7
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Rahul Kumar\source\repos\Ch04_02_sol\Ch04_02\YmmVal.h
;	COMDAT ??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z
_TEXT	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv156 = 1332
tv74 = 1332
tv143 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z PROC ; YmmVal::ToStringHex<unsigned __int64>, COMDAT

; 66   :     {

$LN15:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 78 05
	00 00		 sub	 rsp, 1400		; 00000578H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 f6 00 00 00	 mov	 ecx, 246		; 000000f6H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 98
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1432]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 40 05
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	c7 85 24 05 00
	00 00 00 00 00	 mov	 DWORD PTR $T15[rbp], 0
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__107F9394_YmmVal@h
  0005d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 67   :         std::ostringstream oss;

  00062	ba e8 00 00 00	 mov	 edx, 232		; 000000e8H
  00067	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  0006b	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
  00070	ba 01 00 00 00	 mov	 edx, 1
  00075	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00079	e8 00 00 00 00	 call	 ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
  0007e	90		 npad	 1

; 68   : 
; 69   :         int n2 = n / 2;

  0007f	8b 85 88 05 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  00085	99		 cdq
  00086	2b c2		 sub	 eax, edx
  00088	d1 f8		 sar	 eax, 1
  0008a	89 85 14 01 00
	00		 mov	 DWORD PTR n2$[rbp], eax

; 70   :         int offset = (select % 2) ? n / 2 : 0;

  00090	33 d2		 xor	 edx, edx
  00092	8b 85 98 05 00
	00		 mov	 eax, DWORD PTR select$[rbp]
  00098	b9 02 00 00 00	 mov	 ecx, 2
  0009d	f7 f1		 div	 ecx
  0009f	8b c2		 mov	 eax, edx
  000a1	85 c0		 test	 eax, eax
  000a3	74 13		 je	 SHORT $LN7@ToStringHe
  000a5	8b 85 88 05 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  000ab	99		 cdq
  000ac	2b c2		 sub	 eax, edx
  000ae	d1 f8		 sar	 eax, 1
  000b0	89 85 34 05 00
	00		 mov	 DWORD PTR tv74[rbp], eax
  000b6	eb 0a		 jmp	 SHORT $LN8@ToStringHe
$LN7@ToStringHe:
  000b8	c7 85 34 05 00
	00 00 00 00 00	 mov	 DWORD PTR tv74[rbp], 0
$LN8@ToStringHe:
  000c2	8b 85 34 05 00
	00		 mov	 eax, DWORD PTR tv74[rbp]
  000c8	89 85 34 01 00
	00		 mov	 DWORD PTR offset$[rbp], eax

; 71   : 
; 72   :         for (int i = 0; i < n2; i++)

  000ce	c7 85 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$7[rbp], 0
  000d8	eb 0e		 jmp	 SHORT $LN4@ToStringHe
$LN2@ToStringHe:
  000da	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR i$7[rbp]
  000e0	ff c0		 inc	 eax
  000e2	89 85 54 01 00
	00		 mov	 DWORD PTR i$7[rbp], eax
$LN4@ToStringHe:
  000e8	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR n2$[rbp]
  000ee	39 85 54 01 00
	00		 cmp	 DWORD PTR i$7[rbp], eax
  000f4	0f 8d 8e 01 00
	00		 jge	 $LN3@ToStringHe

; 73   :         {
; 74   :             const int w_temp = 16;

  000fa	c7 85 74 01 00
	00 10 00 00 00	 mov	 DWORD PTR w_temp$8[rbp], 16

; 75   :             std::ostringstream oss_temp;

  00104	ba e8 00 00 00	 mov	 edx, 232		; 000000e8H
  00109	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  00110	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
  00115	ba 01 00 00 00	 mov	 edx, 1
  0011a	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  00121	e8 00 00 00 00	 call	 ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
  00126	90		 npad	 1

; 76   : 
; 77   :             oss_temp << std::uppercase << std::hex << std::setfill('0');

  00127	b2 30		 mov	 dl, 48			; 00000030H
  00129	48 8d 8d a4 04
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  00130	e8 00 00 00 00	 call	 ??$setfill@D@std@@YA?AU?$_Fillobj@D@0@D@Z ; std::setfill<char>
  00135	48 89 85 38 05
	00 00		 mov	 QWORD PTR tv84[rbp], rax
  0013c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?uppercase@std@@YAAEAVios_base@1@AEAV21@@Z ; std::uppercase
  00143	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z
  00150	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hex@std@@YAAEAVios_base@1@AEAV21@@Z ; std::hex
  00157	48 8b c8	 mov	 rcx, rax
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z
  00160	48 8b 8d 38 05
	00 00		 mov	 rcx, QWORD PTR tv84[rbp]
  00167	48 8b d1	 mov	 rdx, rcx
  0016a	48 8b c8	 mov	 rcx, rax
  0016d	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@D@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Fillobj@D@0@@Z ; std::operator<<<char,std::char_traits<char>,char>

; 78   :             oss_temp << std::setw(w_temp) << (uint64_t)x[i + offset];

  00172	8b 85 34 01 00
	00		 mov	 eax, DWORD PTR offset$[rbp]
  00178	8b 8d 54 01 00
	00		 mov	 ecx, DWORD PTR i$7[rbp]
  0017e	03 c8		 add	 ecx, eax
  00180	8b c1		 mov	 eax, ecx
  00182	48 98		 cdqe
  00184	48 89 85 38 05
	00 00		 mov	 QWORD PTR tv143[rbp], rax
  0018b	ba 10 00 00 00	 mov	 edx, 16
  00190	48 8d 8d c8 04
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  00197	e8 00 00 00 00	 call	 ?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z ; std::setw
  0019c	48 8b d0	 mov	 rdx, rax
  0019f	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  001a6	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>
  001ab	48 8b 8d 80 05
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  001b2	48 8b 95 38 05
	00 00		 mov	 rdx, QWORD PTR tv143[rbp]
  001b9	48 8b 14 d1	 mov	 rdx, QWORD PTR [rcx+rdx*8]
  001bd	48 8b c8	 mov	 rcx, rax
  001c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_K@Z

; 79   :             std::string s1 = oss_temp.str();

  001c6	48 8d 95 a8 02
	00 00		 lea	 rdx, QWORD PTR s1$10[rbp]
  001cd	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  001d4	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  001d9	90		 npad	 1

; 80   :             std::string s2 = s1.substr(w_temp - sizeof(T) * 2);

  001da	49 c7 c1 ff ff
	ff ff		 mov	 r9, -1
  001e1	45 33 c0	 xor	 r8d, r8d
  001e4	48 8d 95 e8 02
	00 00		 lea	 rdx, QWORD PTR s2$11[rbp]
  001eb	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR s1$10[rbp]
  001f2	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  001f7	90		 npad	 1

; 81   : 
; 82   :             oss << std::setw(w) << s2;

  001f8	48 63 85 90 05
	00 00		 movsxd	 rax, DWORD PTR w$[rbp]
  001ff	48 8b d0	 mov	 rdx, rax
  00202	48 8d 8d f8 04
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  00209	e8 00 00 00 00	 call	 ?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z ; std::setw
  0020e	48 8b d0	 mov	 rdx, rax
  00211	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00215	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>
  0021a	48 8d 95 e8 02
	00 00		 lea	 rdx, QWORD PTR s2$11[rbp]
  00221	48 8b c8	 mov	 rcx, rax
  00224	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >

; 83   : 
; 84   :             if (i + 1 == n2 / 2)

  00229	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR i$7[rbp]
  0022f	ff c0		 inc	 eax
  00231	89 85 34 05 00
	00		 mov	 DWORD PTR tv156[rbp], eax
  00237	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR n2$[rbp]
  0023d	99		 cdq
  0023e	2b c2		 sub	 eax, edx
  00240	d1 f8		 sar	 eax, 1
  00242	8b 8d 34 05 00
	00		 mov	 ecx, DWORD PTR tv156[rbp]
  00248	3b c8		 cmp	 ecx, eax
  0024a	75 11		 jne	 SHORT $LN5@ToStringHe

; 85   :                 oss << "   |";

  0024c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04ODOJPIMC@?5?5?5?$HM@
  00253	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00257	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  0025c	90		 npad	 1
$LN5@ToStringHe:

; 86   :         }

  0025d	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR s2$11[rbp]
  00264	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00269	90		 npad	 1
  0026a	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR s1$10[rbp]
  00271	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00276	90		 npad	 1
  00277	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  0027e	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00283	e9 52 fe ff ff	 jmp	 $LN2@ToStringHe
$LN3@ToStringHe:

; 87   : 
; 88   :         return oss.str();

  00288	48 8b 95 78 05
	00 00		 mov	 rdx, QWORD PTR __$ReturnUdt$[rbp]
  0028f	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00293	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  00298	8b 85 24 05 00
	00		 mov	 eax, DWORD PTR $T15[rbp]
  0029e	83 c8 01	 or	 eax, 1
  002a1	89 85 24 05 00
	00		 mov	 DWORD PTR $T15[rbp], eax
  002a7	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  002ab	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  002b0	48 8b 85 78 05
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 89   :     }

  002b7	48 8b f8	 mov	 rdi, rax
  002ba	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  002be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z$rtcFrameData
  002c5	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002ca	48 8b c7	 mov	 rax, rdi
  002cd	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002d4	48 33 cd	 xor	 rcx, rbp
  002d7	e8 00 00 00 00	 call	 __security_check_cookie
  002dc	48 8d a5 58 05
	00 00		 lea	 rsp, QWORD PTR [rbp+1368]
  002e3	5f		 pop	 rdi
  002e4	5d		 pop	 rbp
  002e5	c3		 ret	 0
??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z ENDP ; YmmVal::ToStringHex<unsigned __int64>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv156 = 1332
tv74 = 1332
tv143 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$0@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00018	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv156 = 1332
tv74 = 1332
tv143 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$1@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  0001b	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv156 = 1332
tv74 = 1332
tv143 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$2@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR s1$10[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$2@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$2
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv156 = 1332
tv74 = 1332
tv143 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$3@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$3
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR s2$11[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$3@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv156 = 1332
tv74 = 1332
tv143 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$0@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00018	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv156 = 1332
tv74 = 1332
tv143 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$1@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  0001b	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv156 = 1332
tv74 = 1332
tv143 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$2@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR s1$10[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$2@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv156 = 1332
tv74 = 1332
tv143 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$3@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$3
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR s2$11[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$3@?0???$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned __int64>'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Rahul Kumar\source\repos\Ch04_02_sol\Ch04_02\YmmVal.h
;	COMDAT ??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z
_TEXT	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv157 = 1332
tv74 = 1332
tv146 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z PROC ; YmmVal::ToStringHex<unsigned int>, COMDAT

; 66   :     {

$LN15:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 78 05
	00 00		 sub	 rsp, 1400		; 00000578H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 f6 00 00 00	 mov	 ecx, 246		; 000000f6H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 98
	05 00 00	 mov	 rcx, QWORD PTR [rsp+1432]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 40 05
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	c7 85 24 05 00
	00 00 00 00 00	 mov	 DWORD PTR $T15[rbp], 0
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__107F9394_YmmVal@h
  0005d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 67   :         std::ostringstream oss;

  00062	ba e8 00 00 00	 mov	 edx, 232		; 000000e8H
  00067	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  0006b	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
  00070	ba 01 00 00 00	 mov	 edx, 1
  00075	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00079	e8 00 00 00 00	 call	 ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
  0007e	90		 npad	 1

; 68   : 
; 69   :         int n2 = n / 2;

  0007f	8b 85 88 05 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  00085	99		 cdq
  00086	2b c2		 sub	 eax, edx
  00088	d1 f8		 sar	 eax, 1
  0008a	89 85 14 01 00
	00		 mov	 DWORD PTR n2$[rbp], eax

; 70   :         int offset = (select % 2) ? n / 2 : 0;

  00090	33 d2		 xor	 edx, edx
  00092	8b 85 98 05 00
	00		 mov	 eax, DWORD PTR select$[rbp]
  00098	b9 02 00 00 00	 mov	 ecx, 2
  0009d	f7 f1		 div	 ecx
  0009f	8b c2		 mov	 eax, edx
  000a1	85 c0		 test	 eax, eax
  000a3	74 13		 je	 SHORT $LN7@ToStringHe
  000a5	8b 85 88 05 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  000ab	99		 cdq
  000ac	2b c2		 sub	 eax, edx
  000ae	d1 f8		 sar	 eax, 1
  000b0	89 85 34 05 00
	00		 mov	 DWORD PTR tv74[rbp], eax
  000b6	eb 0a		 jmp	 SHORT $LN8@ToStringHe
$LN7@ToStringHe:
  000b8	c7 85 34 05 00
	00 00 00 00 00	 mov	 DWORD PTR tv74[rbp], 0
$LN8@ToStringHe:
  000c2	8b 85 34 05 00
	00		 mov	 eax, DWORD PTR tv74[rbp]
  000c8	89 85 34 01 00
	00		 mov	 DWORD PTR offset$[rbp], eax

; 71   : 
; 72   :         for (int i = 0; i < n2; i++)

  000ce	c7 85 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$7[rbp], 0
  000d8	eb 0e		 jmp	 SHORT $LN4@ToStringHe
$LN2@ToStringHe:
  000da	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR i$7[rbp]
  000e0	ff c0		 inc	 eax
  000e2	89 85 54 01 00
	00		 mov	 DWORD PTR i$7[rbp], eax
$LN4@ToStringHe:
  000e8	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR n2$[rbp]
  000ee	39 85 54 01 00
	00		 cmp	 DWORD PTR i$7[rbp], eax
  000f4	0f 8d 93 01 00
	00		 jge	 $LN3@ToStringHe

; 73   :         {
; 74   :             const int w_temp = 16;

  000fa	c7 85 74 01 00
	00 10 00 00 00	 mov	 DWORD PTR w_temp$8[rbp], 16

; 75   :             std::ostringstream oss_temp;

  00104	ba e8 00 00 00	 mov	 edx, 232		; 000000e8H
  00109	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  00110	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
  00115	ba 01 00 00 00	 mov	 edx, 1
  0011a	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  00121	e8 00 00 00 00	 call	 ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
  00126	90		 npad	 1

; 76   : 
; 77   :             oss_temp << std::uppercase << std::hex << std::setfill('0');

  00127	b2 30		 mov	 dl, 48			; 00000030H
  00129	48 8d 8d a4 04
	00 00		 lea	 rcx, QWORD PTR $T12[rbp]
  00130	e8 00 00 00 00	 call	 ??$setfill@D@std@@YA?AU?$_Fillobj@D@0@D@Z ; std::setfill<char>
  00135	48 89 85 38 05
	00 00		 mov	 QWORD PTR tv84[rbp], rax
  0013c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?uppercase@std@@YAAEAVios_base@1@AEAV21@@Z ; std::uppercase
  00143	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z
  00150	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hex@std@@YAAEAVios_base@1@AEAV21@@Z ; std::hex
  00157	48 8b c8	 mov	 rcx, rax
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAVios_base@1@AEAV21@@Z@Z
  00160	48 8b 8d 38 05
	00 00		 mov	 rcx, QWORD PTR tv84[rbp]
  00167	48 8b d1	 mov	 rdx, rcx
  0016a	48 8b c8	 mov	 rcx, rax
  0016d	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@D@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Fillobj@D@0@@Z ; std::operator<<<char,std::char_traits<char>,char>

; 78   :             oss_temp << std::setw(w_temp) << (uint64_t)x[i + offset];

  00172	8b 85 34 01 00
	00		 mov	 eax, DWORD PTR offset$[rbp]
  00178	8b 8d 54 01 00
	00		 mov	 ecx, DWORD PTR i$7[rbp]
  0017e	03 c8		 add	 ecx, eax
  00180	8b c1		 mov	 eax, ecx
  00182	48 98		 cdqe
  00184	48 8b 8d 80 05
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  0018b	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0018e	48 89 85 38 05
	00 00		 mov	 QWORD PTR tv146[rbp], rax
  00195	ba 10 00 00 00	 mov	 edx, 16
  0019a	48 8d 8d c8 04
	00 00		 lea	 rcx, QWORD PTR $T13[rbp]
  001a1	e8 00 00 00 00	 call	 ?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z ; std::setw
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  001b0	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>
  001b5	48 8b 8d 38 05
	00 00		 mov	 rcx, QWORD PTR tv146[rbp]
  001bc	48 8b d1	 mov	 rdx, rcx
  001bf	48 8b c8	 mov	 rcx, rax
  001c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_K@Z

; 79   :             std::string s1 = oss_temp.str();

  001c8	48 8d 95 a8 02
	00 00		 lea	 rdx, QWORD PTR s1$10[rbp]
  001cf	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  001d6	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  001db	90		 npad	 1

; 80   :             std::string s2 = s1.substr(w_temp - sizeof(T) * 2);

  001dc	49 c7 c1 ff ff
	ff ff		 mov	 r9, -1
  001e3	41 b8 08 00 00
	00		 mov	 r8d, 8
  001e9	48 8d 95 e8 02
	00 00		 lea	 rdx, QWORD PTR s2$11[rbp]
  001f0	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR s1$10[rbp]
  001f7	e8 00 00 00 00	 call	 ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
  001fc	90		 npad	 1

; 81   : 
; 82   :             oss << std::setw(w) << s2;

  001fd	48 63 85 90 05
	00 00		 movsxd	 rax, DWORD PTR w$[rbp]
  00204	48 8b d0	 mov	 rdx, rax
  00207	48 8d 8d f8 04
	00 00		 lea	 rcx, QWORD PTR $T14[rbp]
  0020e	e8 00 00 00 00	 call	 ?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z ; std::setw
  00213	48 8b d0	 mov	 rdx, rax
  00216	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  0021a	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>
  0021f	48 8d 95 e8 02
	00 00		 lea	 rdx, QWORD PTR s2$11[rbp]
  00226	48 8b c8	 mov	 rcx, rax
  00229	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::operator<<<char,std::char_traits<char>,std::allocator<char> >

; 83   : 
; 84   :             if (i + 1 == n2 / 2)

  0022e	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR i$7[rbp]
  00234	ff c0		 inc	 eax
  00236	89 85 34 05 00
	00		 mov	 DWORD PTR tv157[rbp], eax
  0023c	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR n2$[rbp]
  00242	99		 cdq
  00243	2b c2		 sub	 eax, edx
  00245	d1 f8		 sar	 eax, 1
  00247	8b 8d 34 05 00
	00		 mov	 ecx, DWORD PTR tv157[rbp]
  0024d	3b c8		 cmp	 ecx, eax
  0024f	75 11		 jne	 SHORT $LN5@ToStringHe

; 85   :                 oss << "   |";

  00251	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04ODOJPIMC@?5?5?5?$HM@
  00258	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  0025c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
  00261	90		 npad	 1
$LN5@ToStringHe:

; 86   :         }

  00262	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR s2$11[rbp]
  00269	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0026e	90		 npad	 1
  0026f	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR s1$10[rbp]
  00276	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0027b	90		 npad	 1
  0027c	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  00283	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00288	e9 4d fe ff ff	 jmp	 $LN2@ToStringHe
$LN3@ToStringHe:

; 87   : 
; 88   :         return oss.str();

  0028d	48 8b 95 78 05
	00 00		 mov	 rdx, QWORD PTR __$ReturnUdt$[rbp]
  00294	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00298	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  0029d	8b 85 24 05 00
	00		 mov	 eax, DWORD PTR $T15[rbp]
  002a3	83 c8 01	 or	 eax, 1
  002a6	89 85 24 05 00
	00		 mov	 DWORD PTR $T15[rbp], eax
  002ac	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  002b0	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  002b5	48 8b 85 78 05
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 89   :     }

  002bc	48 8b f8	 mov	 rdi, rax
  002bf	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  002c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z$rtcFrameData
  002ca	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  002cf	48 8b c7	 mov	 rax, rdi
  002d2	48 8b 8d 40 05
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  002d9	48 33 cd	 xor	 rcx, rbp
  002dc	e8 00 00 00 00	 call	 __security_check_cookie
  002e1	48 8d a5 58 05
	00 00		 lea	 rsp, QWORD PTR [rbp+1368]
  002e8	5f		 pop	 rdi
  002e9	5d		 pop	 rbp
  002ea	c3		 ret	 0
??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z ENDP ; YmmVal::ToStringHex<unsigned int>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv157 = 1332
tv74 = 1332
tv146 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$0@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00018	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv157 = 1332
tv74 = 1332
tv146 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$1@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  0001b	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$1
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv157 = 1332
tv74 = 1332
tv146 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$2@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR s1$10[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$2@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$2
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv157 = 1332
tv74 = 1332
tv146 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$3@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$3
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR s2$11[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$3@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv157 = 1332
tv74 = 1332
tv146 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$0@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00018	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv157 = 1332
tv74 = 1332
tv146 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$1@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d a0 01
	00 00		 lea	 rcx, QWORD PTR oss_temp$9[rbp]
  0001b	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$1@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv157 = 1332
tv74 = 1332
tv146 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$2@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$2
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d a8 02
	00 00		 lea	 rcx, QWORD PTR s1$10[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$2@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$7 = 340
w_temp$8 = 372
oss_temp$9 = 416
s1$10 = 680
s2$11 = 744
$T12 = 1188
$T13 = 1224
$T14 = 1272
$T15 = 1316
tv157 = 1332
tv74 = 1332
tv146 = 1336
tv84 = 1336
__$ArrayPad$ = 1344
this$ = 1392
__$ReturnUdt$ = 1400
x$ = 1408
n$ = 1416
w$ = 1424
select$ = 1432
?dtor$3@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA PROC ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$3
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 8d e8 02
	00 00		 lea	 rcx, QWORD PTR s2$11[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$3@?0???$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z@4HA ENDP ; `YmmVal::ToStringHex<unsigned int>'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Rahul Kumar\source\repos\Ch04_02_sol\Ch04_02\YmmVal.h
;	COMDAT ??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z
_TEXT	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$4 = 340
$T5 = 568
$T6 = 612
tv89 = 628
tv74 = 628
tv94 = 632
__$ArrayPad$ = 640
this$ = 688
__$ReturnUdt$ = 696
x$ = 704
n$ = 712
w$ = 720
select$ = 728
??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z PROC ; YmmVal::ToStringInt<int>, COMDAT

; 30   :     {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec b8 02
	00 00		 sub	 rsp, 696		; 000002b8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 76 00 00 00	 mov	 ecx, 118		; 00000076H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+728]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 80 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	c7 85 64 02 00
	00 00 00 00 00	 mov	 DWORD PTR $T6[rbp], 0
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__107F9394_YmmVal@h
  0005d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 31   :         std::ostringstream oss;

  00062	ba e8 00 00 00	 mov	 edx, 232		; 000000e8H
  00067	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  0006b	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
  00070	ba 01 00 00 00	 mov	 edx, 1
  00075	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00079	e8 00 00 00 00	 call	 ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
  0007e	90		 npad	 1

; 32   : 
; 33   :         int n2 = n / 2;

  0007f	8b 85 c8 02 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  00085	99		 cdq
  00086	2b c2		 sub	 eax, edx
  00088	d1 f8		 sar	 eax, 1
  0008a	89 85 14 01 00
	00		 mov	 DWORD PTR n2$[rbp], eax

; 34   :         int offset = (select % 2) ? n / 2 : 0;

  00090	33 d2		 xor	 edx, edx
  00092	8b 85 d8 02 00
	00		 mov	 eax, DWORD PTR select$[rbp]
  00098	b9 02 00 00 00	 mov	 ecx, 2
  0009d	f7 f1		 div	 ecx
  0009f	8b c2		 mov	 eax, edx
  000a1	85 c0		 test	 eax, eax
  000a3	74 13		 je	 SHORT $LN7@ToStringIn
  000a5	8b 85 c8 02 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  000ab	99		 cdq
  000ac	2b c2		 sub	 eax, edx
  000ae	d1 f8		 sar	 eax, 1
  000b0	89 85 74 02 00
	00		 mov	 DWORD PTR tv74[rbp], eax
  000b6	eb 0a		 jmp	 SHORT $LN8@ToStringIn
$LN7@ToStringIn:
  000b8	c7 85 74 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv74[rbp], 0
$LN8@ToStringIn:
  000c2	8b 85 74 02 00
	00		 mov	 eax, DWORD PTR tv74[rbp]
  000c8	89 85 34 01 00
	00		 mov	 DWORD PTR offset$[rbp], eax

; 35   : 
; 36   :         for (int i = 0; i < n2; i++)

  000ce	c7 85 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$4[rbp], 0
  000d8	eb 0e		 jmp	 SHORT $LN4@ToStringIn
$LN2@ToStringIn:
  000da	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR i$4[rbp]
  000e0	ff c0		 inc	 eax
  000e2	89 85 54 01 00
	00		 mov	 DWORD PTR i$4[rbp], eax
$LN4@ToStringIn:
  000e8	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR n2$[rbp]
  000ee	39 85 54 01 00
	00		 cmp	 DWORD PTR i$4[rbp], eax
  000f4	0f 8d 91 00 00
	00		 jge	 $LN3@ToStringIn

; 37   :         {
; 38   :             oss << std::setw(w) << (int64_t)x[i + offset];

  000fa	8b 85 34 01 00
	00		 mov	 eax, DWORD PTR offset$[rbp]
  00100	8b 8d 54 01 00
	00		 mov	 ecx, DWORD PTR i$4[rbp]
  00106	03 c8		 add	 ecx, eax
  00108	8b c1		 mov	 eax, ecx
  0010a	48 98		 cdqe
  0010c	48 8b 8d c0 02
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  00113	48 63 04 81	 movsxd	 rax, DWORD PTR [rcx+rax*4]
  00117	48 89 85 78 02
	00 00		 mov	 QWORD PTR tv94[rbp], rax
  0011e	48 63 8d d0 02
	00 00		 movsxd	 rcx, DWORD PTR w$[rbp]
  00125	48 8b d1	 mov	 rdx, rcx
  00128	48 8d 8d 38 02
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  0012f	e8 00 00 00 00	 call	 ?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z ; std::setw
  00134	48 8b d0	 mov	 rdx, rax
  00137	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  0013b	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>
  00140	48 8b 8d 78 02
	00 00		 mov	 rcx, QWORD PTR tv94[rbp]
  00147	48 8b d1	 mov	 rdx, rcx
  0014a	48 8b c8	 mov	 rcx, rax
  0014d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_J@Z

; 39   : 
; 40   :             if (i + 1 == n2 / 2)

  00153	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR i$4[rbp]
  00159	ff c0		 inc	 eax
  0015b	89 85 74 02 00
	00		 mov	 DWORD PTR tv89[rbp], eax
  00161	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR n2$[rbp]
  00167	99		 cdq
  00168	2b c2		 sub	 eax, edx
  0016a	d1 f8		 sar	 eax, 1
  0016c	8b 8d 74 02 00
	00		 mov	 ecx, DWORD PTR tv89[rbp]
  00172	3b c8		 cmp	 ecx, eax
  00174	75 10		 jne	 SHORT $LN5@ToStringIn

; 41   :                 oss << "   |";

  00176	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04ODOJPIMC@?5?5?5?$HM@
  0017d	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00181	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN5@ToStringIn:

; 42   :         }

  00186	e9 4f ff ff ff	 jmp	 $LN2@ToStringIn
$LN3@ToStringIn:

; 43   : 
; 44   :         return oss.str();

  0018b	48 8b 95 b8 02
	00 00		 mov	 rdx, QWORD PTR __$ReturnUdt$[rbp]
  00192	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00196	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  0019b	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR $T6[rbp]
  001a1	83 c8 01	 or	 eax, 1
  001a4	89 85 64 02 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  001aa	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  001ae	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  001b3	48 8b 85 b8 02
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 45   :     }

  001ba	48 8b f8	 mov	 rdi, rax
  001bd	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z$rtcFrameData
  001c8	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001cd	48 8b c7	 mov	 rax, rdi
  001d0	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001d7	48 33 cd	 xor	 rcx, rbp
  001da	e8 00 00 00 00	 call	 __security_check_cookie
  001df	48 8d a5 98 02
	00 00		 lea	 rsp, QWORD PTR [rbp+664]
  001e6	5f		 pop	 rdi
  001e7	5d		 pop	 rbp
  001e8	c3		 ret	 0
??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z ENDP ; YmmVal::ToStringInt<int>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$4 = 340
$T5 = 568
$T6 = 612
tv89 = 628
tv74 = 628
tv94 = 632
__$ArrayPad$ = 640
this$ = 688
__$ReturnUdt$ = 696
x$ = 704
n$ = 712
w$ = 720
select$ = 728
?dtor$0@?0???$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z@4HA PROC ; `YmmVal::ToStringInt<int>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00018	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z@4HA ENDP ; `YmmVal::ToStringInt<int>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$4 = 340
$T5 = 568
$T6 = 612
tv89 = 628
tv74 = 628
tv94 = 632
__$ArrayPad$ = 640
this$ = 688
__$ReturnUdt$ = 696
x$ = 704
n$ = 712
w$ = 720
select$ = 728
?dtor$0@?0???$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z@4HA PROC ; `YmmVal::ToStringInt<int>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00018	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z@4HA ENDP ; `YmmVal::ToStringInt<int>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Rahul Kumar\source\repos\Ch04_02_sol\Ch04_02\YmmVal.h
;	COMDAT ??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z
_TEXT	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$4 = 340
$T5 = 568
$T6 = 612
tv89 = 628
tv74 = 628
tv94 = 632
__$ArrayPad$ = 640
this$ = 688
__$ReturnUdt$ = 696
x$ = 704
n$ = 712
w$ = 720
select$ = 728
??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z PROC ; YmmVal::ToStringInt<short>, COMDAT

; 30   :     {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec b8 02
	00 00		 sub	 rsp, 696		; 000002b8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 76 00 00 00	 mov	 ecx, 118		; 00000076H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR [rsp+728]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 80 02
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	c7 85 64 02 00
	00 00 00 00 00	 mov	 DWORD PTR $T6[rbp], 0
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__107F9394_YmmVal@h
  0005d	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 31   :         std::ostringstream oss;

  00062	ba e8 00 00 00	 mov	 edx, 232		; 000000e8H
  00067	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  0006b	e8 00 00 00 00	 call	 ?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
  00070	ba 01 00 00 00	 mov	 edx, 1
  00075	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00079	e8 00 00 00 00	 call	 ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
  0007e	90		 npad	 1

; 32   : 
; 33   :         int n2 = n / 2;

  0007f	8b 85 c8 02 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  00085	99		 cdq
  00086	2b c2		 sub	 eax, edx
  00088	d1 f8		 sar	 eax, 1
  0008a	89 85 14 01 00
	00		 mov	 DWORD PTR n2$[rbp], eax

; 34   :         int offset = (select % 2) ? n / 2 : 0;

  00090	33 d2		 xor	 edx, edx
  00092	8b 85 d8 02 00
	00		 mov	 eax, DWORD PTR select$[rbp]
  00098	b9 02 00 00 00	 mov	 ecx, 2
  0009d	f7 f1		 div	 ecx
  0009f	8b c2		 mov	 eax, edx
  000a1	85 c0		 test	 eax, eax
  000a3	74 13		 je	 SHORT $LN7@ToStringIn
  000a5	8b 85 c8 02 00
	00		 mov	 eax, DWORD PTR n$[rbp]
  000ab	99		 cdq
  000ac	2b c2		 sub	 eax, edx
  000ae	d1 f8		 sar	 eax, 1
  000b0	89 85 74 02 00
	00		 mov	 DWORD PTR tv74[rbp], eax
  000b6	eb 0a		 jmp	 SHORT $LN8@ToStringIn
$LN7@ToStringIn:
  000b8	c7 85 74 02 00
	00 00 00 00 00	 mov	 DWORD PTR tv74[rbp], 0
$LN8@ToStringIn:
  000c2	8b 85 74 02 00
	00		 mov	 eax, DWORD PTR tv74[rbp]
  000c8	89 85 34 01 00
	00		 mov	 DWORD PTR offset$[rbp], eax

; 35   : 
; 36   :         for (int i = 0; i < n2; i++)

  000ce	c7 85 54 01 00
	00 00 00 00 00	 mov	 DWORD PTR i$4[rbp], 0
  000d8	eb 0e		 jmp	 SHORT $LN4@ToStringIn
$LN2@ToStringIn:
  000da	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR i$4[rbp]
  000e0	ff c0		 inc	 eax
  000e2	89 85 54 01 00
	00		 mov	 DWORD PTR i$4[rbp], eax
$LN4@ToStringIn:
  000e8	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR n2$[rbp]
  000ee	39 85 54 01 00
	00		 cmp	 DWORD PTR i$4[rbp], eax
  000f4	0f 8d 92 00 00
	00		 jge	 $LN3@ToStringIn

; 37   :         {
; 38   :             oss << std::setw(w) << (int64_t)x[i + offset];

  000fa	8b 85 34 01 00
	00		 mov	 eax, DWORD PTR offset$[rbp]
  00100	8b 8d 54 01 00
	00		 mov	 ecx, DWORD PTR i$4[rbp]
  00106	03 c8		 add	 ecx, eax
  00108	8b c1		 mov	 eax, ecx
  0010a	48 98		 cdqe
  0010c	48 8b 8d c0 02
	00 00		 mov	 rcx, QWORD PTR x$[rbp]
  00113	48 0f bf 04 41	 movsx	 rax, WORD PTR [rcx+rax*2]
  00118	48 89 85 78 02
	00 00		 mov	 QWORD PTR tv94[rbp], rax
  0011f	48 63 8d d0 02
	00 00		 movsxd	 rcx, DWORD PTR w$[rbp]
  00126	48 8b d1	 mov	 rdx, rcx
  00129	48 8d 8d 38 02
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00130	e8 00 00 00 00	 call	 ?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z ; std::setw
  00135	48 8b d0	 mov	 rdx, rax
  00138	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  0013c	e8 00 00 00 00	 call	 ??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>
  00141	48 8b 8d 78 02
	00 00		 mov	 rcx, QWORD PTR tv94[rbp]
  00148	48 8b d1	 mov	 rdx, rcx
  0014b	48 8b c8	 mov	 rcx, rax
  0014e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@_J@Z

; 39   : 
; 40   :             if (i + 1 == n2 / 2)

  00154	8b 85 54 01 00
	00		 mov	 eax, DWORD PTR i$4[rbp]
  0015a	ff c0		 inc	 eax
  0015c	89 85 74 02 00
	00		 mov	 DWORD PTR tv89[rbp], eax
  00162	8b 85 14 01 00
	00		 mov	 eax, DWORD PTR n2$[rbp]
  00168	99		 cdq
  00169	2b c2		 sub	 eax, edx
  0016b	d1 f8		 sar	 eax, 1
  0016d	8b 8d 74 02 00
	00		 mov	 ecx, DWORD PTR tv89[rbp]
  00173	3b c8		 cmp	 ecx, eax
  00175	75 10		 jne	 SHORT $LN5@ToStringIn

; 41   :                 oss << "   |";

  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04ODOJPIMC@?5?5?5?$HM@
  0017e	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00182	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
$LN5@ToStringIn:

; 42   :         }

  00187	e9 4e ff ff ff	 jmp	 $LN2@ToStringIn
$LN3@ToStringIn:

; 43   : 
; 44   :         return oss.str();

  0018c	48 8b 95 b8 02
	00 00		 mov	 rdx, QWORD PTR __$ReturnUdt$[rbp]
  00193	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00197	e8 00 00 00 00	 call	 ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
  0019c	8b 85 64 02 00
	00		 mov	 eax, DWORD PTR $T6[rbp]
  001a2	83 c8 01	 or	 eax, 1
  001a5	89 85 64 02 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  001ab	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  001af	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  001b4	48 8b 85 b8 02
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 45   :     }

  001bb	48 8b f8	 mov	 rdi, rax
  001be	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  001c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z$rtcFrameData
  001c9	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  001ce	48 8b c7	 mov	 rax, rdi
  001d1	48 8b 8d 80 02
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  001d8	48 33 cd	 xor	 rcx, rbp
  001db	e8 00 00 00 00	 call	 __security_check_cookie
  001e0	48 8d a5 98 02
	00 00		 lea	 rsp, QWORD PTR [rbp+664]
  001e7	5f		 pop	 rdi
  001e8	5d		 pop	 rbp
  001e9	c3		 ret	 0
??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z ENDP ; YmmVal::ToStringInt<short>
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$4 = 340
$T5 = 568
$T6 = 612
tv89 = 628
tv74 = 628
tv94 = 632
__$ArrayPad$ = 640
this$ = 688
__$ReturnUdt$ = 696
x$ = 704
n$ = 712
w$ = 720
select$ = 728
?dtor$0@?0???$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z@4HA PROC ; `YmmVal::ToStringInt<short>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00018	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z@4HA ENDP ; `YmmVal::ToStringInt<short>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
oss$ = 16
n2$ = 276
offset$ = 308
i$4 = 340
$T5 = 568
$T6 = 612
tv89 = 628
tv74 = 628
tv94 = 632
__$ArrayPad$ = 640
this$ = 688
__$ReturnUdt$ = 696
x$ = 704
n$ = 712
w$ = 720
select$ = 728
?dtor$0@?0???$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z@4HA PROC ; `YmmVal::ToStringInt<short>'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 10	 lea	 rcx, QWORD PTR oss$[rbp]
  00018	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z@4HA ENDP ; `YmmVal::ToStringInt<short>'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\iomanip
;	COMDAT ??$?6DU?$char_traits@D@std@@D@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Fillobj@D@0@@Z
_TEXT	SEGMENT
_Ostr$ = 224
_Manip$ = 232
??$?6DU?$char_traits@D@std@@D@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Fillobj@D@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,char>, COMDAT

; 49   :     const _Fillobj<_Elem2>& _Manip) { // set fill character in output stream

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5E3DCDCC_iomanip
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 50   :     static_assert(is_same_v<_Elem, _Elem2>, "wrong character type for setfill");
; 51   : 
; 52   :     _Ostr.fill(_Manip._Fill);

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00032	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00039	48 03 c8	 add	 rcx, rax
  0003c	48 8b c1	 mov	 rax, rcx
  0003f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Manip$[rbp]
  00046	0f b6 11	 movzx	 edx, BYTE PTR [rcx]
  00049	48 8b c8	 mov	 rcx, rax
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAADD@Z

; 53   :     return _Ostr;

  00052	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]

; 54   : }

  00059	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
??$?6DU?$char_traits@D@std@@D@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Fillobj@D@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\iomanip
;	COMDAT ??0?$_Fillobj@D@std@@QEAA@D@Z
_TEXT	SEGMENT
this$ = 224
_Ch$ = 232
??0?$_Fillobj@D@std@@QEAA@D@Z PROC			; std::_Fillobj<char>::_Fillobj<char>, COMDAT

; 27   :     _Fillobj(_Elem _Ch) : _Fill(_Ch) {}

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5E3DCDCC_iomanip
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00023	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002a	0f b6 8d e8 00
	00 00		 movzx	 ecx, BYTE PTR _Ch$[rbp]
  00031	88 08		 mov	 BYTE PTR [rax], cl
  00033	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
??0?$_Fillobj@D@std@@QEAA@D@Z ENDP			; std::_Fillobj<char>::_Fillobj<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\iomanip
;	COMDAT ??$setfill@D@std@@YA?AU?$_Fillobj@D@0@D@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 224
_Ch$ = 232
??$setfill@D@std@@YA?AU?$_Fillobj@D@0@D@Z PROC		; std::setfill<char>, COMDAT

; 34   : _NODISCARD _Fillobj<_Elem> setfill(_Elem _Ch) {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5E3DCDCC_iomanip
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 35   :     return _Fillobj<_Elem>(_Ch);

  00023	0f b6 95 e8 00
	00 00		 movzx	 edx, BYTE PTR _Ch$[rbp]
  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00031	e8 00 00 00 00	 call	 ??0?$_Fillobj@D@std@@QEAA@D@Z ; std::_Fillobj<char>::_Fillobj<char>
  00036	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 36   : }

  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
??$setfill@D@std@@YA?AU?$_Fillobj@D@0@D@Z ENDP		; std::setfill<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv300 = 484
tv295 = 484
tv139 = 484
tv301 = 488
tv298 = 488
tv296 = 488
tv137 = 488
tv302 = 496
tv299 = 496
tv297 = 496
__$ArrayPad$ = 504
_Ostr$ = 544
_Val$ = 552
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 734  :     const char* _Val) { // insert NTBS into char stream

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 02
	00 00		 sub	 rsp, 552		; 00000228H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001d	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR [rsp+584]
  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00038	48 33 c5	 xor	 rax, rbp
  0003b	48 89 85 f8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__C12F3EA4_ostream
  00049	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 735  :     using _Elem = char;
; 736  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 737  : 
; 738  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 739  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00055	48 8b 8d 28 02
	00 00		 mov	 rcx, QWORD PTR _Val$[rbp]
  0005c	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
  00061	48 89 45 28	 mov	 QWORD PTR _Count$[rbp], rax

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00065	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0006c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00073	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0007a	48 03 c8	 add	 rcx, rax
  0007d	48 8b c1	 mov	 rax, rcx
  00080	48 8b c8	 mov	 rcx, rax
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  00089	48 85 c0	 test	 rax, rax
  0008c	7e 5b		 jle	 SHORT $LN17@operator
  0008e	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00095	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00098	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0009c	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000a3	48 03 c8	 add	 rcx, rax
  000a6	48 8b c1	 mov	 rax, rcx
  000a9	48 8b c8	 mov	 rcx, rax
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000b2	48 3b 45 28	 cmp	 rax, QWORD PTR _Count$[rbp]
  000b6	7e 31		 jle	 SHORT $LN17@operator
  000b8	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  000bf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c2	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c6	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  000cd	48 03 c8	 add	 rcx, rax
  000d0	48 8b c1	 mov	 rax, rcx
  000d3	48 8b c8	 mov	 rcx, rax
  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEBA_JXZ
  000dc	48 2b 45 28	 sub	 rax, QWORD PTR _Count$[rbp]
  000e0	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv137[rbp], rax
  000e7	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  000e9	48 c7 85 e8 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv137[rbp], 0
$LN18@operator:
  000f4	48 8b 85 e8 01
	00 00		 mov	 rax, QWORD PTR tv137[rbp]
  000fb	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax

; 741  :     const typename _Myos::sentry _Ok(_Ostr);

  000ff	48 8b 95 20 02
	00 00		 mov	 rdx, QWORD PTR _Ostr$[rbp]
  00106	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  0010a	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0010f	90		 npad	 1

; 742  : 
; 743  :     if (!_Ok) {

  00110	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00114	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  00119	0f b6 c0	 movzx	 eax, al
  0011c	85 c0		 test	 eax, eax
  0011e	75 0e		 jne	 SHORT $LN8@operator

; 744  :         _State |= ios_base::badbit;

  00120	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00123	83 c8 04	 or	 eax, 4
  00126	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 745  :     } else { // state okay, insert

  00129	e9 67 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 746  :         _TRY_IO_BEGIN
; 747  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  0012e	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00135	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00138	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0013c	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00143	48 03 c8	 add	 rcx, rax
  00146	48 8b c1	 mov	 rax, rcx
  00149	48 8b c8	 mov	 rcx, rax
  0014c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?flags@ios_base@std@@QEBAHXZ
  00152	89 85 e4 01 00
	00		 mov	 DWORD PTR tv139[rbp], eax
  00158	8b 85 e4 01 00
	00		 mov	 eax, DWORD PTR tv139[rbp]
  0015e	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00163	83 f8 40	 cmp	 eax, 64			; 00000040H
  00166	0f 84 c8 00 00
	00		 je	 $LN11@operator

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0016c	eb 0b		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0016e	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  00172	48 ff c8	 dec	 rax
  00175	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN4@operator:
  00179	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  0017e	0f 8e b0 00 00
	00		 jle	 $LN11@operator

; 749  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00184	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0018b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0018e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00192	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00199	48 03 c8	 add	 rcx, rax
  0019c	48 8b c1	 mov	 rax, rcx
  0019f	48 8b c8	 mov	 rcx, rax
  001a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  001a8	88 85 e4 01 00
	00		 mov	 BYTE PTR tv295[rbp], al
  001ae	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  001b5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001b8	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001bc	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  001c3	48 03 c8	 add	 rcx, rax
  001c6	48 8b c1	 mov	 rax, rcx
  001c9	48 8b c8	 mov	 rcx, rax
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001d2	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv296[rbp], rax
  001d9	0f b6 95 e4 01
	00 00		 movzx	 edx, BYTE PTR tv295[rbp]
  001e0	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv296[rbp]
  001e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  001ed	89 85 f0 01 00
	00		 mov	 DWORD PTR tv297[rbp], eax
  001f3	8b 85 f0 01 00
	00		 mov	 eax, DWORD PTR tv297[rbp]
  001f9	89 85 54 01 00
	00		 mov	 DWORD PTR $T4[rbp], eax
  001ff	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00204	89 85 74 01 00
	00		 mov	 DWORD PTR $T5[rbp], eax
  0020a	48 8d 95 54 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00211	48 8d 8d 74 01
	00 00		 lea	 rcx, QWORD PTR $T5[rbp]
  00218	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0021d	0f b6 c0	 movzx	 eax, al
  00220	85 c0		 test	 eax, eax
  00222	74 0b		 je	 SHORT $LN12@operator

; 750  :                     _State |= ios_base::badbit; // insertion failed, quit

  00224	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00227	83 c8 04	 or	 eax, 4
  0022a	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 751  :                     break;

  0022d	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 752  :                 }
; 753  :             }

  0022f	e9 3a ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 754  :         }
; 755  : 
; 756  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00234	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  00238	75 60		 jne	 SHORT $LN13@operator
  0023a	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00241	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00244	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00248	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  0024f	48 03 c8	 add	 rcx, rax
  00252	48 8b c1	 mov	 rax, rcx
  00255	48 8b c8	 mov	 rcx, rax
  00258	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0025e	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv298[rbp], rax
  00265	4c 8b 45 28	 mov	 r8, QWORD PTR _Count$[rbp]
  00269	48 8b 95 28 02
	00 00		 mov	 rdx, QWORD PTR _Val$[rbp]
  00270	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv298[rbp]
  00277	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
  0027d	48 89 85 f0 01
	00 00		 mov	 QWORD PTR tv299[rbp], rax
  00284	48 8b 45 28	 mov	 rax, QWORD PTR _Count$[rbp]
  00288	48 39 85 f0 01
	00 00		 cmp	 QWORD PTR tv299[rbp], rax
  0028f	74 09		 je	 SHORT $LN13@operator

; 757  :             _State |= ios_base::badbit;

  00291	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00294	83 c8 04	 or	 eax, 4
  00297	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN13@operator:

; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {

  0029a	83 7d 04 00	 cmp	 DWORD PTR _State$[rbp], 0
  0029e	0f 85 c8 00 00
	00		 jne	 $LN14@operator

; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002a4	eb 0b		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002a6	48 8b 45 48	 mov	 rax, QWORD PTR _Pad$[rbp]
  002aa	48 ff c8	 dec	 rax
  002ad	48 89 45 48	 mov	 QWORD PTR _Pad$[rbp], rax
$LN7@operator:
  002b1	48 83 7d 48 00	 cmp	 QWORD PTR _Pad$[rbp], 0
  002b6	0f 8e b0 00 00
	00		 jle	 $LN14@operator

; 762  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  002bc	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002c6	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002ca	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002d1	48 03 c8	 add	 rcx, rax
  002d4	48 8b c1	 mov	 rax, rcx
  002d7	48 8b c8	 mov	 rcx, rax
  002da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ
  002e0	88 85 e4 01 00
	00		 mov	 BYTE PTR tv300[rbp], al
  002e6	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  002ed	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002f0	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  002f4	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  002fb	48 03 c8	 add	 rcx, rax
  002fe	48 8b c1	 mov	 rax, rcx
  00301	48 8b c8	 mov	 rcx, rax
  00304	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0030a	48 89 85 e8 01
	00 00		 mov	 QWORD PTR tv301[rbp], rax
  00311	0f b6 95 e4 01
	00 00		 movzx	 edx, BYTE PTR tv300[rbp]
  00318	48 8b 8d e8 01
	00 00		 mov	 rcx, QWORD PTR tv301[rbp]
  0031f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
  00325	89 85 f0 01 00
	00		 mov	 DWORD PTR tv302[rbp], eax
  0032b	8b 85 f0 01 00
	00		 mov	 eax, DWORD PTR tv302[rbp]
  00331	89 85 94 01 00
	00		 mov	 DWORD PTR $T6[rbp], eax
  00337	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0033c	89 85 b4 01 00
	00		 mov	 DWORD PTR $T7[rbp], eax
  00342	48 8d 95 94 01
	00 00		 lea	 rdx, QWORD PTR $T6[rbp]
  00349	48 8d 8d b4 01
	00 00		 lea	 rcx, QWORD PTR $T7[rbp]
  00350	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00355	0f b6 c0	 movzx	 eax, al
  00358	85 c0		 test	 eax, eax
  0035a	74 0b		 je	 SHORT $LN15@operator

; 763  :                     _State |= ios_base::badbit; // insertion failed, quit

  0035c	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0035f	83 c8 04	 or	 eax, 4
  00362	89 45 04	 mov	 DWORD PTR _State$[rbp], eax

; 764  :                     break;

  00365	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 765  :                 }
; 766  :             }

  00367	e9 3a ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 767  :         }
; 768  : 
; 769  :         _Ostr.width(0);

  0036c	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  00373	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00376	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0037a	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00381	48 03 c8	 add	 rcx, rax
  00384	48 8b c1	 mov	 rax, rcx
  00387	33 d2		 xor	 edx, edx
  00389	48 8b c8	 mov	 rcx, rax
  0038c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?width@ios_base@std@@QEAA_J_J@Z
  00392	90		 npad	 1
  00393	eb 00		 jmp	 SHORT $LN9@operator
$LN23@operator:
$LN9@operator:

; 770  :         _CATCH_IO_(ios_base, _Ostr)
; 771  :     }
; 772  : 
; 773  :     _Ostr.setstate(_State);

  00395	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0039c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0039f	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  003a3	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  003aa	48 03 c8	 add	 rcx, rax
  003ad	48 8b c1	 mov	 rax, rcx
  003b0	45 33 c0	 xor	 r8d, r8d
  003b3	8b 55 04	 mov	 edx, DWORD PTR _State$[rbp]
  003b6	48 8b c8	 mov	 rcx, rax
  003b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z

; 774  :     return _Ostr;

  003bf	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  003c6	48 89 85 d8 01
	00 00		 mov	 QWORD PTR $T8[rbp], rax
  003cd	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  003d1	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  003d6	48 8b 85 d8 01
	00 00		 mov	 rax, QWORD PTR $T8[rbp]

; 775  : }

  003dd	48 8b f8	 mov	 rdi, rax
  003e0	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  003e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$rtcFrameData
  003eb	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  003f0	48 8b c7	 mov	 rax, rdi
  003f3	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  003fa	48 33 cd	 xor	 rcx, rbp
  003fd	e8 00 00 00 00	 call	 __security_check_cookie
  00402	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00409	5f		 pop	 rdi
  0040a	5d		 pop	 rbp
  0040b	c3		 ret	 0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv300 = 484
tv295 = 484
tv139 = 484
tv301 = 488
tv298 = 488
tv296 = 488
tv137 = 488
tv302 = 496
tv299 = 496
tv297 = 496
__$ArrayPad$ = 504
_Ostr$ = 544
_Val$ = 552
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv300 = 484
tv295 = 484
tv139 = 484
tv301 = 488
tv298 = 488
tv296 = 488
tv137 = 488
tv302 = 496
tv299 = 496
tv297 = 496
__$ArrayPad$ = 504
_Ostr$ = 544
_Val$ = 552
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00014	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv300 = 484
tv295 = 484
tv139 = 484
tv301 = 488
tv298 = 488
tv296 = 488
tv137 = 488
tv302 = 496
tv299 = 496
tv297 = 496
__$ArrayPad$ = 504
_Ostr$ = 544
_Val$ = 552
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 68	 lea	 rcx, QWORD PTR _Ok$[rbp]
  00018	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_State$ = 4
_Count$ = 40
_Pad$ = 72
_Ok$ = 104
$T4 = 340
$T5 = 372
$T6 = 404
$T7 = 436
$T8 = 472
tv300 = 484
tv295 = 484
tv139 = 484
tv301 = 488
tv298 = 488
tv296 = 488
tv137 = 488
tv302 = 496
tv299 = 496
tv297 = 496
__$ArrayPad$ = 504
_Ostr$ = 544
_Val$ = 552
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1

; 770  :         _CATCH_IO_(ios_base, _Ostr)

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  00014	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00022	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00029	48 03 c8	 add	 rcx, rax
  0002c	48 8b c1	 mov	 rax, rcx
  0002f	41 b0 01	 mov	 r8b, 1
  00032	ba 04 00 00 00	 mov	 edx, 4
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
  00040	90		 npad	 1
  00041	48 8d 05 00 00
	00 00		 lea	 rax, $LN23@catch$1
  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
  0004f	cc		 int	 3
?catch$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\iomanip
;	COMDAT ??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z
_TEXT	SEGMENT
_Ostr$ = 224
_Manip$ = 232
??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,__int64>, COMDAT

; 423  :     const _Smanip<_Arg>& _Manip) { // insert by calling function with output stream and argument

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__5E3DCDCC_iomanip
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 424  :     (*_Manip._Pfun)(_Ostr, _Manip._Manarg);

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00032	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Ostr$[rbp]
  00039	48 03 c8	 add	 rcx, rax
  0003c	48 8b c1	 mov	 rax, rcx
  0003f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Manip$[rbp]
  00046	48 8b 51 08	 mov	 rdx, QWORD PTR [rcx+8]
  0004a	48 8b c8	 mov	 rcx, rax
  0004d	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Manip$[rbp]
  00054	ff 10		 call	 QWORD PTR [rax]

; 425  :     return _Ostr;

  00056	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ostr$[rbp]

; 426  : }

  0005d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00064	5f		 pop	 rdi
  00065	5d		 pop	 rbp
  00066	c3		 ret	 0
??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor', COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00020	48 8b c8	 mov	 rcx, rax
  00023	e8 00 00 00 00	 call	 ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
  00028	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002f	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00035	48 8b c8	 mov	 rcx, rax
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`vbase destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001e	48 2d 88 00 00
	00		 sub	 rax, 136		; 00000088H
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 ??_D?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXXZ
  0002c	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00032	83 e0 01	 and	 eax, 1
  00035	85 c0		 test	 eax, eax
  00037	74 1a		 je	 SHORT $LN2@scalar
  00039	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00040	48 2d 88 00 00
	00		 sub	 rax, 136		; 00000088H
  00046	ba e8 00 00 00	 mov	 edx, 232		; 000000e8H
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00053	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	48 2d 88 00 00
	00		 sub	 rax, 136		; 00000088H
  00060	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00067	5f		 pop	 rdi
  00068	5d		 pop	 rbp
  00069	c3		 ret	 0
??_G?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z
_TEXT	SEGMENT
this$ = 224
classSize$ = 232
?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00013	48 8b ec	 mov	 rbp, rsp
  00016	48 8b bd e0 00
	00 00		 mov	 rdi, QWORD PTR this$[rbp]
  0001d	33 c0		 xor	 eax, eax
  0001f	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR classSize$[rbp]
  00026	f3 aa		 rep stosb
  00028	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002f	5f		 pop	 rdi
  00030	5d		 pop	 rbp
  00031	c3		 ret	 0
?__autoclassinit2@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAX_K@Z ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::__autoclassinit2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 78 00 00 00	 mov	 edx, 120		; 00000078H
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAAPEAXI@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z
_TEXT	SEGMENT
_State$ = 4
_Mode$ = 256
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate, COMDAT

; 514  :     static int _Getstate(ios_base::openmode _Mode) { // convert open mode to stream state bits

$LN7:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	55		 push	 rbp
  00005	57		 push	 rdi
  00006	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6151C81E_sstream
  00019	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 515  :         int _State = 0;

  0001e	c7 45 04 00 00
	00 00		 mov	 DWORD PTR _State$[rbp], 0

; 516  :         if (!(_Mode & ios_base::in)) {

  00025	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  0002b	83 e0 01	 and	 eax, 1
  0002e	85 c0		 test	 eax, eax
  00030	75 09		 jne	 SHORT $LN2@Getstate

; 517  :             _State |= _Noread;

  00032	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00035	83 c8 04	 or	 eax, 4
  00038	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN2@Getstate:

; 518  :         }
; 519  : 
; 520  :         if (!(_Mode & ios_base::out)) {

  0003b	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00041	83 e0 02	 and	 eax, 2
  00044	85 c0		 test	 eax, eax
  00046	75 09		 jne	 SHORT $LN3@Getstate

; 521  :             _State |= _Constant;

  00048	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  0004b	83 c8 02	 or	 eax, 2
  0004e	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN3@Getstate:

; 522  :         }
; 523  : 
; 524  :         if (_Mode & ios_base::app) {

  00051	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00057	83 e0 08	 and	 eax, 8
  0005a	85 c0		 test	 eax, eax
  0005c	74 09		 je	 SHORT $LN4@Getstate

; 525  :             _State |= _Append;

  0005e	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00061	83 c8 08	 or	 eax, 8
  00064	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN4@Getstate:

; 526  :         }
; 527  : 
; 528  :         if (_Mode & ios_base::ate) {

  00067	8b 85 00 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  0006d	83 e0 04	 and	 eax, 4
  00070	85 c0		 test	 eax, eax
  00072	74 09		 je	 SHORT $LN5@Getstate

; 529  :             _State |= _Atend;

  00074	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]
  00077	83 c8 10	 or	 eax, 16
  0007a	89 45 04	 mov	 DWORD PTR _State$[rbp], eax
$LN5@Getstate:

; 530  :         }
; 531  : 
; 532  :         return _State;

  0007d	8b 45 04	 mov	 eax, DWORD PTR _State$[rbp]

; 533  :     }

  00080	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00087	5f		 pop	 rdi
  00088	5d		 pop	 rbp
  00089	c3		 ret	 0
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ
_TEXT	SEGMENT
tv88 = 192
tv95 = 200
this$ = 240
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT

; 494  :     void _Tidy() noexcept { // discard any allocated buffer and clear pointers

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6151C81E_sstream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 495  :         if (_Mystate & _Allocated) {

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	0f 84 8f 00 00
	00		 je	 $LN2@Tidy

; 496  :             _Al.deallocate(_Ptr_traits::pointer_to(*_Mysb::eback()),

  00034	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00041	48 85 c0	 test	 rax, rax
  00044	74 16		 je	 SHORT $LN4@Tidy
  00046	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00053	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv88[rbp], rax
  0005a	eb 14		 jmp	 SHORT $LN5@Tidy
$LN4@Tidy:
  0005c	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00069	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv88[rbp], rax
$LN5@Tidy:
  00070	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0007d	48 8b 8d c0 00
	00 00		 mov	 rcx, QWORD PTR tv88[rbp]
  00084	48 2b c8	 sub	 rcx, rax
  00087	48 8b c1	 mov	 rax, rcx
  0008a	48 89 85 c8 00
	00 00		 mov	 QWORD PTR tv95[rbp], rax
  00091	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0009e	48 8b c8	 mov	 rcx, rax
  000a1	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z ; std::pointer_traits<char *>::pointer_to
  000a6	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ad	48 83 c1 74	 add	 rcx, 116		; 00000074H
  000b1	48 8b 95 c8 00
	00 00		 mov	 rdx, QWORD PTR tv95[rbp]
  000b8	4c 8b c2	 mov	 r8, rdx
  000bb	48 8b d0	 mov	 rdx, rax
  000be	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
$LN2@Tidy:

; 497  :                 static_cast<typename allocator_traits<allocator_type>::size_type>(
; 498  :                     (_Mysb::pptr() ? _Mysb::epptr() : _Mysb::egptr()) - _Mysb::eback()));
; 499  :         }
; 500  : 
; 501  :         _Mysb::setg(nullptr, nullptr, nullptr);

  000c3	45 33 c9	 xor	 r9d, r9d
  000c6	45 33 c0	 xor	 r8d, r8d
  000c9	33 d2		 xor	 edx, edx
  000cb	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z

; 502  :         _Mysb::setp(nullptr, nullptr);

  000d8	45 33 c0	 xor	 r8d, r8d
  000db	33 d2		 xor	 edx, edx
  000dd	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD0@Z

; 503  :         _Seekhigh = nullptr;

  000ea	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f1	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 504  :         _Mystate &= ~_Allocated;

  000f9	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00100	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00103	83 e0 fe	 and	 eax, -2
  00106	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0010d	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 505  :     }

  00110	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00117	5f		 pop	 rdi
  00118	5d		 pop	 rbp
  00119	c3		 ret	 0
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z
_TEXT	SEGMENT
_Off$ = 8
_Gptr_old$ = 40
_Pptr_old$ = 72
_Seeklow$ = 104
_Seekdist$ = 136
_Newptr$ = 168
tv81 = 376
this$ = 416
__$ReturnUdt$ = 424
_Pos$ = 432
_Mode$ = 440
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos, COMDAT

; 399  :     virtual pos_type seekpos(pos_type _Pos, ios_base::openmode _Mode = ios_base::in | ios_base::out) {

$LN12:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6151C81E_sstream
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 400  :         // change position to _Pos, according to _Mode
; 401  :         const auto _Off      = static_cast<streamoff>(_Pos);

  0002e	48 8b 8d b0 01
	00 00		 mov	 rcx, QWORD PTR _Pos$[rbp]
  00035	e8 00 00 00 00	 call	 ??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ ; std::fpos<_Mbstatet>::operator __int64
  0003a	48 89 45 08	 mov	 QWORD PTR _Off$[rbp], rax

; 402  :         const auto _Gptr_old = _Mysb::gptr();

  0003e	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0004b	48 89 45 28	 mov	 QWORD PTR _Gptr_old$[rbp], rax

; 403  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  0004f	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00056	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00059	83 e0 02	 and	 eax, 2
  0005c	85 c0		 test	 eax, eax
  0005e	74 0d		 je	 SHORT $LN10@seekpos
  00060	48 c7 85 78 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv81[rbp], 0
  0006b	eb 14		 jmp	 SHORT $LN11@seekpos
$LN10@seekpos:
  0006d	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0007a	48 89 85 78 01
	00 00		 mov	 QWORD PTR tv81[rbp], rax
$LN11@seekpos:
  00081	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR tv81[rbp]
  00088	48 89 45 48	 mov	 QWORD PTR _Pptr_old$[rbp], rax

; 404  :         if (_Pptr_old && _Seekhigh < _Pptr_old) { // update high-water pointer

  0008c	48 83 7d 48 00	 cmp	 QWORD PTR _Pptr_old$[rbp], 0
  00091	74 20		 je	 SHORT $LN2@seekpos
  00093	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009a	48 8b 4d 48	 mov	 rcx, QWORD PTR _Pptr_old$[rbp]
  0009e	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  000a2	73 0f		 jae	 SHORT $LN2@seekpos

; 405  :             _Seekhigh = _Pptr_old;

  000a4	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ab	48 8b 4d 48	 mov	 rcx, QWORD PTR _Pptr_old$[rbp]
  000af	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx
$LN2@seekpos:

; 406  :         }
; 407  : 
; 408  :         const auto _Seeklow  = _Mysb::eback();

  000b3	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000c0	48 89 45 68	 mov	 QWORD PTR _Seeklow$[rbp], rax

; 409  :         const auto _Seekdist = _Seekhigh - _Seeklow;

  000c4	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000cb	48 8b 4d 68	 mov	 rcx, QWORD PTR _Seeklow$[rbp]
  000cf	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000d3	48 2b c1	 sub	 rax, rcx
  000d6	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Seekdist$[rbp], rax

; 410  :         if (static_cast<unsigned long long>(_Off) > static_cast<unsigned long long>(_Seekdist)) {

  000dd	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _Seekdist$[rbp]
  000e4	48 39 45 08	 cmp	 QWORD PTR _Off$[rbp], rax
  000e8	76 1f		 jbe	 SHORT $LN3@seekpos

; 411  :             return pos_type(off_type(-1));

  000ea	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  000f1	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  000f8	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  000fd	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00104	e9 ed 00 00 00	 jmp	 $LN1@seekpos
$LN3@seekpos:

; 412  :         }
; 413  : 
; 414  :         if (_Off != 0 && (((_Mode & ios_base::in) && !_Gptr_old) || ((_Mode & ios_base::out) && !_Pptr_old))) {

  00109	48 83 7d 08 00	 cmp	 QWORD PTR _Off$[rbp], 0
  0010e	74 47		 je	 SHORT $LN4@seekpos
  00110	8b 85 b8 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00116	83 e0 01	 and	 eax, 1
  00119	85 c0		 test	 eax, eax
  0011b	74 07		 je	 SHORT $LN6@seekpos
  0011d	48 83 7d 28 00	 cmp	 QWORD PTR _Gptr_old$[rbp], 0
  00122	74 14		 je	 SHORT $LN5@seekpos
$LN6@seekpos:
  00124	8b 85 b8 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  0012a	83 e0 02	 and	 eax, 2
  0012d	85 c0		 test	 eax, eax
  0012f	74 26		 je	 SHORT $LN4@seekpos
  00131	48 83 7d 48 00	 cmp	 QWORD PTR _Pptr_old$[rbp], 0
  00136	75 1f		 jne	 SHORT $LN4@seekpos
$LN5@seekpos:

; 415  :             return pos_type(off_type(-1));

  00138	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  0013f	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00146	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  0014b	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00152	e9 9f 00 00 00	 jmp	 $LN1@seekpos
$LN4@seekpos:

; 416  :         }
; 417  : 
; 418  :         const auto _Newptr = _Seeklow + _Off; // may perform nullptr + 0

  00157	48 8b 45 08	 mov	 rax, QWORD PTR _Off$[rbp]
  0015b	48 8b 4d 68	 mov	 rcx, QWORD PTR _Seeklow$[rbp]
  0015f	48 03 c8	 add	 rcx, rax
  00162	48 8b c1	 mov	 rax, rcx
  00165	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _Newptr$[rbp], rax

; 419  :         if ((_Mode & ios_base::in) && _Gptr_old) {

  0016c	8b 85 b8 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00172	83 e0 01	 and	 eax, 1
  00175	85 c0		 test	 eax, eax
  00177	74 2a		 je	 SHORT $LN7@seekpos
  00179	48 83 7d 28 00	 cmp	 QWORD PTR _Gptr_old$[rbp], 0
  0017e	74 23		 je	 SHORT $LN7@seekpos

; 420  :             _Mysb::setg(_Seeklow, _Newptr, _Seekhigh);

  00180	48 8b 85 a0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00187	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  0018b	4c 8b 85 a8 00
	00 00		 mov	 r8, QWORD PTR _Newptr$[rbp]
  00192	48 8b 55 68	 mov	 rdx, QWORD PTR _Seeklow$[rbp]
  00196	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0019d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
$LN7@seekpos:

; 421  :         }
; 422  : 
; 423  :         if ((_Mode & ios_base::out) && _Pptr_old) {

  001a3	8b 85 b8 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  001a9	83 e0 02	 and	 eax, 2
  001ac	85 c0		 test	 eax, eax
  001ae	74 2f		 je	 SHORT $LN8@seekpos
  001b0	48 83 7d 48 00	 cmp	 QWORD PTR _Pptr_old$[rbp], 0
  001b5	74 28		 je	 SHORT $LN8@seekpos

; 424  :             _Mysb::setp(_Seeklow, _Newptr, _Mysb::epptr());

  001b7	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  001c4	4c 8b c8	 mov	 r9, rax
  001c7	4c 8b 85 a8 00
	00 00		 mov	 r8, QWORD PTR _Newptr$[rbp]
  001ce	48 8b 55 68	 mov	 rdx, QWORD PTR _Seeklow$[rbp]
  001d2	48 8b 8d a0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
$LN8@seekpos:

; 425  :         }
; 426  : 
; 427  :         return pos_type(_Off);

  001df	48 8b 55 08	 mov	 rdx, QWORD PTR _Off$[rbp]
  001e3	48 8b 8d a8 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  001ea	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  001ef	48 8b 85 a8 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
$LN1@seekpos:

; 428  :     }

  001f6	48 8d a5 88 01
	00 00		 lea	 rsp, QWORD PTR [rbp+392]
  001fd	5f		 pop	 rdi
  001fe	5d		 pop	 rbp
  001ff	c3		 ret	 0
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekpos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z
_TEXT	SEGMENT
_Gptr_old$ = 8
_Pptr_old$ = 40
_Seeklow$ = 72
_Seekdist$ = 104
_Newoff$ = 136
_Both$1 = 164
_Newptr$ = 200
tv92 = 404
tv79 = 408
this$ = 448
__$ReturnUdt$ = 456
_Off$ = 464
_Way$ = 472
_Mode$ = 480
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff, COMDAT

; 338  :         off_type _Off, ios_base::seekdir _Way, ios_base::openmode _Mode = ios_base::in | ios_base::out) {

$LN25:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec c8 01
	00 00		 sub	 rsp, 456		; 000001c8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6151C81E_sstream
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 339  :         // change position by _Off, according to _Way, _Mode
; 340  :         const auto _Gptr_old = _Mysb::gptr();

  0002e	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0003b	48 89 45 08	 mov	 QWORD PTR _Gptr_old$[rbp], rax

; 341  :         const auto _Pptr_old = (_Mystate & _Constant) ? nullptr : _Mysb::pptr();

  0003f	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00046	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00049	83 e0 02	 and	 eax, 2
  0004c	85 c0		 test	 eax, eax
  0004e	74 0d		 je	 SHORT $LN23@seekoff
  00050	48 c7 85 98 01
	00 00 00 00 00
	00		 mov	 QWORD PTR tv79[rbp], 0
  0005b	eb 14		 jmp	 SHORT $LN24@seekoff
$LN23@seekoff:
  0005d	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0006a	48 89 85 98 01
	00 00		 mov	 QWORD PTR tv79[rbp], rax
$LN24@seekoff:
  00071	48 8b 85 98 01
	00 00		 mov	 rax, QWORD PTR tv79[rbp]
  00078	48 89 45 28	 mov	 QWORD PTR _Pptr_old$[rbp], rax

; 342  :         if (_Pptr_old && _Seekhigh < _Pptr_old) { // update high-water pointer

  0007c	48 83 7d 28 00	 cmp	 QWORD PTR _Pptr_old$[rbp], 0
  00081	74 20		 je	 SHORT $LN4@seekoff
  00083	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008a	48 8b 4d 28	 mov	 rcx, QWORD PTR _Pptr_old$[rbp]
  0008e	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  00092	73 0f		 jae	 SHORT $LN4@seekoff

; 343  :             _Seekhigh = _Pptr_old;

  00094	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009b	48 8b 4d 28	 mov	 rcx, QWORD PTR _Pptr_old$[rbp]
  0009f	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx
$LN4@seekoff:

; 344  :         }
; 345  : 
; 346  :         const auto _Seeklow  = _Mysb::eback();

  000a3	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000b0	48 89 45 48	 mov	 QWORD PTR _Seeklow$[rbp], rax

; 347  :         const auto _Seekdist = _Seekhigh - _Seeklow;

  000b4	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bb	48 8b 4d 48	 mov	 rcx, QWORD PTR _Seeklow$[rbp]
  000bf	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000c3	48 2b c1	 sub	 rax, rcx
  000c6	48 89 45 68	 mov	 QWORD PTR _Seekdist$[rbp], rax

; 348  :         off_type _Newoff;
; 349  :         switch (_Way) {

  000ca	8b 85 d8 01 00
	00		 mov	 eax, DWORD PTR _Way$[rbp]
  000d0	89 85 94 01 00
	00		 mov	 DWORD PTR tv92[rbp], eax
  000d6	83 bd 94 01 00
	00 00		 cmp	 DWORD PTR tv92[rbp], 0
  000dd	74 17		 je	 SHORT $LN5@seekoff
  000df	83 bd 94 01 00
	00 01		 cmp	 DWORD PTR tv92[rbp], 1
  000e6	74 2e		 je	 SHORT $LN7@seekoff
  000e8	83 bd 94 01 00
	00 02		 cmp	 DWORD PTR tv92[rbp], 2
  000ef	74 15		 je	 SHORT $LN6@seekoff
  000f1	e9 9e 00 00 00	 jmp	 $LN15@seekoff
$LN5@seekoff:

; 350  :         case ios_base::beg:
; 351  :             _Newoff = 0;

  000f6	48 c7 85 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR _Newoff$[rbp], 0

; 352  :             break;

  00101	e9 ad 00 00 00	 jmp	 $LN2@seekoff
$LN6@seekoff:

; 353  :         case ios_base::end:
; 354  :             _Newoff = _Seekdist;

  00106	48 8b 45 68	 mov	 rax, QWORD PTR _Seekdist$[rbp]
  0010a	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Newoff$[rbp], rax

; 355  :             break;

  00111	e9 9d 00 00 00	 jmp	 $LN2@seekoff
$LN7@seekoff:

; 356  :         case ios_base::cur:
; 357  :             {
; 358  :                 constexpr auto _Both = ios_base::in | ios_base::out;

  00116	c7 85 a4 00 00
	00 03 00 00 00	 mov	 DWORD PTR _Both$1[rbp], 3

; 359  :                 if ((_Mode & _Both)
; 360  :                     != _Both) { // prohibited by N4727 [stringbuf.virtuals] Table 107 "seekoff positioning"

  00120	8b 85 e0 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00126	83 e0 03	 and	 eax, 3
  00129	83 f8 03	 cmp	 eax, 3
  0012c	74 66		 je	 SHORT $LN8@seekoff

; 361  :                     if (_Mode & ios_base::in) {

  0012e	8b 85 e0 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00134	83 e0 01	 and	 eax, 1
  00137	85 c0		 test	 eax, eax
  00139	74 27		 je	 SHORT $LN9@seekoff

; 362  :                         if (_Gptr_old || !_Seeklow) {

  0013b	48 83 7d 08 00	 cmp	 QWORD PTR _Gptr_old$[rbp], 0
  00140	75 07		 jne	 SHORT $LN12@seekoff
  00142	48 83 7d 48 00	 cmp	 QWORD PTR _Seeklow$[rbp], 0
  00147	75 17		 jne	 SHORT $LN11@seekoff
$LN12@seekoff:

; 363  :                             _Newoff = _Gptr_old - _Seeklow;

  00149	48 8b 45 48	 mov	 rax, QWORD PTR _Seeklow$[rbp]
  0014d	48 8b 4d 08	 mov	 rcx, QWORD PTR _Gptr_old$[rbp]
  00151	48 2b c8	 sub	 rcx, rax
  00154	48 8b c1	 mov	 rax, rcx
  00157	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Newoff$[rbp], rax

; 364  :                             break;

  0015e	eb 53		 jmp	 SHORT $LN2@seekoff
$LN11@seekoff:

; 365  :                         }

  00160	eb 32		 jmp	 SHORT $LN10@seekoff
$LN9@seekoff:

; 366  :                     } else if ((_Mode & ios_base::out) && (_Pptr_old || !_Seeklow)) {

  00162	8b 85 e0 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00168	83 e0 02	 and	 eax, 2
  0016b	85 c0		 test	 eax, eax
  0016d	74 25		 je	 SHORT $LN13@seekoff
  0016f	48 83 7d 28 00	 cmp	 QWORD PTR _Pptr_old$[rbp], 0
  00174	75 07		 jne	 SHORT $LN14@seekoff
  00176	48 83 7d 48 00	 cmp	 QWORD PTR _Seeklow$[rbp], 0
  0017b	75 17		 jne	 SHORT $LN13@seekoff
$LN14@seekoff:

; 367  :                         _Newoff = _Pptr_old - _Seeklow;

  0017d	48 8b 45 48	 mov	 rax, QWORD PTR _Seeklow$[rbp]
  00181	48 8b 4d 28	 mov	 rcx, QWORD PTR _Pptr_old$[rbp]
  00185	48 2b c8	 sub	 rcx, rax
  00188	48 8b c1	 mov	 rax, rcx
  0018b	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Newoff$[rbp], rax

; 368  :                         break;

  00192	eb 1f		 jmp	 SHORT $LN2@seekoff
$LN13@seekoff:
$LN10@seekoff:
$LN8@seekoff:
$LN15@seekoff:

; 369  :                     }
; 370  :                 }
; 371  :             }
; 372  : 
; 373  :             // fallthrough
; 374  :         default:
; 375  :             return pos_type(off_type(-1));

  00194	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  0019b	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  001a2	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  001a7	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  001ae	e9 4a 01 00 00	 jmp	 $LN1@seekoff
$LN2@seekoff:

; 376  :         }
; 377  : 
; 378  :         if (static_cast<unsigned long long>(_Off) + _Newoff > static_cast<unsigned long long>(_Seekdist)) {

  001b3	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _Newoff$[rbp]
  001ba	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  001c1	48 03 c8	 add	 rcx, rax
  001c4	48 8b c1	 mov	 rax, rcx
  001c7	48 3b 45 68	 cmp	 rax, QWORD PTR _Seekdist$[rbp]
  001cb	76 1f		 jbe	 SHORT $LN16@seekoff

; 379  :             return pos_type(off_type(-1));

  001cd	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  001d4	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  001db	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  001e0	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  001e7	e9 11 01 00 00	 jmp	 $LN1@seekoff
$LN16@seekoff:

; 380  :         }
; 381  : 
; 382  :         _Off += _Newoff;

  001ec	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _Newoff$[rbp]
  001f3	48 8b 8d d0 01
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  001fa	48 03 c8	 add	 rcx, rax
  001fd	48 8b c1	 mov	 rax, rcx
  00200	48 89 85 d0 01
	00 00		 mov	 QWORD PTR _Off$[rbp], rax

; 383  :         if (_Off != 0 && (((_Mode & ios_base::in) && !_Gptr_old) || ((_Mode & ios_base::out) && !_Pptr_old))) {

  00207	48 83 bd d0 01
	00 00 00	 cmp	 QWORD PTR _Off$[rbp], 0
  0020f	74 47		 je	 SHORT $LN17@seekoff
  00211	8b 85 e0 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00217	83 e0 01	 and	 eax, 1
  0021a	85 c0		 test	 eax, eax
  0021c	74 07		 je	 SHORT $LN19@seekoff
  0021e	48 83 7d 08 00	 cmp	 QWORD PTR _Gptr_old$[rbp], 0
  00223	74 14		 je	 SHORT $LN18@seekoff
$LN19@seekoff:
  00225	8b 85 e0 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  0022b	83 e0 02	 and	 eax, 2
  0022e	85 c0		 test	 eax, eax
  00230	74 26		 je	 SHORT $LN17@seekoff
  00232	48 83 7d 28 00	 cmp	 QWORD PTR _Pptr_old$[rbp], 0
  00237	75 1f		 jne	 SHORT $LN17@seekoff
$LN18@seekoff:

; 384  :             return pos_type(off_type(-1));

  00239	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00240	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  00247	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  0024c	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
  00253	e9 a5 00 00 00	 jmp	 $LN1@seekoff
$LN17@seekoff:

; 385  :         }
; 386  : 
; 387  :         const auto _Newptr = _Seeklow + _Off; // may perform nullptr + 0

  00258	48 8b 85 d0 01
	00 00		 mov	 rax, QWORD PTR _Off$[rbp]
  0025f	48 8b 4d 48	 mov	 rcx, QWORD PTR _Seeklow$[rbp]
  00263	48 03 c8	 add	 rcx, rax
  00266	48 8b c1	 mov	 rax, rcx
  00269	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _Newptr$[rbp], rax

; 388  :         if ((_Mode & ios_base::in) && _Gptr_old) {

  00270	8b 85 e0 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  00276	83 e0 01	 and	 eax, 1
  00279	85 c0		 test	 eax, eax
  0027b	74 2a		 je	 SHORT $LN20@seekoff
  0027d	48 83 7d 08 00	 cmp	 QWORD PTR _Gptr_old$[rbp], 0
  00282	74 23		 je	 SHORT $LN20@seekoff

; 389  :             _Mysb::setg(_Seeklow, _Newptr, _Seekhigh);

  00284	48 8b 85 c0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0028b	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  0028f	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR _Newptr$[rbp]
  00296	48 8b 55 48	 mov	 rdx, QWORD PTR _Seeklow$[rbp]
  0029a	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
$LN20@seekoff:

; 390  :         }
; 391  : 
; 392  :         if ((_Mode & ios_base::out) && _Pptr_old) {

  002a7	8b 85 e0 01 00
	00		 mov	 eax, DWORD PTR _Mode$[rbp]
  002ad	83 e0 02	 and	 eax, 2
  002b0	85 c0		 test	 eax, eax
  002b2	74 2f		 je	 SHORT $LN21@seekoff
  002b4	48 83 7d 28 00	 cmp	 QWORD PTR _Pptr_old$[rbp], 0
  002b9	74 28		 je	 SHORT $LN21@seekoff

; 393  :             _Mysb::setp(_Seeklow, _Newptr, _Mysb::epptr());

  002bb	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  002c8	4c 8b c8	 mov	 r9, rax
  002cb	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR _Newptr$[rbp]
  002d2	48 8b 55 48	 mov	 rdx, QWORD PTR _Seeklow$[rbp]
  002d6	48 8b 8d c0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
$LN21@seekoff:

; 394  :         }
; 395  : 
; 396  :         return pos_type(_Off);

  002e3	48 8b 95 d0 01
	00 00		 mov	 rdx, QWORD PTR _Off$[rbp]
  002ea	48 8b 8d c8 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  002f1	e8 00 00 00 00	 call	 ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ; std::fpos<_Mbstatet>::fpos<_Mbstatet>
  002f6	48 8b 85 c8 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]
$LN1@seekoff:

; 397  :     }

  002fd	48 8d a5 a8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+424]
  00304	5f		 pop	 rdi
  00305	5d		 pop	 rbp
  00306	c3		 ret	 0
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::seekoff
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ
_TEXT	SEGMENT
_Gptr$ = 8
_Pptr$ = 40
_Local_highwater$ = 72
tv142 = 280
__$ArrayPad$ = 288
this$ = 336
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow, COMDAT

; 311  :     virtual int_type underflow() { // get an element from stream, but don't point past it

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 1e 00 00 00	 mov	 ecx, 30
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR [rsp+376]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 20 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6151C81E_sstream
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 312  :         const auto _Gptr = _Mysb::gptr();

  00049	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00056	48 89 45 08	 mov	 QWORD PTR _Gptr$[rbp], rax

; 313  :         if (!_Gptr) { // no character buffer, fail

  0005a	48 83 7d 08 00	 cmp	 QWORD PTR _Gptr$[rbp], 0
  0005f	75 0a		 jne	 SHORT $LN2@underflow

; 314  :             return _Traits::eof();

  00061	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00066	e9 e6 00 00 00	 jmp	 $LN1@underflow
$LN2@underflow:

; 315  :         }
; 316  : 
; 317  :         if (_Gptr < _Mysb::egptr()) {

  0006b	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00078	48 39 45 08	 cmp	 QWORD PTR _Gptr$[rbp], rax
  0007c	73 0e		 jae	 SHORT $LN3@underflow

; 318  :             return _Traits::to_int_type(*_Gptr);

  0007e	48 8b 4d 08	 mov	 rcx, QWORD PTR _Gptr$[rbp]
  00082	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
  00087	e9 c5 00 00 00	 jmp	 $LN1@underflow
$LN3@underflow:

; 319  :         }
; 320  : 
; 321  :         // try to add initialized characters from the put area into the get area
; 322  :         const auto _Pptr = _Mysb::pptr();

  0008c	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00099	48 89 45 28	 mov	 QWORD PTR _Pptr$[rbp], rax

; 323  :         if (!_Pptr || (_Mystate & _Noread)) { // no put area or read disallowed

  0009d	48 83 7d 28 00	 cmp	 QWORD PTR _Pptr$[rbp], 0
  000a2	74 11		 je	 SHORT $LN5@underflow
  000a4	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000ab	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000ae	83 e0 04	 and	 eax, 4
  000b1	85 c0		 test	 eax, eax
  000b3	74 0a		 je	 SHORT $LN4@underflow
$LN5@underflow:

; 324  :             return _Traits::eof();

  000b5	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000ba	e9 92 00 00 00	 jmp	 $LN1@underflow
$LN4@underflow:

; 325  :         }
; 326  : 
; 327  :         const auto _Local_highwater = (_STD max)(_Seekhigh, _Pptr);

  000bf	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c6	48 83 c0 68	 add	 rax, 104		; 00000068H
  000ca	48 8d 55 28	 lea	 rdx, QWORD PTR _Pptr$[rbp]
  000ce	48 8b c8	 mov	 rcx, rax
  000d1	e8 00 00 00 00	 call	 ??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z ; std::max<char *>
  000d6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d9	48 89 45 48	 mov	 QWORD PTR _Local_highwater$[rbp], rax

; 328  :         if (_Local_highwater <= _Gptr) { // nothing in the put area to take

  000dd	48 8b 45 08	 mov	 rax, QWORD PTR _Gptr$[rbp]
  000e1	48 39 45 48	 cmp	 QWORD PTR _Local_highwater$[rbp], rax
  000e5	77 07		 ja	 SHORT $LN6@underflow

; 329  :             return _Traits::eof();

  000e7	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000ec	eb 63		 jmp	 SHORT $LN1@underflow
$LN6@underflow:

; 330  :         }
; 331  : 
; 332  :         _Seekhigh = _Local_highwater;

  000ee	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f5	48 8b 4d 48	 mov	 rcx, QWORD PTR _Local_highwater$[rbp]
  000f9	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 333  :         _Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Local_highwater);

  000fd	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00104	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0010a	48 89 85 18 01
	00 00		 mov	 QWORD PTR tv142[rbp], rax
  00111	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0011e	4c 8b 4d 48	 mov	 r9, QWORD PTR _Local_highwater$[rbp]
  00122	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR tv142[rbp]
  00129	4c 8b c1	 mov	 r8, rcx
  0012c	48 8b d0	 mov	 rdx, rax
  0012f	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00136	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z

; 334  :         return _Traits::to_int_type(*_Mysb::gptr());

  0013c	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00143	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00149	48 8b c8	 mov	 rcx, rax
  0014c	e8 00 00 00 00	 call	 ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z ; std::_Narrow_char_traits<char,int>::to_int_type
$LN1@underflow:

; 335  :     }

  00151	48 8b f8	 mov	 rdi, rax
  00154	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00158	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ$rtcFrameData
  0015f	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00164	48 8b c7	 mov	 rax, rdi
  00167	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  0016e	48 33 cd	 xor	 rcx, rbp
  00171	e8 00 00 00 00	 call	 __security_check_cookie
  00176	48 8d a5 38 01
	00 00		 lea	 rsp, QWORD PTR [rbp+312]
  0017d	5f		 pop	 rdi
  0017e	5d		 pop	 rbp
  0017f	c3		 ret	 0
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHXZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::underflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
_TEXT	SEGMENT
_Gptr$ = 8
$T1 = 228
$T2 = 260
$T3 = 292
tv143 = 308
this$ = 352
_Meta$ = 360
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail, COMDAT

; 294  :     virtual int_type pbackfail(int_type _Meta = _Traits::eof()) { // put an element back to stream

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 68 01
	00 00		 sub	 rsp, 360		; 00000168H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6151C81E_sstream
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 295  :         const auto _Gptr = _Mysb::gptr();

  00023	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00030	48 89 45 08	 mov	 QWORD PTR _Gptr$[rbp], rax

; 296  :         if (!_Gptr || _Gptr <= _Mysb::eback()
; 297  :             || (!_Traits::eq_int_type(_Traits::eof(), _Meta) && !_Traits::eq(_Traits::to_char_type(_Meta), _Gptr[-1])

  00034	48 83 7d 08 00	 cmp	 QWORD PTR _Gptr$[rbp], 0
  00039	0f 84 84 00 00
	00		 je	 $LN3@pbackfail
  0003f	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0004c	48 39 45 08	 cmp	 QWORD PTR _Gptr$[rbp], rax
  00050	76 71		 jbe	 SHORT $LN3@pbackfail
  00052	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00057	89 85 e4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  0005d	48 8d 95 68 01
	00 00		 lea	 rdx, QWORD PTR _Meta$[rbp]
  00064	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  0006b	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00070	0f b6 c0	 movzx	 eax, al
  00073	85 c0		 test	 eax, eax
  00075	75 53		 jne	 SHORT $LN2@pbackfail
  00077	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  0007e	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  00083	88 85 04 01 00
	00		 mov	 BYTE PTR $T2[rbp], al
  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	48 6b c0 ff	 imul	 rax, rax, -1
  00092	48 8b 4d 08	 mov	 rcx, QWORD PTR _Gptr$[rbp]
  00096	48 03 c8	 add	 rcx, rax
  00099	48 8b c1	 mov	 rax, rcx
  0009c	48 8b d0	 mov	 rdx, rax
  0009f	48 8d 8d 04 01
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  000a6	e8 00 00 00 00	 call	 ?eq@?$_Narrow_char_traits@DH@std@@SA_NAEBD0@Z ; std::_Narrow_char_traits<char,int>::eq
  000ab	0f b6 c0	 movzx	 eax, al
  000ae	85 c0		 test	 eax, eax
  000b0	75 18		 jne	 SHORT $LN2@pbackfail
  000b2	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000b9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000bc	83 e0 02	 and	 eax, 2
  000bf	85 c0		 test	 eax, eax
  000c1	74 07		 je	 SHORT $LN2@pbackfail
$LN3@pbackfail:

; 298  :                 && (_Mystate & _Constant))) { // can't put back, fail
; 299  :             return _Traits::eof();

  000c3	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000c8	eb 6b		 jmp	 SHORT $LN1@pbackfail
$LN2@pbackfail:

; 300  :         }
; 301  : 
; 302  :         // back up one position and store put-back character
; 303  :         _Mysb::gbump(-1);

  000ca	ba ff ff ff ff	 mov	 edx, -1
  000cf	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z

; 304  :         if (!_Traits::eq_int_type(_Traits::eof(), _Meta)) {

  000dc	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  000e1	89 85 24 01 00
	00		 mov	 DWORD PTR $T3[rbp], eax
  000e7	48 8d 95 68 01
	00 00		 lea	 rdx, QWORD PTR _Meta$[rbp]
  000ee	48 8d 8d 24 01
	00 00		 lea	 rcx, QWORD PTR $T3[rbp]
  000f5	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  000fa	0f b6 c0	 movzx	 eax, al
  000fd	85 c0		 test	 eax, eax
  000ff	75 28		 jne	 SHORT $LN4@pbackfail

; 305  :             *_Mysb::gptr() = _Traits::to_char_type(_Meta);

  00101	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  00108	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  0010d	88 85 34 01 00
	00		 mov	 BYTE PTR tv143[rbp], al
  00113	48 8b 8d 60 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0011a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00120	0f b6 8d 34 01
	00 00		 movzx	 ecx, BYTE PTR tv143[rbp]
  00127	88 08		 mov	 BYTE PTR [rax], cl
$LN4@pbackfail:

; 306  :         }
; 307  : 
; 308  :         return _Traits::not_eof(_Meta);

  00129	48 8d 8d 68 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  00130	e8 00 00 00 00	 call	 ?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z ; std::_Narrow_char_traits<char,int>::not_eof
$LN1@pbackfail:

; 309  :     }

  00135	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  0013c	5f		 pop	 rdi
  0013d	5d		 pop	 rbp
  0013e	c3		 ret	 0
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::pbackfail
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z
_TEXT	SEGMENT
_Pptr$ = 8
_Epptr$ = 40
_Oldsize$ = 72
_Oldptr$ = 104
_Newsize$ = 136
_Newptr$ = 168
_New_pnext$ = 200
$T1 = 420
tv212 = 436
tv210 = 436
this$ = 480
_Meta$ = 488
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow, COMDAT

; 237  :     virtual int_type overflow(int_type _Meta = _Traits::eof()) { // put an element to stream

$LN16:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 01
	00 00		 sub	 rsp, 488		; 000001e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6151C81E_sstream
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 238  :         if (_Mystate & _Constant) {

  00023	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0002d	83 e0 02	 and	 eax, 2
  00030	85 c0		 test	 eax, eax
  00032	74 0a		 je	 SHORT $LN2@overflow

; 239  :             return _Traits::eof(); // array nonmutable, fail

  00034	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00039	e9 b2 02 00 00	 jmp	 $LN1@overflow
$LN2@overflow:

; 240  :         }
; 241  : 
; 242  :         if (_Traits::eq_int_type(_Traits::eof(), _Meta)) {

  0003e	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00043	89 85 a4 01 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  00049	48 8d 95 e8 01
	00 00		 lea	 rdx, QWORD PTR _Meta$[rbp]
  00050	48 8d 8d a4 01
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00057	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  0005c	0f b6 c0	 movzx	 eax, al
  0005f	85 c0		 test	 eax, eax
  00061	74 11		 je	 SHORT $LN3@overflow

; 243  :             return _Traits::not_eof(_Meta); // EOF, return success code

  00063	48 8d 8d e8 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  0006a	e8 00 00 00 00	 call	 ?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z ; std::_Narrow_char_traits<char,int>::not_eof
  0006f	e9 7c 02 00 00	 jmp	 $LN1@overflow
$LN3@overflow:

; 244  :         }
; 245  : 
; 246  :         const auto _Pptr  = _Mysb::pptr();

  00074	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00081	48 89 45 08	 mov	 QWORD PTR _Pptr$[rbp], rax

; 247  :         const auto _Epptr = _Mysb::epptr();

  00085	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00092	48 89 45 28	 mov	 QWORD PTR _Epptr$[rbp], rax

; 248  :         if (_Pptr && _Pptr < _Epptr) { // room in buffer, store it

  00096	48 83 7d 08 00	 cmp	 QWORD PTR _Pptr$[rbp], 0
  0009b	74 4f		 je	 SHORT $LN4@overflow
  0009d	48 8b 45 28	 mov	 rax, QWORD PTR _Epptr$[rbp]
  000a1	48 39 45 08	 cmp	 QWORD PTR _Pptr$[rbp], rax
  000a5	73 45		 jae	 SHORT $LN4@overflow

; 249  :             *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  000a7	48 8d 8d e8 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  000ae	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  000b3	88 85 b4 01 00
	00		 mov	 BYTE PTR tv212[rbp], al
  000b9	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
  000c6	0f b6 8d b4 01
	00 00		 movzx	 ecx, BYTE PTR tv212[rbp]
  000cd	88 08		 mov	 BYTE PTR [rax], cl

; 250  :             _Seekhigh        = _Pptr + 1;

  000cf	48 8b 45 08	 mov	 rax, QWORD PTR _Pptr$[rbp]
  000d3	48 ff c0	 inc	 rax
  000d6	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000dd	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 251  :             return _Meta;

  000e1	8b 85 e8 01 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
  000e7	e9 04 02 00 00	 jmp	 $LN1@overflow
$LN4@overflow:

; 252  :         }
; 253  : 
; 254  :         // grow buffer and store element
; 255  :         size_t _Oldsize    = 0;

  000ec	48 c7 45 48 00
	00 00 00	 mov	 QWORD PTR _Oldsize$[rbp], 0

; 256  :         const auto _Oldptr = _Mysb::eback();

  000f4	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00101	48 89 45 68	 mov	 QWORD PTR _Oldptr$[rbp], rax

; 257  :         if (_Pptr) {

  00105	48 83 7d 08 00	 cmp	 QWORD PTR _Pptr$[rbp], 0
  0010a	74 12		 je	 SHORT $LN5@overflow

; 258  :             _Oldsize = static_cast<size_t>(_Epptr - _Oldptr);

  0010c	48 8b 45 68	 mov	 rax, QWORD PTR _Oldptr$[rbp]
  00110	48 8b 4d 28	 mov	 rcx, QWORD PTR _Epptr$[rbp]
  00114	48 2b c8	 sub	 rcx, rax
  00117	48 8b c1	 mov	 rax, rcx
  0011a	48 89 45 48	 mov	 QWORD PTR _Oldsize$[rbp], rax
$LN5@overflow:

; 259  :         }
; 260  : 
; 261  :         size_t _Newsize;
; 262  :         if (_Oldsize < _MINSIZE) {

  0011e	48 83 7d 48 20	 cmp	 QWORD PTR _Oldsize$[rbp], 32 ; 00000020H
  00123	73 0d		 jae	 SHORT $LN6@overflow

; 263  :             _Newsize = _MINSIZE;

  00125	48 c7 85 88 00
	00 00 20 00 00
	00		 mov	 QWORD PTR _Newsize$[rbp], 32 ; 00000020H
  00130	eb 3b		 jmp	 SHORT $LN7@overflow
$LN6@overflow:

; 264  :         } else if (_Oldsize < INT_MAX / 2) { // grow by 50 percent

  00132	48 81 7d 48 ff
	ff ff 3f	 cmp	 QWORD PTR _Oldsize$[rbp], 1073741823 ; 3fffffffH
  0013a	73 10		 jae	 SHORT $LN8@overflow

; 265  :             _Newsize = _Oldsize << 1;

  0013c	48 8b 45 48	 mov	 rax, QWORD PTR _Oldsize$[rbp]
  00140	48 d1 e0	 shl	 rax, 1
  00143	48 89 85 88 00
	00 00		 mov	 QWORD PTR _Newsize$[rbp], rax
  0014a	eb 21		 jmp	 SHORT $LN9@overflow
$LN8@overflow:

; 266  :         } else if (_Oldsize < INT_MAX) {

  0014c	48 81 7d 48 ff
	ff ff 7f	 cmp	 QWORD PTR _Oldsize$[rbp], 2147483647 ; 7fffffffH
  00154	73 0d		 jae	 SHORT $LN10@overflow

; 267  :             _Newsize = INT_MAX;

  00156	48 c7 85 88 00
	00 00 ff ff ff
	7f		 mov	 QWORD PTR _Newsize$[rbp], 2147483647 ; 7fffffffH

; 268  :         } else { // buffer can't grow, fail

  00161	eb 0a		 jmp	 SHORT $LN11@overflow
$LN10@overflow:

; 269  :             return _Traits::eof();

  00163	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00168	e9 83 01 00 00	 jmp	 $LN1@overflow
$LN11@overflow:
$LN9@overflow:
$LN7@overflow:

; 270  :         }
; 271  : 
; 272  :         const auto _Newptr = _Unfancy(_Al.allocate(_Newsize));

  0016d	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00174	48 83 c0 74	 add	 rax, 116		; 00000074H
  00178	48 8b 95 88 00
	00 00		 mov	 rdx, QWORD PTR _Newsize$[rbp]
  0017f	48 8b c8	 mov	 rcx, rax
  00182	e8 00 00 00 00	 call	 ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ; std::allocator<char>::allocate
  00187	48 8b c8	 mov	 rcx, rax
  0018a	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  0018f	48 89 85 a8 00
	00 00		 mov	 QWORD PTR _Newptr$[rbp], rax

; 273  :         _Traits::copy(_Newptr, _Oldptr, _Oldsize);

  00196	4c 8b 45 48	 mov	 r8, QWORD PTR _Oldsize$[rbp]
  0019a	48 8b 55 68	 mov	 rdx, QWORD PTR _Oldptr$[rbp]
  0019e	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Newptr$[rbp]
  001a5	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 274  : 
; 275  :         const auto _New_pnext = _Newptr + _Oldsize;

  001aa	48 8b 45 48	 mov	 rax, QWORD PTR _Oldsize$[rbp]
  001ae	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Newptr$[rbp]
  001b5	48 03 c8	 add	 rcx, rax
  001b8	48 8b c1	 mov	 rax, rcx
  001bb	48 89 85 c8 00
	00 00		 mov	 QWORD PTR _New_pnext$[rbp], rax

; 276  :         _Seekhigh             = _New_pnext + 1; // to include _Meta

  001c2	48 8b 85 c8 00
	00 00		 mov	 rax, QWORD PTR _New_pnext$[rbp]
  001c9	48 ff c0	 inc	 rax
  001cc	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  001d3	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 277  : 
; 278  :         _Mysb::setp(_Newptr, _New_pnext, _Newptr + _Newsize);

  001d7	48 8b 85 88 00
	00 00		 mov	 rax, QWORD PTR _Newsize$[rbp]
  001de	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Newptr$[rbp]
  001e5	48 03 c8	 add	 rcx, rax
  001e8	48 8b c1	 mov	 rax, rcx
  001eb	4c 8b c8	 mov	 r9, rax
  001ee	4c 8b 85 c8 00
	00 00		 mov	 r8, QWORD PTR _New_pnext$[rbp]
  001f5	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR _Newptr$[rbp]
  001fc	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00203	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z

; 279  :         if (_Mystate & _Noread) { // maintain eback() == allocated pointer invariant

  00209	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00210	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00213	83 e0 04	 and	 eax, 4
  00216	85 c0		 test	 eax, eax
  00218	74 20		 je	 SHORT $LN12@overflow

; 280  :             _Mysb::setg(_Newptr, nullptr, _Newptr);

  0021a	4c 8b 8d a8 00
	00 00		 mov	 r9, QWORD PTR _Newptr$[rbp]
  00221	45 33 c0	 xor	 r8d, r8d
  00224	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR _Newptr$[rbp]
  0022b	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00232	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z

; 281  :         } else { // if readable, set the get area to initialized region

  00238	eb 40		 jmp	 SHORT $LN13@overflow
$LN12@overflow:

; 282  :             _Mysb::setg(_Newptr, _Newptr + (_Mysb::gptr() - _Oldptr), _Seekhigh);

  0023a	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00241	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00247	48 2b 45 68	 sub	 rax, QWORD PTR _Oldptr$[rbp]
  0024b	48 8b 8d a8 00
	00 00		 mov	 rcx, QWORD PTR _Newptr$[rbp]
  00252	48 03 c8	 add	 rcx, rax
  00255	48 8b c1	 mov	 rax, rcx
  00258	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0025f	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  00263	4c 8b c0	 mov	 r8, rax
  00266	48 8b 95 a8 00
	00 00		 mov	 rdx, QWORD PTR _Newptr$[rbp]
  0026d	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00274	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z
$LN13@overflow:

; 283  :         }
; 284  : 
; 285  :         if (_Mystate & _Allocated) {

  0027a	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00281	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00284	83 e0 01	 and	 eax, 1
  00287	85 c0		 test	 eax, eax
  00289	74 20		 je	 SHORT $LN14@overflow

; 286  :             _Al.deallocate(_Ptr_traits::pointer_to(*_Oldptr), _Oldsize);

  0028b	48 8b 4d 68	 mov	 rcx, QWORD PTR _Oldptr$[rbp]
  0028f	e8 00 00 00 00	 call	 ?pointer_to@?$pointer_traits@PEAD@std@@SAPEADAEAD@Z ; std::pointer_traits<char *>::pointer_to
  00294	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0029b	48 83 c1 74	 add	 rcx, 116		; 00000074H
  0029f	4c 8b 45 48	 mov	 r8, QWORD PTR _Oldsize$[rbp]
  002a3	48 8b d0	 mov	 rdx, rax
  002a6	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
$LN14@overflow:

; 287  :         }
; 288  : 
; 289  :         _Mystate |= _Allocated;

  002ab	48 8b 85 e0 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  002b2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002b5	83 c8 01	 or	 eax, 1
  002b8	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002bf	89 41 70	 mov	 DWORD PTR [rcx+112], eax

; 290  :         *_Mysb::_Pninc() = _Traits::to_char_type(_Meta);

  002c2	48 8d 8d e8 01
	00 00		 lea	 rcx, QWORD PTR _Meta$[rbp]
  002c9	e8 00 00 00 00	 call	 ?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z ; std::_Narrow_char_traits<char,int>::to_char_type
  002ce	88 85 b4 01 00
	00		 mov	 BYTE PTR tv210[rbp], al
  002d4	48 8b 8d e0 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  002db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ
  002e1	0f b6 8d b4 01
	00 00		 movzx	 ecx, BYTE PTR tv210[rbp]
  002e8	88 08		 mov	 BYTE PTR [rax], cl

; 291  :         return _Meta;

  002ea	8b 85 e8 01 00
	00		 mov	 eax, DWORD PTR _Meta$[rbp]
$LN1@overflow:

; 292  :     }

  002f0	48 8d a5 c8 01
	00 00		 lea	 rsp, QWORD PTR [rbp+456]
  002f7	5f		 pop	 rdi
  002f8	5d		 pop	 rbp
  002f9	c3		 ret	 0
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MEAAHH@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::overflow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
_Result$ = 8
_View$ = 72
$T5 = 308
__$ArrayPad$ = 328
this$ = 368
__$ReturnUdt$ = 376
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT

; 156  :     {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001d	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00038	48 33 c5	 xor	 rax, rbp
  0003b	48 89 85 48 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00042	c7 85 34 01 00
	00 00 00 00 00	 mov	 DWORD PTR $T5[rbp], 0
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6151C81E_sstream
  00053	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 157  :         _Mystr _Result(_Al);

  00058	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	48 83 c0 74	 add	 rax, 116		; 00000074H
  00063	48 8b d0	 mov	 rdx, rax
  00066	48 8d 4d 08	 lea	 rcx, QWORD PTR _Result$[rbp]
  0006a	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  0006f	90		 npad	 1

; 158  :         const auto _View = _Get_buffer_view();

  00070	48 8d 55 48	 lea	 rdx, QWORD PTR _View$[rbp]
  00074	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007b	e8 00 00 00 00	 call	 ?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Get_buffer_view

; 159  :         if (_View._Ptr) {

  00080	48 83 7d 48 00	 cmp	 QWORD PTR _View$[rbp], 0
  00085	74 11		 je	 SHORT $LN2@str

; 160  :             _Result.assign(_View._Ptr, _View._Size);

  00087	4c 8b 45 50	 mov	 r8, QWORD PTR _View$[rbp+8]
  0008b	48 8b 55 48	 mov	 rdx, QWORD PTR _View$[rbp]
  0008f	48 8d 4d 08	 lea	 rcx, QWORD PTR _Result$[rbp]
  00093	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN2@str:

; 161  :         }
; 162  :         return _Result;

  00098	48 8d 55 08	 lea	 rdx, QWORD PTR _Result$[rbp]
  0009c	48 8b 8d 78 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  000a3	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  000a8	8b 85 34 01 00
	00		 mov	 eax, DWORD PTR $T5[rbp]
  000ae	83 c8 01	 or	 eax, 1
  000b1	89 85 34 01 00
	00		 mov	 DWORD PTR $T5[rbp], eax
  000b7	48 8d 4d 08	 lea	 rcx, QWORD PTR _Result$[rbp]
  000bb	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  000c0	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 163  :     }

  000c7	48 8b f8	 mov	 rdi, rax
  000ca	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$rtcFrameData
  000d5	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000da	48 8b c7	 mov	 rax, rdi
  000dd	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000e4	48 33 cd	 xor	 rcx, rbp
  000e7	e8 00 00 00 00	 call	 __security_check_cookie
  000ec	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  000f3	5f		 pop	 rdi
  000f4	5d		 pop	 rbp
  000f5	c3		 ret	 0
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Result$ = 8
_View$ = 72
$T5 = 308
__$ArrayPad$ = 328
this$ = 368
__$ReturnUdt$ = 376
?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA PROC ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR _Result$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA ENDP ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Result$ = 8
_View$ = 72
$T5 = 308
__$ArrayPad$ = 328
this$ = 368
__$ReturnUdt$ = 376
?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA PROC ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 08	 lea	 rcx, QWORD PTR _Result$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$0@?0??str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ@4HA ENDP ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ
_TEXT	SEGMENT
_Result$ = 8
_Base$4 = 56
_Base$5 = 88
$T6 = 312
__$ArrayPad$ = 328
this$ = 368
__$ReturnUdt$ = 376
?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Get_buffer_view, COMDAT

; 133  :     _NODISCARD _Buffer_view _Get_buffer_view() const noexcept {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	56		 push	 rsi
  0000c	57		 push	 rdi
  0000d	48 81 ec 70 01
	00 00		 sub	 rsp, 368		; 00000170H
  00014	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00019	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001e	b9 24 00 00 00	 mov	 ecx, 36			; 00000024H
  00023	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00028	f3 ab		 rep stosd
  0002a	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  00032	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00039	48 33 c5	 xor	 rax, rbp
  0003c	48 89 85 48 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6151C81E_sstream
  0004a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 134  :         _Buffer_view _Result{};

  0004f	48 8d 45 08	 lea	 rax, QWORD PTR _Result$[rbp]
  00053	48 8b f8	 mov	 rdi, rax
  00056	33 c0		 xor	 eax, eax
  00058	b9 18 00 00 00	 mov	 ecx, 24
  0005d	f3 aa		 rep stosb

; 135  :         if ((!(_Mystate & _Constant) || (_Mystate & _From_rvalue)) && _Mysb::pptr()) {

  0005f	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00066	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00069	83 e0 02	 and	 eax, 2
  0006c	85 c0		 test	 eax, eax
  0006e	74 11		 je	 SHORT $LN4@Get_buffer
  00070	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00077	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0007a	83 e0 20	 and	 eax, 32			; 00000020H
  0007d	85 c0		 test	 eax, eax
  0007f	74 7e		 je	 SHORT $LN2@Get_buffer
$LN4@Get_buffer:
  00081	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0008e	48 85 c0	 test	 rax, rax
  00091	74 6c		 je	 SHORT $LN2@Get_buffer

; 136  :             // writable, make string view from write buffer
; 137  :             const auto _Base = _Mysb::pbase();

  00093	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000a0	48 89 45 38	 mov	 QWORD PTR _Base$4[rbp], rax

; 138  :             _Result._Ptr     = _Base;

  000a4	48 8b 45 38	 mov	 rax, QWORD PTR _Base$4[rbp]
  000a8	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax

; 139  :             _Result._Size    = static_cast<_Mysize_type>((_STD max)(_Mysb::pptr(), _Seekhigh) - _Base);

  000ac	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000b9	48 89 85 38 01
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  000c0	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000c7	48 83 c0 68	 add	 rax, 104		; 00000068H
  000cb	48 8b d0	 mov	 rdx, rax
  000ce	48 8d 8d 38 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000d5	e8 00 00 00 00	 call	 ??$max@PEAD@std@@YAAEBQEADAEBQEAD0@Z ; std::max<char *>
  000da	48 8b 4d 38	 mov	 rcx, QWORD PTR _Base$4[rbp]
  000de	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e1	48 2b c1	 sub	 rax, rcx
  000e4	48 89 45 10	 mov	 QWORD PTR _Result$[rbp+8], rax

; 140  :             _Result._Res     = static_cast<_Mysize_type>(_Mysb::epptr() - _Base);

  000e8	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  000f5	48 2b 45 38	 sub	 rax, QWORD PTR _Base$4[rbp]
  000f9	48 89 45 18	 mov	 QWORD PTR _Result$[rbp+16], rax
  000fd	eb 59		 jmp	 SHORT $LN3@Get_buffer
$LN2@Get_buffer:

; 141  :         } else if (!(_Mystate & _Noread) && _Mysb::gptr()) {

  000ff	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00106	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00109	83 e0 04	 and	 eax, 4
  0010c	85 c0		 test	 eax, eax
  0010e	75 48		 jne	 SHORT $LN3@Get_buffer
  00110	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0011d	48 85 c0	 test	 rax, rax
  00120	74 36		 je	 SHORT $LN3@Get_buffer

; 142  :             // readable, make string view from read buffer
; 143  :             const auto _Base = _Mysb::eback();

  00122	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  0012f	48 89 45 58	 mov	 QWORD PTR _Base$5[rbp], rax

; 144  :             _Result._Ptr     = _Base;

  00133	48 8b 45 58	 mov	 rax, QWORD PTR _Base$5[rbp]
  00137	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax

; 145  :             _Result._Size    = static_cast<_Mysize_type>(_Mysb::egptr() - _Base);

  0013b	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00142	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ
  00148	48 2b 45 58	 sub	 rax, QWORD PTR _Base$5[rbp]
  0014c	48 89 45 10	 mov	 QWORD PTR _Result$[rbp+8], rax

; 146  :             _Result._Res     = _Result._Size;

  00150	48 8b 45 10	 mov	 rax, QWORD PTR _Result$[rbp+8]
  00154	48 89 45 18	 mov	 QWORD PTR _Result$[rbp+16], rax
$LN3@Get_buffer:

; 147  :         }
; 148  :         return _Result;

  00158	48 8d 45 08	 lea	 rax, QWORD PTR _Result$[rbp]
  0015c	48 8b bd 78 01
	00 00		 mov	 rdi, QWORD PTR __$ReturnUdt$[rbp]
  00163	48 8b f0	 mov	 rsi, rax
  00166	b9 18 00 00 00	 mov	 ecx, 24
  0016b	f3 a4		 rep movsb
  0016d	48 8b 85 78 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 149  :     }

  00174	48 8b f8	 mov	 rdi, rax
  00177	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0017b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ$rtcFrameData
  00182	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00187	48 8b c7	 mov	 rax, rdi
  0018a	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00191	48 33 cd	 xor	 rcx, rbp
  00194	e8 00 00 00 00	 call	 __security_check_cookie
  00199	48 8d a5 50 01
	00 00		 lea	 rsp, QWORD PTR [rbp+336]
  001a0	5f		 pop	 rdi
  001a1	5e		 pop	 rsi
  001a2	5d		 pop	 rbp
  001a3	c3		 ret	 0
?_Get_buffer_view@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AU_Buffer_view@12@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Get_buffer_view
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 110  :     virtual ~basic_stringbuf() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6151C81E_sstream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0002d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 111  :         _Tidy();

  00030	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00037	e8 00 00 00 00	 call	 ?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IEAAXXZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Tidy

; 112  :     }

  0003c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00049	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 224
_Mode$ = 232
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z PROC ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 38   :     explicit basic_stringbuf(ios_base::openmode _Mode) : _Seekhigh(nullptr), _Mystate(_Getstate(_Mode)), _Al() {}

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6151C81E_sstream
  0001e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00023	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ
  00030	90		 npad	 1
  00031	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0003f	48 89 08	 mov	 QWORD PTR [rax], rcx
  00042	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00049	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  00051	8b 8d e8 00 00
	00		 mov	 ecx, DWORD PTR _Mode$[rbp]
  00057	e8 00 00 00 00	 call	 ?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAHH@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::_Getstate
  0005c	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00063	89 41 70	 mov	 DWORD PTR [rcx+112], eax
  00066	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006d	48 83 c0 74	 add	 rax, 116		; 00000074H
  00071	48 8b c8	 mov	 rcx, rax
  00074	e8 00 00 00 00	 call	 ??0?$allocator@D@std@@QEAA@XZ ; std::allocator<char>::allocator<char>
  00079	90		 npad	 1
  0007a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00081	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00088	5f		 pop	 rdi
  00089	5d		 pop	 rbp
  0008a	c3		 ret	 0
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ENDP ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
_Mode$ = 232
?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA PROC ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	5f		 pop	 rdi
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA ENDP ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
_Mode$ = 232
?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA PROC ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	5f		 pop	 rdi
  00026	5d		 pop	 rbp
  00027	c3		 ret	 0
?dtor$0@?0???0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z@4HA ENDP ; `std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
$T1 = 196
this$ = 256
__$ReturnUdt$ = 264
?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str, COMDAT

; 746  :     {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6151C81E_sstream
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 747  :         return _Stringbuffer.str();

  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 83 c0 08	 add	 rax, 8
  00039	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR __$ReturnUdt$[rbp]
  00040	48 8b c8	 mov	 rcx, rax
  00043	e8 00 00 00 00	 call	 ?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::str
  00048	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0004e	83 c8 01	 or	 eax, 1
  00051	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  00057	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 748  :     }

  0005e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00065	5f		 pop	 rdi
  00066	5d		 pop	 rbp
  00067	c3		 ret	 0
?str@?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 735  :     virtual ~basic_ostringstream() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6151C81E_sstream
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 80 78 ff
	ff ff		 mov	 rax, QWORD PTR [rax-136]
  0002d	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  0003f	48 89 94 01 78
	ff ff ff	 mov	 QWORD PTR [rcx+rax-136], rdx
  00047	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004e	48 8b 80 78 ff
	ff ff		 mov	 rax, QWORD PTR [rax-136]
  00055	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00059	48 2d 88 00 00
	00		 sub	 rax, 136		; 00000088H
  0005f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00066	48 8b 89 78 ff
	ff ff		 mov	 rcx, QWORD PTR [rcx-136]
  0006d	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  00071	48 8b 95 e0 00
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00078	89 84 0a 74 ff
	ff ff		 mov	 DWORD PTR [rdx+rcx-140], eax
  0007f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00086	48 2d 80 00 00
	00		 sub	 rax, 128		; 00000080H
  0008c	48 8b c8	 mov	 rcx, rax
  0008f	e8 00 00 00 00	 call	 ??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::~basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  00094	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009b	48 83 e8 78	 sub	 rax, 120		; 00000078H
  0009f	48 8b c8	 mov	 rcx, rax
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  000a8	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  000af	5f		 pop	 rdi
  000b0	5d		 pop	 rbp
  000b1	c3		 ret	 0
??1?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UEAA@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::~basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\sstream
;	COMDAT ??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 196
this$ = 256
$initVBases$ = 264
??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 680  :     basic_ostringstream() : _Mybase(_STD addressof(_Stringbuffer)), _Stringbuffer(ios_base::out) {}

$LN8:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__6151C81E_sstream
  00028	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0002d	83 bd 08 01 00
	00 00		 cmp	 DWORD PTR $initVBases$[rbp], 0
  00034	74 37		 je	 SHORT $LN2@basic_ostr
  00036	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_8?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B@
  00044	48 89 08	 mov	 QWORD PTR [rax], rcx
  00047	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004e	48 05 88 00 00
	00		 add	 rax, 136		; 00000088H
  00054	48 8b c8	 mov	 rcx, rax
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ
  0005d	90		 npad	 1
  0005e	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  00064	83 c8 01	 or	 eax, 1
  00067	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
$LN2@basic_ostr:
  0006d	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00074	48 83 c0 08	 add	 rax, 8
  00078	48 8b c8	 mov	 rcx, rax
  0007b	e8 00 00 00 00	 call	 ??$addressof@V?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPEAV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AEAV10@@Z ; std::addressof<std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> > >
  00080	45 33 c9	 xor	 r9d, r9d
  00083	45 33 c0	 xor	 r8d, r8d
  00086	48 8b d0	 mov	 rdx, rax
  00089	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00090	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  00096	90		 npad	 1
  00097	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a1	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000a5	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_7?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
  000b3	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
  000b7	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000be	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c1	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  000c5	48 2d 88 00 00
	00		 sub	 rax, 136		; 00000088H
  000cb	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d2	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d5	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  000d9	48 8b 95 00 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  000e0	89 44 0a fc	 mov	 DWORD PTR [rdx+rcx-4], eax
  000e4	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000eb	48 83 c0 08	 add	 rax, 8
  000ef	ba 02 00 00 00	 mov	 edx, 2
  000f4	48 8b c8	 mov	 rcx, rax
  000f7	e8 00 00 00 00	 call	 ??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@H@Z ; std::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >::basic_stringbuf<char,std::char_traits<char>,std::allocator<char> >
  000fc	90		 npad	 1
  000fd	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00104	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0010b	5f		 pop	 rdi
  0010c	5d		 pop	 rbp
  0010d	c3		 ret	 0
??0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
this$ = 256
$initVBases$ = 264
?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA PROC ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	85 c0		 test	 eax, eax
  0001f	74 1b		 je	 SHORT $LN5@dtor$0
  00021	83 a5 c4 00 00
	00 fe		 and	 DWORD PTR $T1[rbp], -2
  00028	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002f	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
$LN5@dtor$0:
  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA ENDP ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
this$ = 256
$initVBases$ = 264
?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA PROC ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 10	 add	 rcx, 16
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA ENDP ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
this$ = 256
$initVBases$ = 264
?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA PROC ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	85 c0		 test	 eax, eax
  0001f	74 1b		 je	 SHORT $LN5@dtor$0
  00021	83 a5 c4 00 00
	00 fe		 and	 DWORD PTR $T1[rbp], -2
  00028	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002f	48 81 c1 88 00
	00 00		 add	 rcx, 136		; 00000088H
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ
$LN5@dtor$0:
  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	5f		 pop	 rdi
  00041	5d		 pop	 rbp
  00042	c3		 ret	 0
?dtor$0@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA ENDP ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
$T1 = 196
this$ = 256
$initVBases$ = 264
?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA PROC ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	48 83 c1 10	 add	 rcx, 16
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
?dtor$1@?0???0?$basic_ostringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ@4HA ENDP ; `std::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >::basic_ostringstream<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Rahul Kumar\source\repos\Ch04_02_sol\Ch04_02\YmmVal.h
;	COMDAT ?ToStringX64@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
__$ReturnUdt$ = 264
select$ = 272
?ToStringX64@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z PROC ; YmmVal::ToStringX64, COMDAT

; 181  :     {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__107F9394_YmmVal@h
  0002e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 182  :         return ToStringHex(m_U64, sizeof(m_U64) / sizeof(uint64_t), 32, select);

  00033	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003a	8b 8d 10 01 00
	00		 mov	 ecx, DWORD PTR select$[rbp]
  00040	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00044	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  0004c	41 b9 04 00 00
	00		 mov	 r9d, 4
  00052	4c 8b c0	 mov	 r8, rax
  00055	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR __$ReturnUdt$[rbp]
  0005c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00063	e8 00 00 00 00	 call	 ??$ToStringHex@_K@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEB_KHHI@Z ; YmmVal::ToStringHex<unsigned __int64>
  00068	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0006e	83 c8 01	 or	 eax, 1
  00071	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  00077	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 183  :     }

  0007e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00085	5f		 pop	 rdi
  00086	5d		 pop	 rbp
  00087	c3		 ret	 0
?ToStringX64@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ENDP ; YmmVal::ToStringX64
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Rahul Kumar\source\repos\Ch04_02_sol\Ch04_02\YmmVal.h
;	COMDAT ?ToStringX32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
__$ReturnUdt$ = 264
select$ = 272
?ToStringX32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z PROC ; YmmVal::ToStringX32, COMDAT

; 176  :     {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__107F9394_YmmVal@h
  0002e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 177  :         return ToStringHex(m_U32, sizeof(m_U32) / sizeof(uint32_t), 16, select);

  00033	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003a	8b 8d 10 01 00
	00		 mov	 ecx, DWORD PTR select$[rbp]
  00040	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00044	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0004c	41 b9 08 00 00
	00		 mov	 r9d, 8
  00052	4c 8b c0	 mov	 r8, rax
  00055	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR __$ReturnUdt$[rbp]
  0005c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00063	e8 00 00 00 00	 call	 ??$ToStringHex@I@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBIHHI@Z ; YmmVal::ToStringHex<unsigned int>
  00068	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0006e	83 c8 01	 or	 eax, 1
  00071	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  00077	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 178  :     }

  0007e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00085	5f		 pop	 rdi
  00086	5d		 pop	 rbp
  00087	c3		 ret	 0
?ToStringX32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ENDP ; YmmVal::ToStringX32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Rahul Kumar\source\repos\Ch04_02_sol\Ch04_02\YmmVal.h
;	COMDAT ?ToStringI32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
__$ReturnUdt$ = 264
select$ = 272
?ToStringI32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z PROC ; YmmVal::ToStringI32, COMDAT

; 128  :     {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__107F9394_YmmVal@h
  0002e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 129  :         return ToStringInt(m_I32, sizeof(m_I32) / sizeof(int32_t), 16, select);

  00033	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003a	8b 8d 10 01 00
	00		 mov	 ecx, DWORD PTR select$[rbp]
  00040	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00044	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0004c	41 b9 08 00 00
	00		 mov	 r9d, 8
  00052	4c 8b c0	 mov	 r8, rax
  00055	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR __$ReturnUdt$[rbp]
  0005c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00063	e8 00 00 00 00	 call	 ??$ToStringInt@H@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBHHHI@Z ; YmmVal::ToStringInt<int>
  00068	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0006e	83 c8 01	 or	 eax, 1
  00071	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  00077	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 130  :     }

  0007e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00085	5f		 pop	 rdi
  00086	5d		 pop	 rbp
  00087	c3		 ret	 0
?ToStringI32@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ENDP ; YmmVal::ToStringI32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Rahul Kumar\source\repos\Ch04_02_sol\Ch04_02\YmmVal.h
;	COMDAT ?ToStringI16@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z
_TEXT	SEGMENT
$T1 = 196
this$ = 256
__$ReturnUdt$ = 264
select$ = 272
?ToStringI16@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z PROC ; YmmVal::ToStringI16, COMDAT

; 123  :     {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T1[rbp], 0
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__107F9394_YmmVal@h
  0002e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 124  :         return ToStringInt(m_I16, sizeof(m_I16) / sizeof(int16_t), 8, select);

  00033	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003a	8b 8d 10 01 00
	00		 mov	 ecx, DWORD PTR select$[rbp]
  00040	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00044	c7 44 24 20 08
	00 00 00	 mov	 DWORD PTR [rsp+32], 8
  0004c	41 b9 10 00 00
	00		 mov	 r9d, 16
  00052	4c 8b c0	 mov	 r8, rax
  00055	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR __$ReturnUdt$[rbp]
  0005c	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00063	e8 00 00 00 00	 call	 ??$ToStringInt@F@YmmVal@@AEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEBFHHI@Z ; YmmVal::ToStringInt<short>
  00068	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR $T1[rbp]
  0006e	83 c8 01	 or	 eax, 1
  00071	89 85 c4 00 00
	00		 mov	 DWORD PTR $T1[rbp], eax
  00077	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 125  :     }

  0007e	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00085	5f		 pop	 rdi
  00086	5d		 pop	 rbp
  00087	c3		 ret	 0
?ToStringI16@YmmVal@@QEAA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@I@Z ENDP ; YmmVal::ToStringI16
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = 200
tv93 = 264
tv85 = 264
this$ = 304
__formal$ = 312
_Lobj$ = 320
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z PROC ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>, COMDAT

; 173  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D96D2425_xloctime
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 174  :         _Cvt = _Lobj._Getcvt();

  0002a	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00031	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ
  0003e	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00045	48 8d 79 2c	 lea	 rdi, QWORD PTR [rcx+44]
  00049	48 8b f0	 mov	 rsi, rax
  0004c	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00051	f3 a4		 rep movsb

; 175  : 
; 176  :         if (is_same_v<_Elem2, wchar_t>) {

  00053	33 c0		 xor	 eax, eax
  00055	83 f8 01	 cmp	 eax, 1
  00058	74 5c		 je	 SHORT $LN2@Getvals

; 177  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ
  00067	48 8b c8	 mov	 rcx, rax
  0006a	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  0006f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 178  :             _Months =

  0007a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ
  00087	48 8b c8	 mov	 rcx, rax
  0008a	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  0008f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00096	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 179  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 180  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a1	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  000a6	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ad	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 181  :         } else {

  000b1	e9 a3 00 00 00	 jmp	 $LN3@Getvals
$LN2@Getvals:

; 182  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b6	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bd	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000c1	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  000c8	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ
  000d5	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv85[rbp]
  000dc	4c 8b c1	 mov	 r8, rcx
  000df	33 d2		 xor	 edx, edx
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  000e9	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f0	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 183  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000f4	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fb	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000ff	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  00106	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ
  00113	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  0011a	4c 8b c1	 mov	 r8, rcx
  0011d	33 d2		 xor	 edx, edx
  0011f	48 8b c8	 mov	 rcx, rax
  00122	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00127	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012e	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 184  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00132	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00139	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0013d	4c 8b c0	 mov	 r8, rax
  00140	33 d2		 xor	 edx, edx
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  00149	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  0014e	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00155	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN3@Getvals:

; 185  :         }
; 186  :     }

  00159	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  00160	5f		 pop	 rdi
  00161	5e		 pop	 rsi
  00162	5d		 pop	 rbp
  00163	c3		 ret	 0
??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ENDP ; std::time_get<wchar_t,std::istreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xloctime
;	COMDAT ??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z
_TEXT	SEGMENT
$T1 = 200
tv93 = 264
tv85 = 264
this$ = 304
__formal$ = 312
_Lobj$ = 320
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z PROC ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>, COMDAT

; 173  :     void __CLR_OR_THIS_CALL _Getvals(_Elem2, const _Locinfo& _Lobj) { // get values

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	48 81 ec 30 01
	00 00		 sub	 rsp, 304		; 00000130H
  00019	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D96D2425_xloctime
  00025	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 174  :         _Cvt = _Lobj._Getcvt();

  0002a	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00031	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ
  0003e	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00045	48 8d 79 2c	 lea	 rdi, QWORD PTR [rcx+44]
  00049	48 8b f0	 mov	 rsi, rax
  0004c	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  00051	f3 a4		 rep movsb

; 175  : 
; 176  :         if (is_same_v<_Elem2, wchar_t>) {

  00053	33 c0		 xor	 eax, eax
  00055	83 f8 01	 cmp	 eax, 1
  00058	74 5c		 je	 SHORT $LN2@Getvals

; 177  :             _Days = reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getdays())));

  0005a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ
  00067	48 8b c8	 mov	 rcx, rax
  0006a	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  0006f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 178  :             _Months =

  0007a	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ
  00087	48 8b c8	 mov	 rcx, rax
  0008a	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  0008f	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00096	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 179  :                 reinterpret_cast<const _Elem*>(_Maklocwcs(reinterpret_cast<const wchar_t*>(_Lobj._W_Getmonths())));
; 180  :             _Ampm = reinterpret_cast<const _Elem*>(_Maklocwcs(L":AM:am:PM:pm"));

  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
  000a1	e8 00 00 00 00	 call	 ?_Maklocwcs@std@@YAPEA_WPEB_W@Z ; std::_Maklocwcs
  000a6	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ad	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 181  :         } else {

  000b1	e9 a3 00 00 00	 jmp	 $LN3@Getvals
$LN2@Getvals:

; 182  :             _Days   = _Maklocstr(_Lobj._Getdays(), static_cast<_Elem*>(nullptr), _Cvt);

  000b6	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000bd	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000c1	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv85[rbp], rax
  000c8	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ
  000d5	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv85[rbp]
  000dc	4c 8b c1	 mov	 r8, rcx
  000df	33 d2		 xor	 edx, edx
  000e1	48 8b c8	 mov	 rcx, rax
  000e4	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  000e9	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000f0	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 183  :             _Months = _Maklocstr(_Lobj._Getmonths(), static_cast<_Elem*>(nullptr), _Cvt);

  000f4	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000fb	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  000ff	48 89 85 08 01
	00 00		 mov	 QWORD PTR tv93[rbp], rax
  00106	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Lobj$[rbp]
  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ
  00113	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR tv93[rbp]
  0011a	4c 8b c1	 mov	 r8, rcx
  0011d	33 d2		 xor	 edx, edx
  0011f	48 8b c8	 mov	 rcx, rax
  00122	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  00127	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0012e	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 184  :             _Ampm   = _Maklocstr(":AM:am:PM:pm", static_cast<_Elem*>(nullptr), _Cvt);

  00132	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00139	48 83 c0 2c	 add	 rax, 44			; 0000002cH
  0013d	4c 8b c0	 mov	 r8, rax
  00140	33 d2		 xor	 edx, edx
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
  00149	e8 00 00 00 00	 call	 ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ; std::_Maklocstr<char>
  0014e	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00155	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN3@Getvals:

; 185  :         }
; 186  :     }

  00159	48 8d a5 10 01
	00 00		 lea	 rsp, QWORD PTR [rbp+272]
  00160	5f		 pop	 rdi
  00161	5e		 pop	 rsi
  00162	5d		 pop	 rbp
  00163	c3		 ret	 0
??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z ENDP ; std::time_get<char,std::istreambuf_iterator<char,std::char_traits<char> > >::_Getvals<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
;	COMDAT ?uppercase@std@@YAAEAVios_base@1@AEAV21@@Z
_TEXT	SEGMENT
_Iosbase$ = 224
?uppercase@std@@YAAEAVios_base@1@AEAV21@@Z PROC		; std::uppercase, COMDAT

; 301  : inline ios_base& __CLRCALL_OR_CDECL uppercase(ios_base& _Iosbase) { // set uppercase

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__845859A3_ios
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 302  :     _Iosbase.setf(ios_base::uppercase);

  0001f	ba 04 00 00 00	 mov	 edx, 4
  00024	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Iosbase$[rbp]
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setf@ios_base@std@@QEAAHH@Z

; 303  :     return _Iosbase;

  00031	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Iosbase$[rbp]

; 304  : }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?uppercase@std@@YAAEAVios_base@1@AEAV21@@Z ENDP		; std::uppercase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\ios
;	COMDAT ?hex@std@@YAAEAVios_base@1@AEAV21@@Z
_TEXT	SEGMENT
_Iosbase$ = 224
?hex@std@@YAAEAVios_base@1@AEAV21@@Z PROC		; std::hex, COMDAT

; 206  : inline ios_base& __CLRCALL_OR_CDECL hex(ios_base& _Iosbase) { // set basefield to hex

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__845859A3_ios
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 207  :     _Iosbase.setf(ios_base::hex, ios_base::basefield);

  0001f	41 b8 00 0e 00
	00		 mov	 r8d, 3584		; 00000e00H
  00025	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  0002a	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Iosbase$[rbp]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_?setf@ios_base@std@@QEAAHHH@Z

; 208  :     return _Iosbase;

  00037	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Iosbase$[rbp]

; 209  : }

  0003e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00045	5f		 pop	 rdi
  00046	5d		 pop	 rbp
  00047	c3		 ret	 0
?hex@std@@YAAEAVios_base@1@AEAV21@@Z ENDP		; std::hex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z
_TEXT	SEGMENT
_Count$ = 8
_Ptrdest$ = 40
_Ptrnext$1 = 72
_Ptr$ = 320
__formal$ = 328
__formal$ = 336
??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 522  : _Elem* __CRTDECL _Maklocstr(const char* _Ptr, _Elem*, const _Locinfo::_Cvtvec&) {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D23FE460_xlocale
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 523  :     // convert C string to _Elem sequence using _Cvtvec
; 524  :     size_t _Count = _CSTD strlen(_Ptr) + 1;

  00029	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00030	e8 00 00 00 00	 call	 strlen
  00035	48 ff c0	 inc	 rax
  00038	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax

; 525  : 
; 526  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  0003c	c7 44 24 20 0e
	02 00 00	 mov	 DWORD PTR [rsp+32], 526	; 0000020eH
  00044	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0004b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00051	ba 01 00 00 00	 mov	 edx, 1
  00056	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__calloc_dbg
  00060	48 89 45 28	 mov	 QWORD PTR _Ptrdest$[rbp], rax

; 527  : 
; 528  :     if (!_Ptrdest) {

  00064	48 83 7d 28 00	 cmp	 QWORD PTR _Ptrdest$[rbp], 0
  00069	75 05		 jne	 SHORT $LN5@Maklocstr

; 529  :         _Xbad_alloc();

  0006b	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN5@Maklocstr:

; 530  :     }
; 531  : 
; 532  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

  00070	48 8b 45 28	 mov	 rax, QWORD PTR _Ptrdest$[rbp]
  00074	48 89 45 48	 mov	 QWORD PTR _Ptrnext$1[rbp], rax
  00078	eb 27		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  0007a	48 8b 45 08	 mov	 rax, QWORD PTR _Count$[rbp]
  0007e	48 ff c8	 dec	 rax
  00081	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  00085	48 8b 45 48	 mov	 rax, QWORD PTR _Ptrnext$1[rbp]
  00089	48 ff c0	 inc	 rax
  0008c	48 89 45 48	 mov	 QWORD PTR _Ptrnext$1[rbp], rax
  00090	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00097	48 ff c0	 inc	 rax
  0009a	48 89 85 40 01
	00 00		 mov	 QWORD PTR _Ptr$[rbp], rax
$LN4@Maklocstr:
  000a1	48 83 7d 08 00	 cmp	 QWORD PTR _Count$[rbp], 0
  000a6	76 12		 jbe	 SHORT $LN3@Maklocstr

; 533  :         *_Ptrnext = static_cast<_Elem>(static_cast<unsigned char>(*_Ptr));

  000a8	48 8b 45 48	 mov	 rax, QWORD PTR _Ptrnext$1[rbp]
  000ac	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  000b3	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  000b6	88 08		 mov	 BYTE PTR [rax], cl

; 534  :     }

  000b8	eb c0		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 535  : 
; 536  :     return _Ptrdest;

  000ba	48 8b 45 28	 mov	 rax, QWORD PTR _Ptrdest$[rbp]
$LN6@Maklocstr:

; 537  : }

  000be	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000c5	5f		 pop	 rdi
  000c6	5d		 pop	 rbp
  000c7	c3		 ret	 0
??$_Maklocstr@D@std@@YAPEADPEBDPEADAEBU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocnum
;	COMDAT ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
_TEXT	SEGMENT
_Count$ = 8
_Ptrdest$ = 40
_Ptr$ = 288
?_Maklocwcs@std@@YAPEA_WPEB_W@Z PROC			; std::_Maklocwcs, COMDAT

; 90   : inline wchar_t* _Maklocwcs(const wchar_t* _Ptr) { // copy NTWCS to allocated storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0000e	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__4CB88277_xlocnum
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 91   :     const size_t _Count = _CSTD wcslen(_Ptr) + 1;

  0001f	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcslen
  0002c	48 ff c0	 inc	 rax
  0002f	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax

; 92   : 
; 93   :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Count, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  00033	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Maklocwcs@std@@YAPEA_WPEB_W@Z@4JA
  00039	83 c0 03	 add	 eax, 3
  0003c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00040	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0GI@OGMNKBMN@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00047	41 b8 02 00 00
	00		 mov	 r8d, 2
  0004d	ba 02 00 00 00	 mov	 edx, 2
  00052	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__calloc_dbg
  0005c	48 89 45 28	 mov	 QWORD PTR _Ptrdest$[rbp], rax

; 94   : 
; 95   :     if (!_Ptrdest) {

  00060	48 83 7d 28 00	 cmp	 QWORD PTR _Ptrdest$[rbp], 0
  00065	75 05		 jne	 SHORT $LN2@Maklocwcs

; 96   :         _Xbad_alloc();

  00067	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN2@Maklocwcs:

; 97   :     }
; 98   : 
; 99   :     _CSTD wmemcpy(_Ptrdest, _Ptr, _Count);

  0006c	4c 8b 45 08	 mov	 r8, QWORD PTR _Count$[rbp]
  00070	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00077	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptrdest$[rbp]
  0007b	e8 00 00 00 00	 call	 wmemcpy

; 100  :     return _Ptrdest;

  00080	48 8b 45 28	 mov	 rax, QWORD PTR _Ptrdest$[rbp]
$LN3@Maklocwcs:

; 101  : }

  00084	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0008b	5f		 pop	 rdi
  0008c	5d		 pop	 rbp
  0008d	c3		 ret	 0
?_Maklocwcs@std@@YAPEA_WPEB_W@Z ENDP			; std::_Maklocwcs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\iosfwd
;	COMDAT ??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ
_TEXT	SEGMENT
this$ = 224
??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ PROC		; std::fpos<_Mbstatet>::operator __int64, COMDAT

; 67   :     operator streamoff() const {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B30C2184_iosfwd
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 68   :         // TRANSITION, ABI: We currently always set _Fpos to 0 but older .objs containing old
; 69   :         // basic_filebuf would set _Fpos.
; 70   :         return _Myoff + _Fpos;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00029	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00030	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]

; 71   :     }

  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
??B?$fpos@U_Mbstatet@@@std@@QEBA_JXZ ENDP		; std::fpos<_Mbstatet>::operator __int64
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\iosfwd
;	COMDAT ??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z
_TEXT	SEGMENT
this$ = 224
_Off$ = 232
??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z PROC		; std::fpos<_Mbstatet>::fpos<_Mbstatet>, COMDAT

; 55   :     /* implicit */ fpos(streamoff _Off = 0) : _Myoff(_Off), _Fpos(0), _Mystate() {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B30C2184_iosfwd
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx
  00035	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 83 c0 10	 add	 rax, 16
  0004f	48 8b f8	 mov	 rdi, rax
  00052	33 c0		 xor	 eax, eax
  00054	b9 08 00 00 00	 mov	 ecx, 8
  00059	f3 aa		 rep stosb
  0005b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00062	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00069	5f		 pop	 rdi
  0006a	5d		 pop	 rbp
  0006b	c3		 ret	 0
??0?$fpos@U_Mbstatet@@@std@@QEAA@_J@Z ENDP		; std::fpos<_Mbstatet>::fpos<_Mbstatet>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z
_TEXT	SEGMENT
_Count$ = 8
_Count1$ = 40
_Wchars$ = 72
_Ptr1$ = 104
_Bytes$ = 132
_Wc$ = 164
_Mbst1$ = 200
_Ptrdest$ = 232
_Ptrnext$ = 264
_Mbst2$ = 296
__$ArrayPad$ = 504
_Ptr$ = 544
__formal$ = 552
_Cvt$ = 560
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z PROC ; std::_Maklocstr<wchar_t>, COMDAT

; 540  : inline wchar_t* __CRTDECL _Maklocstr(const char* _Ptr, wchar_t*, const _Locinfo::_Cvtvec& _Cvt) {

$LN12:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 38 02
	00 00		 sub	 rsp, 568		; 00000238H
  00018	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  0001d	48 8d 7c 24 30	 lea	 rdi, QWORD PTR [rsp+48]
  00022	b9 52 00 00 00	 mov	 ecx, 82			; 00000052H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR [rsp+600]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 f8 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__D23FE460_xlocale
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 541  :     // convert C string to wchar_t sequence using _Cvtvec
; 542  :     size_t _Count;
; 543  :     size_t _Count1;
; 544  :     size_t _Wchars;
; 545  :     const char* _Ptr1;
; 546  :     int _Bytes;
; 547  :     wchar_t _Wc;
; 548  :     mbstate_t _Mbst1 = {};

  00053	48 8d 85 c8 00
	00 00		 lea	 rax, QWORD PTR _Mbst1$[rbp]
  0005a	48 8b f8	 mov	 rdi, rax
  0005d	33 c0		 xor	 eax, eax
  0005f	b9 08 00 00 00	 mov	 ecx, 8
  00064	f3 aa		 rep stosb

; 549  : 
; 550  :     _Count1 = _CSTD strlen(_Ptr) + 1;

  00066	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  0006d	e8 00 00 00 00	 call	 strlen
  00072	48 ff c0	 inc	 rax
  00075	48 89 45 28	 mov	 QWORD PTR _Count1$[rbp], rax

; 551  :     for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count; _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars) {

  00079	48 8b 45 28	 mov	 rax, QWORD PTR _Count1$[rbp]
  0007d	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  00081	48 c7 45 48 00
	00 00 00	 mov	 QWORD PTR _Wchars$[rbp], 0
  00089	48 8b 85 20 02
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00090	48 89 45 68	 mov	 QWORD PTR _Ptr1$[rbp], rax
  00094	eb 35		 jmp	 SHORT $LN4@Maklocstr
$LN2@Maklocstr:
  00096	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  0009d	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  000a1	48 2b c8	 sub	 rcx, rax
  000a4	48 8b c1	 mov	 rax, rcx
  000a7	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  000ab	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  000b2	48 8b 4d 68	 mov	 rcx, QWORD PTR _Ptr1$[rbp]
  000b6	48 03 c8	 add	 rcx, rax
  000b9	48 8b c1	 mov	 rax, rcx
  000bc	48 89 45 68	 mov	 QWORD PTR _Ptr1$[rbp], rax
  000c0	48 8b 45 48	 mov	 rax, QWORD PTR _Wchars$[rbp]
  000c4	48 ff c0	 inc	 rax
  000c7	48 89 45 48	 mov	 QWORD PTR _Wchars$[rbp], rax
$LN4@Maklocstr:
  000cb	48 83 7d 08 00	 cmp	 QWORD PTR _Count$[rbp], 0
  000d0	76 3a		 jbe	 SHORT $LN3@Maklocstr

; 552  :         if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) {

  000d2	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Cvt$[rbp]
  000d9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000de	4c 8d 8d c8 00
	00 00		 lea	 r9, QWORD PTR _Mbst1$[rbp]
  000e5	4c 8b 45 08	 mov	 r8, QWORD PTR _Count$[rbp]
  000e9	48 8b 55 68	 mov	 rdx, QWORD PTR _Ptr1$[rbp]
  000ed	48 8d 8d a4 00
	00 00		 lea	 rcx, QWORD PTR _Wc$[rbp]
  000f4	e8 00 00 00 00	 call	 _Mbrtowc
  000f9	89 85 84 00 00
	00		 mov	 DWORD PTR _Bytes$[rbp], eax
  000ff	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR _Bytes$[rbp], 0
  00106	7f 02		 jg	 SHORT $LN8@Maklocstr

; 553  :             break;

  00108	eb 02		 jmp	 SHORT $LN3@Maklocstr
$LN8@Maklocstr:

; 554  :         }
; 555  :     }

  0010a	eb 8a		 jmp	 SHORT $LN2@Maklocstr
$LN3@Maklocstr:

; 556  : 
; 557  :     ++_Wchars; // count terminating nul

  0010c	48 8b 45 48	 mov	 rax, QWORD PTR _Wchars$[rbp]
  00110	48 ff c0	 inc	 rax
  00113	48 89 45 48	 mov	 QWORD PTR _Wchars$[rbp], rax

; 558  : 
; 559  :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Wchars, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  00117	c7 44 24 20 2f
	02 00 00	 mov	 DWORD PTR [rsp+32], 559	; 0000022fH
  0011f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_0GI@GFIAKDGM@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  00126	41 b8 02 00 00
	00		 mov	 r8d, 2
  0012c	ba 02 00 00 00	 mov	 edx, 2
  00131	48 8b 4d 48	 mov	 rcx, QWORD PTR _Wchars$[rbp]
  00135	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__calloc_dbg
  0013b	48 89 85 e8 00
	00 00		 mov	 QWORD PTR _Ptrdest$[rbp], rax

; 560  : 
; 561  :     if (!_Ptrdest) {

  00142	48 83 bd e8 00
	00 00 00	 cmp	 QWORD PTR _Ptrdest$[rbp], 0
  0014a	75 05		 jne	 SHORT $LN9@Maklocstr

; 562  :         _Xbad_alloc();

  0014c	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN9@Maklocstr:

; 563  :     }
; 564  : 
; 565  :     wchar_t* _Ptrnext = _Ptrdest;

  00151	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Ptrdest$[rbp]
  00158	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Ptrnext$[rbp], rax

; 566  :     mbstate_t _Mbst2  = {};

  0015f	48 8d 85 28 01
	00 00		 lea	 rax, QWORD PTR _Mbst2$[rbp]
  00166	48 8b f8	 mov	 rdi, rax
  00169	33 c0		 xor	 eax, eax
  0016b	b9 08 00 00 00	 mov	 ecx, 8
  00170	f3 aa		 rep stosb

; 567  : 
; 568  :     for (; 0 < _Wchars; _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext) {

  00172	eb 4d		 jmp	 SHORT $LN7@Maklocstr
$LN5@Maklocstr:
  00174	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  0017b	48 8b 4d 08	 mov	 rcx, QWORD PTR _Count$[rbp]
  0017f	48 2b c8	 sub	 rcx, rax
  00182	48 8b c1	 mov	 rax, rcx
  00185	48 89 45 08	 mov	 QWORD PTR _Count$[rbp], rax
  00189	48 63 85 84 00
	00 00		 movsxd	 rax, DWORD PTR _Bytes$[rbp]
  00190	48 8b 8d 20 02
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00197	48 03 c8	 add	 rcx, rax
  0019a	48 8b c1	 mov	 rax, rcx
  0019d	48 89 85 20 02
	00 00		 mov	 QWORD PTR _Ptr$[rbp], rax
  001a4	48 8b 45 48	 mov	 rax, QWORD PTR _Wchars$[rbp]
  001a8	48 ff c8	 dec	 rax
  001ab	48 89 45 48	 mov	 QWORD PTR _Wchars$[rbp], rax
  001af	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Ptrnext$[rbp]
  001b6	48 83 c0 02	 add	 rax, 2
  001ba	48 89 85 08 01
	00 00		 mov	 QWORD PTR _Ptrnext$[rbp], rax
$LN7@Maklocstr:
  001c1	48 83 7d 48 00	 cmp	 QWORD PTR _Wchars$[rbp], 0
  001c6	76 40		 jbe	 SHORT $LN6@Maklocstr

; 569  :         if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) {

  001c8	48 8b 85 30 02
	00 00		 mov	 rax, QWORD PTR _Cvt$[rbp]
  001cf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d4	4c 8d 8d 28 01
	00 00		 lea	 r9, QWORD PTR _Mbst2$[rbp]
  001db	4c 8b 45 28	 mov	 r8, QWORD PTR _Count1$[rbp]
  001df	48 8b 95 20 02
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  001e6	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ptrnext$[rbp]
  001ed	e8 00 00 00 00	 call	 _Mbrtowc
  001f2	89 85 84 00 00
	00		 mov	 DWORD PTR _Bytes$[rbp], eax
  001f8	83 bd 84 00 00
	00 00		 cmp	 DWORD PTR _Bytes$[rbp], 0
  001ff	7f 02		 jg	 SHORT $LN10@Maklocstr

; 570  :             break;

  00201	eb 05		 jmp	 SHORT $LN6@Maklocstr
$LN10@Maklocstr:

; 571  :         }
; 572  :     }

  00203	e9 6c ff ff ff	 jmp	 $LN5@Maklocstr
$LN6@Maklocstr:

; 573  : 
; 574  :     *_Ptrnext = L'\0';

  00208	33 c0		 xor	 eax, eax
  0020a	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Ptrnext$[rbp]
  00211	66 89 01	 mov	 WORD PTR [rcx], ax

; 575  : 
; 576  :     return _Ptrdest;

  00214	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Ptrdest$[rbp]
$LN11@Maklocstr:

; 577  : }

  0021b	48 8b f8	 mov	 rdi, rax
  0021e	48 8d 4d d0	 lea	 rcx, QWORD PTR [rbp-48]
  00222	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z$rtcFrameData
  00229	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0022e	48 8b c7	 mov	 rax, rdi
  00231	48 8b 8d f8 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00238	48 33 cd	 xor	 rcx, rbp
  0023b	e8 00 00 00 00	 call	 __security_check_cookie
  00240	48 8d a5 08 02
	00 00		 lea	 rsp, QWORD PTR [rbp+520]
  00247	5f		 pop	 rdi
  00248	5d		 pop	 rbp
  00249	c3		 ret	 0
??$_Maklocstr@_W@std@@YAPEA_WPEBDPEA_WAEBU_Cvtvec@@@Z ENDP ; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 8b c8	 mov	 rcx, rax
  0001d	e8 00 00 00 00	 call	 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  00022	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00029	5f		 pop	 rdi
  0002a	5d		 pop	 rbp
  0002b	c3		 ret	 0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 1401 :     constexpr const _Ty1& _Get_first() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1402 :         return *this;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1403 :     }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT

; 1397 :     constexpr _Ty1& _Get_first() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1398 :         return *this;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]

; 1399 :     }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT

; 4654 :     _CONSTEXPR20_CONTAINER const _Alty& _Getal() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4655 :         return _Mypair._Get_first();

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEBAAEBV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4656 :     }

  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 224
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT

; 4650 :     _CONSTEXPR20_CONTAINER _Alty& _Getal() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4651 :         return _Mypair._Get_first();

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAAAEAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4652 :     }

  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z
_TEXT	SEGMENT
this$ = 224
_Right$ = 232
?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators, COMDAT

; 4646 :     _CONSTEXPR20_CONTAINER void _Swap_proxy_and_iterators(basic_string& _Right) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4647 :         _Mypair._Myval2._Swap_proxy_and_iterators(_Right._Mypair._Myval2);

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0002b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00032	48 8b d0	 mov	 rdx, rax
  00035	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@_Container_base12@std@@QEAAXAEAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators

; 4648 :     }

  0003a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_Ptr$1 = 8
_Al$2 = 40
$T3 = 260
this$ = 320
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT

; 4616 :     _CONSTEXPR20_CONTAINER void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4617 :         _Mypair._Myval2._Orphan_all();

  0001f	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all

; 4618 :         if (_Mypair._Myval2._Large_string_engaged()) {

  0002e	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 8b c8	 mov	 rcx, rax
  00038	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0003d	0f b6 c0	 movzx	 eax, al
  00040	85 c0		 test	 eax, eax
  00042	74 50		 je	 SHORT $LN2@Tidy_deall

; 4619 :             const pointer _Ptr = _Mypair._Myval2._Bx._Ptr;

  00044	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004f	48 89 45 08	 mov	 QWORD PTR _Ptr$1[rbp], rax

; 4620 :             auto& _Al          = _Getal();

  00053	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005a	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0005f	48 89 45 28	 mov	 QWORD PTR _Al$2[rbp], rax

; 4621 :             _Destroy_in_place(_Mypair._Myval2._Bx._Ptr);

  00063	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 83 c0 08	 add	 rax, 8
  0006e	48 8b c8	 mov	 rcx, rax
  00071	e8 00 00 00 00	 call	 ??$_Destroy_in_place@PEAD@std@@YAXAEAPEAD@Z ; std::_Destroy_in_place<char *>

; 4622 :             _Al.deallocate(_Ptr, _Mypair._Myval2._Myres + 1);

  00076	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00081	48 ff c0	 inc	 rax
  00084	4c 8b c0	 mov	 r8, rax
  00087	48 8b 55 08	 mov	 rdx, QWORD PTR _Ptr$1[rbp]
  0008b	48 8b 4d 28	 mov	 rcx, QWORD PTR _Al$2[rbp]
  0008f	e8 00 00 00 00	 call	 ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ; std::allocator<char>::deallocate
$LN2@Tidy_deall:

; 4623 :         }
; 4624 : 
; 4625 : #ifdef __cpp_lib_constexpr_string
; 4626 :         if (_STD is_constant_evaluated()) {
; 4627 :             _Mypair._Myval2._Bx._Ptr = nullptr;
; 4628 :             _Mypair._Myval2._Mysize  = 0;
; 4629 :             _Mypair._Myval2._Myres   = 0;
; 4630 :         } else
; 4631 : #endif // __cpp_lib_constexpr_string
; 4632 :         {
; 4633 :             _Mypair._Myval2._Mysize = 0;

  00094	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009b	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 4634 :             _Mypair._Myval2._Myres  = _BUF_SIZE - 1;

  000a3	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000aa	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15

; 4635 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4636 :             _Traits::assign(_Mypair._Myval2._Bx._Buf[0], _Elem());

  000b2	c6 85 04 01 00
	00 00		 mov	 BYTE PTR $T3[rbp], 0
  000b9	b8 01 00 00 00	 mov	 eax, 1
  000be	48 6b c0 00	 imul	 rax, rax, 0
  000c2	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c9	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  000ce	48 8d 95 04 01
	00 00		 lea	 rdx, QWORD PTR $T3[rbp]
  000d5	48 8b c8	 mov	 rcx, rax
  000d8	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign
  000dd	90		 npad	 1

; 4637 :         }
; 4638 :     }

  000de	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000e5	5f		 pop	 rdi
  000e6	5d		 pop	 rbp
  000e7	c3		 ret	 0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
_TEXT	SEGMENT
_My_data$ = 8
$T1 = 228
this$ = 288
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT

; 4594 :     _CONSTEXPR20_CONTAINER void _Tidy_init() noexcept { // initialize basic_string data members

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4595 :         auto& _My_data   = _Mypair._Myval2;

  0001f	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 4596 :         _My_data._Mysize = 0;

  0002a	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0002e	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 4597 : 
; 4598 : #ifdef __cpp_lib_constexpr_string
; 4599 :         if (_STD is_constant_evaluated()) {
; 4600 :             _My_data._Myres        = _BUF_SIZE; // SSO disabled in constexpr context
; 4601 :             auto& _Al              = _Getal();
; 4602 :             const pointer _New_ptr = _Al.allocate(_BUF_SIZE + 1); // throws
; 4603 :             _My_data._Bx._Ptr      = _New_ptr;
; 4604 : 
; 4605 :             _Elem* const _Raw_new = _Unfancy(_New_ptr);
; 4606 :             _Traits::assign(_Raw_new, _BUF_SIZE + 1, _Elem());
; 4607 :         } else
; 4608 : #endif // __cpp_lib_constexpr_string
; 4609 :         {
; 4610 :             _My_data._Myres = _BUF_SIZE - 1;

  00036	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  0003a	48 c7 40 20 0f
	00 00 00	 mov	 QWORD PTR [rax+32], 15

; 4611 :             // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4612 :             _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00042	c6 85 e4 00 00
	00 00		 mov	 BYTE PTR $T1[rbp], 0
  00049	b8 01 00 00 00	 mov	 eax, 1
  0004e	48 6b c0 00	 imul	 rax, rax, 0
  00052	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  00056	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  0005b	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  00062	48 8b c8	 mov	 rcx, rax
  00065	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 4613 :         }
; 4614 :     }

  0006a	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z
_TEXT	SEGMENT
this$ = 224
_Requested$ = 232
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4500 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type _Calculate_growth(const size_type _Requested) const noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4501 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

  00024	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002b	e8 00 00 00 00	 call	 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
  00030	4c 8b c0	 mov	 r8, rax
  00033	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003a	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  0003e	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Requested$[rbp]
  00045	e8 00 00 00 00	 call	 ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth

; 4502 :     }

  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBA_K_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
_TEXT	SEGMENT
_Masked$ = 8
$T4 = 232
__$ArrayPad$ = 248
_Requested$ = 288
_Old$ = 296
_Max$ = 304
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4487 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 12 00 00 00	 mov	 ecx, 18
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR [rsp+328]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 f8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4488 :         const size_type _Masked = _Requested | _ALLOC_MASK;

  00053	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR _Requested$[rbp]
  0005a	48 83 c8 0f	 or	 rax, 15
  0005e	48 89 45 08	 mov	 QWORD PTR _Masked$[rbp], rax

; 4489 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00062	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  00069	48 39 45 08	 cmp	 QWORD PTR _Masked$[rbp], rax
  0006d	76 09		 jbe	 SHORT $LN2@Calculate_

; 4490 :             return _Max;

  0006f	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  00076	eb 68		 jmp	 SHORT $LN1@Calculate_
$LN2@Calculate_:

; 4491 :         }
; 4492 : 
; 4493 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00078	33 d2		 xor	 edx, edx
  0007a	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Old$[rbp]
  00081	b9 02 00 00 00	 mov	 ecx, 2
  00086	48 f7 f1	 div	 rcx
  00089	48 8b 8d 30 01
	00 00		 mov	 rcx, QWORD PTR _Max$[rbp]
  00090	48 2b c8	 sub	 rcx, rax
  00093	48 8b c1	 mov	 rax, rcx
  00096	48 39 85 28 01
	00 00		 cmp	 QWORD PTR _Old$[rbp], rax
  0009d	76 09		 jbe	 SHORT $LN3@Calculate_

; 4494 :             return _Max;

  0009f	48 8b 85 30 01
	00 00		 mov	 rax, QWORD PTR _Max$[rbp]
  000a6	eb 38		 jmp	 SHORT $LN1@Calculate_
$LN3@Calculate_:

; 4495 :         }
; 4496 : 
; 4497 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a8	33 d2		 xor	 edx, edx
  000aa	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Old$[rbp]
  000b1	b9 02 00 00 00	 mov	 ecx, 2
  000b6	48 f7 f1	 div	 rcx
  000b9	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Old$[rbp]
  000c0	48 03 c8	 add	 rcx, rax
  000c3	48 8b c1	 mov	 rax, rcx
  000c6	48 89 85 e8 00
	00 00		 mov	 QWORD PTR $T4[rbp], rax
  000cd	48 8d 95 e8 00
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  000d4	48 8d 4d 08	 lea	 rcx, QWORD PTR _Masked$[rbp]
  000d8	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  000dd	48 8b 00	 mov	 rax, QWORD PTR [rax]
$LN1@Calculate_:

; 4498 :     }

  000e0	48 8b f8	 mov	 rdi, rax
  000e3	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z$rtcFrameData
  000ee	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f3	48 8b c7	 mov	 rax, rdi
  000f6	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000fd	48 33 cd	 xor	 rcx, rbp
  00100	e8 00 00 00 00	 call	 __security_check_cookie
  00105	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0010c	5f		 pop	 rdi
  0010d	5d		 pop	 rbp
  0010e	c3		 ret	 0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ
_TEXT	SEGMENT
this$ = 256
__$ReturnUdt$ = 264
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator, COMDAT

; 4481 :     _NODISCARD _CONSTEXPR20_CONTAINER allocator_type get_allocator() const noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4482 :         return static_cast<allocator_type>(_Getal());

  00024	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002b	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00030	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 4483 :     }

  00037	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0003e	5f		 pop	 rdi
  0003f	5d		 pop	 rbp
  00040	c3		 ret	 0
?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
this$ = 288
__$ReturnUdt$ = 296
_Off$ = 304
_Count$ = 312
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr, COMDAT

; 4365 :         const size_type _Off = 0, const size_type _Count = npos) const {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H
  0001d	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00022	c7 85 e4 00 00
	00 00 00 00 00	 mov	 DWORD PTR $T2[rbp], 0
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00033	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 4366 :         // return [_Off, _Off + _Count) as new string
; 4367 :         return basic_string(*this, _Off, _Count, get_allocator());

  00038	48 8d 95 c4 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0003f	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00046	e8 00 00 00 00	 call	 ?get_allocator@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::get_allocator
  0004b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00050	4c 8b 8d 38 01
	00 00		 mov	 r9, QWORD PTR _Count$[rbp]
  00057	4c 8b 85 30 01
	00 00		 mov	 r8, QWORD PTR _Off$[rbp]
  0005e	48 8b 95 20 01
	00 00		 mov	 rdx, QWORD PTR this$[rbp]
  00065	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR __$ReturnUdt$[rbp]
  0006c	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
  00071	8b 85 e4 00 00
	00		 mov	 eax, DWORD PTR $T2[rbp]
  00077	83 c8 01	 or	 eax, 1
  0007a	89 85 e4 00 00
	00		 mov	 DWORD PTR $T2[rbp], eax
  00080	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR __$ReturnUdt$[rbp]

; 4368 :     }

  00087	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0008e	5f		 pop	 rdi
  0008f	5d		 pop	 rbp
  00090	c3		 ret	 0
?substr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA?AV12@_K0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::substr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
_Alloc_max$ = 8
_Storage_max$ = 40
$T4 = 264
$T5 = 296
$T6 = 328
__$ArrayPad$ = 344
this$ = 384
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT

; 3943 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type max_size() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 2a 00 00 00	 mov	 ecx, 42			; 0000002aH
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR [rsp+424]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 58 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3944 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

  00049	48 8b 8d 80 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00050	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEBAAEBV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00055	48 8b c8	 mov	 rcx, rax
  00058	e8 00 00 00 00	 call	 ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
  0005d	48 89 45 08	 mov	 QWORD PTR _Alloc_max$[rbp], rax

; 3945 :         const size_type _Storage_max = // can always store small string

  00061	48 c7 85 08 01
	00 00 10 00 00
	00		 mov	 QWORD PTR $T4[rbp], 16
  0006c	48 8d 95 08 01
	00 00		 lea	 rdx, QWORD PTR $T4[rbp]
  00073	48 8d 4d 08	 lea	 rcx, QWORD PTR _Alloc_max$[rbp]
  00077	e8 00 00 00 00	 call	 ??$max@_K@std@@YAAEB_KAEB_K0@Z ; std::max<unsigned __int64>
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 89 45 28	 mov	 QWORD PTR _Storage_max$[rbp], rax

; 3946 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 3947 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

  00083	48 8b 45 28	 mov	 rax, QWORD PTR _Storage_max$[rbp]
  00087	48 ff c8	 dec	 rax
  0008a	48 89 85 28 01
	00 00		 mov	 QWORD PTR $T5[rbp], rax
  00091	e8 00 00 00 00	 call	 ?max@?$numeric_limits@_J@std@@SA_JXZ ; std::numeric_limits<__int64>::max
  00096	48 89 85 48 01
	00 00		 mov	 QWORD PTR $T6[rbp], rax
  0009d	48 8d 95 28 01
	00 00		 lea	 rdx, QWORD PTR $T5[rbp]
  000a4	48 8d 8d 48 01
	00 00		 lea	 rcx, QWORD PTR $T6[rbp]
  000ab	e8 00 00 00 00	 call	 ??$min@_K@std@@YAAEB_KAEB_K0@Z ; std::min<unsigned __int64>
  000b0	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 3948 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 3949 :         );
; 3950 :     }

  000b3	48 8b f8	 mov	 rdi, rax
  000b6	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ$rtcFrameData
  000c1	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000c6	48 8b c7	 mov	 rax, rdi
  000c9	48 8b 8d 58 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000d0	48 33 cd	 xor	 rcx, rbp
  000d3	e8 00 00 00 00	 call	 __security_check_cookie
  000d8	48 8d a5 68 01
	00 00		 lea	 rsp, QWORD PTR [rbp+360]
  000df	5f		 pop	 rdi
  000e0	5d		 pop	 rbp
  000e1	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
_TEXT	SEGMENT
this$ = 224
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT

; 3939 :     _NODISCARD _CONSTEXPR20_CONTAINER size_type size() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3940 :         return _Mypair._Myval2._Mysize;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]

; 3941 :     }

  0002a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00031	5f		 pop	 rdi
  00032	5d		 pop	 rbp
  00033	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
this$ = 224
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT

; 3925 :     _NODISCARD _CONSTEXPR20_CONTAINER _Ret_z_ const _Elem* data() const noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3926 :         return _Mypair._Myval2._Myptr();

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8b c8	 mov	 rcx, rax
  00029	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 3927 :     }

  0002e	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00035	5f		 pop	 rdi
  00036	5d		 pop	 rbp
  00037	c3		 ret	 0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z
_TEXT	SEGMENT
_Old_ptr$1 = 8
$T2 = 228
$T3 = 260
this$ = 320
_Count$ = 328
_Ch$ = 336
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 3267 :     _CONSTEXPR20_CONTAINER basic_string& assign(_CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch) {

$LN4:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3268 :         // assign _Count * _Ch
; 3269 :         if (_Count <= _Mypair._Myval2._Myres) {

  00029	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00034	48 39 85 48 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  0003b	77 6d		 ja	 SHORT $LN2@assign

; 3270 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  0003d	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8b c8	 mov	 rcx, rax
  00047	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0004c	48 89 45 08	 mov	 QWORD PTR _Old_ptr$1[rbp], rax

; 3271 :             _Mypair._Myval2._Mysize = _Count;

  00050	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0005e	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3272 :             _Traits::assign(_Old_ptr, _Count, _Ch);

  00062	44 0f b6 85 50
	01 00 00	 movzx	 r8d, BYTE PTR _Ch$[rbp]
  0006a	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00071	48 8b 4d 08	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  00075	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3273 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  0007a	c6 85 e4 00 00
	00 00		 mov	 BYTE PTR $T2[rbp], 0
  00081	48 8b 85 48 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00088	48 8b 4d 08	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  0008c	48 03 c8	 add	 rcx, rax
  0008f	48 8b c1	 mov	 rax, rcx
  00092	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  00099	48 8b c8	 mov	 rcx, rax
  0009c	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3274 :             return *this;

  000a1	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a8	eb 36		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 3275 :         }
; 3276 : 
; 3277 :         return _Reallocate_for(

  000aa	48 8d 85 04 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  000b1	48 8b f8	 mov	 rdi, rax
  000b4	33 c0		 xor	 eax, eax
  000b6	b9 01 00 00 00	 mov	 ecx, 1
  000bb	f3 aa		 rep stosb
  000bd	44 0f b6 8d 50
	01 00 00	 movzx	 r9d, BYTE PTR _Ch$[rbp]
  000c5	44 0f b6 85 04
	01 00 00	 movzx	 r8d, BYTE PTR $T3[rbp]
  000cd	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  000d4	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000db	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>@@D@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_138c3d7c38c85abb84c7fc7bfe5747b7>,char>
$LN1@assign:

; 3278 :             _Count,
; 3279 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem _Ch) {
; 3280 :                 _Traits::assign(_New_ptr, _Count, _Ch);
; 3281 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3282 :             },
; 3283 :             _Ch);
; 3284 :     }

  000e0	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000e7	5f		 pop	 rdi
  000e8	5d		 pop	 rbp
  000e9	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z
_TEXT	SEGMENT
_Old_ptr$1 = 8
$T2 = 228
$T3 = 260
this$ = 320
_Ptr$ = 328
_Count$ = 336
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 3244 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3245 :         // assign [_Ptr, _Ptr + _Count)
; 3246 :         if (_Count <= _Mypair._Myval2._Myres) {

  00029	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00034	48 39 85 50 01
	00 00		 cmp	 QWORD PTR _Count$[rbp], rax
  0003b	77 6c		 ja	 SHORT $LN2@assign

; 3247 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

  0003d	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8b c8	 mov	 rcx, rax
  00047	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  0004c	48 89 45 08	 mov	 QWORD PTR _Old_ptr$1[rbp], rax

; 3248 :             _Mypair._Myval2._Mysize = _Count;

  00050	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00057	48 8b 8d 50 01
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0005e	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3249 :             _Traits::move(_Old_ptr, _Ptr, _Count);

  00062	4c 8b 85 50 01
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00069	48 8b 95 48 01
	00 00		 mov	 rdx, QWORD PTR _Ptr$[rbp]
  00070	48 8b 4d 08	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  00074	e8 00 00 00 00	 call	 ?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::move

; 3250 :             _Traits::assign(_Old_ptr[_Count], _Elem());

  00079	c6 85 e4 00 00
	00 00		 mov	 BYTE PTR $T2[rbp], 0
  00080	48 8b 85 50 01
	00 00		 mov	 rax, QWORD PTR _Count$[rbp]
  00087	48 8b 4d 08	 mov	 rcx, QWORD PTR _Old_ptr$1[rbp]
  0008b	48 03 c8	 add	 rcx, rax
  0008e	48 8b c1	 mov	 rax, rcx
  00091	48 8d 95 e4 00
	00 00		 lea	 rdx, QWORD PTR $T2[rbp]
  00098	48 8b c8	 mov	 rcx, rax
  0009b	e8 00 00 00 00	 call	 ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ; std::_Narrow_char_traits<char,int>::assign

; 3251 :             return *this;

  000a0	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a7	eb 35		 jmp	 SHORT $LN1@assign
$LN2@assign:

; 3252 :         }
; 3253 : 
; 3254 :         return _Reallocate_for(

  000a9	48 8d 85 04 01
	00 00		 lea	 rax, QWORD PTR $T3[rbp]
  000b0	48 8b f8	 mov	 rdi, rax
  000b3	33 c0		 xor	 eax, eax
  000b5	b9 01 00 00 00	 mov	 ecx, 1
  000ba	f3 aa		 rep stosb
  000bc	4c 8b 8d 48 01
	00 00		 mov	 r9, QWORD PTR _Ptr$[rbp]
  000c3	44 0f b6 85 04
	01 00 00	 movzx	 r8d, BYTE PTR $T3[rbp]
  000cb	48 8b 95 50 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  000d2	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d9	e8 00 00 00 00	 call	 ??$_Reallocate_for@V<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_66f57f934f28d61049862f64df852ff0>@@PEBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_66f57f934f28d61049862f64df852ff0>,char const *>
$LN1@assign:

; 3255 :             _Count,
; 3256 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) {
; 3257 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3258 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3259 :             },
; 3260 :             _Ptr);
; 3261 :     }

  000de	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000e5	5f		 pop	 rdi
  000e6	5d		 pop	 rbp
  000e7	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K_K@Z
_TEXT	SEGMENT
this$ = 224
_Right$ = 232
_Roff$ = 240
_Count$ = 248
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K_K@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT

; 3220 :         const basic_string& _Right, const size_type _Roff, size_type _Count = npos) {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00029	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3221 :         // assign _Right [_Roff, _Roff + _Count)
; 3222 :         _Right._Mypair._Myval2._Check_offset(_Roff);

  0002e	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00035	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _Roff$[rbp]
  0003c	48 8b c8	 mov	 rcx, rax
  0003f	e8 00 00 00 00	 call	 ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ; std::_String_val<std::_Simple_types<char> >::_Check_offset

; 3223 :         _Count = _Right._Mypair._Myval2._Clamp_suffix_size(_Roff, _Count);

  00044	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0004b	4c 8b 85 f8 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00052	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _Roff$[rbp]
  00059	48 8b c8	 mov	 rcx, rax
  0005c	e8 00 00 00 00	 call	 ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
  00061	48 89 85 f8 00
	00 00		 mov	 QWORD PTR _Count$[rbp], rax

; 3224 :         return assign(_Right._Mypair._Myval2._Myptr() + _Roff, _Count);

  00068	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0006f	48 8b c8	 mov	 rcx, rax
  00072	e8 00 00 00 00	 call	 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
  00077	48 03 85 f0 00
	00 00		 add	 rax, QWORD PTR _Roff$[rbp]
  0007e	4c 8b 85 f8 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00085	48 8b d0	 mov	 rdx, rax
  00088	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0008f	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@QEBD_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3225 :     }

  00094	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0009b	5f		 pop	 rdi
  0009c	5d		 pop	 rbp
  0009d	c3		 ret	 0
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K_K@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
_TEXT	SEGMENT
_Alproxy$ = 8
$S8$ = 36
_To_delete$ = 72
__$ArrayPad$ = 280
this$ = 320
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3002 :     _CONSTEXPR20_CONTAINER ~basic_string() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 1a 00 00 00	 mov	 ecx, 26
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR [rsp+360]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 18 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 3003 :         _Tidy_deallocate();

  00049	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00050	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate

; 3004 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3005 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00055	48 8b 8d 40 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005c	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00061	48 8b d0	 mov	 rdx, rax
  00064	48 8d 4d 24	 lea	 rcx, QWORD PTR $S8$[rbp]
  00068	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0006d	48 8d 45 24	 lea	 rax, QWORD PTR $S8$[rbp]
  00071	48 89 45 08	 mov	 QWORD PTR _Alproxy$[rbp], rax

; 3006 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

  00075	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007f	48 89 45 48	 mov	 QWORD PTR _To_delete$[rbp], rax

; 3007 :         _Mypair._Myval2._Myproxy = nullptr;

  00083	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0008a	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 3008 :         _Delete_plain_internal(_Alproxy, _To_delete);

  00091	48 8b 55 48	 mov	 rdx, QWORD PTR _To_delete$[rbp]
  00095	48 8b 4d 08	 mov	 rcx, QWORD PTR _Alproxy$[rbp]
  00099	e8 00 00 00 00	 call	 ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAEAV?$allocator@U_Container_proxy@std@@@0@QEAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >

; 3009 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3010 :     }

  0009e	48 8b 85 40 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000a5	48 8b c8	 mov	 rcx, rax
  000a8	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  000ad	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ$rtcFrameData
  000b8	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000bd	48 8b 8d 18 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  000c4	48 33 cd	 xor	 rcx, rbp
  000c7	e8 00 00 00 00	 call	 __security_check_cookie
  000cc	48 8d a5 28 01
	00 00		 lea	 rsp, QWORD PTR [rbp+296]
  000d3	5f		 pop	 rdi
  000d4	5d		 pop	 rbp
  000d5	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z
_TEXT	SEGMENT
_My_data$ = 8
_Right_data$ = 40
tv136 = 248
this$ = 288
_Right$ = 296
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents, COMDAT

; 2872 :     _CONSTEXPR20_CONTAINER void _Take_contents(basic_string& _Right) noexcept {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2873 :         // assign by stealing _Right's buffer
; 2874 :         // pre: this != &_Right
; 2875 :         // pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2876 :         // pre: *this owns no memory, iterators orphaned
; 2877 :         // (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2878 :         auto& _My_data    = _Mypair._Myval2;

  00024	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 89 45 08	 mov	 QWORD PTR _My_data$[rbp], rax

; 2879 :         auto& _Right_data = _Right._Mypair._Myval2;

  0002f	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00036	48 89 45 28	 mov	 QWORD PTR _Right_data$[rbp], rax

; 2880 : 
; 2881 :         if constexpr (_Can_memcpy_val) {
; 2882 : #ifdef __cpp_lib_constexpr_string
; 2883 :             if (!_STD is_constant_evaluated())
; 2884 : #endif // __cpp_lib_constexpr_string
; 2885 :             {
; 2886 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2887 :                 if (_Right_data._Large_string_engaged()) {

  0003a	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  0003e	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00043	0f b6 c0	 movzx	 eax, al
  00046	85 c0		 test	 eax, eax
  00048	74 15		 je	 SHORT $LN2@Take_conte

; 2888 :                     // take ownership of _Right's iterators along with its buffer
; 2889 :                     _Swap_proxy_and_iterators(_Right);

  0004a	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  00051	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00058	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators

; 2890 :                 } else {

  0005d	eb 09		 jmp	 SHORT $LN3@Take_conte
$LN2@Take_conte:

; 2891 :                     _Right_data._Orphan_all();

  0005f	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  00063	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all
$LN3@Take_conte:

; 2892 :                 }
; 2893 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 2894 : 
; 2895 :                 _Memcpy_val_from(_Right);

  00068	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  0006f	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00076	e8 00 00 00 00	 call	 ?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from

; 2896 :                 _Right._Tidy_init();

  0007b	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00082	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2897 :                 return;

  00087	e9 b6 00 00 00	 jmp	 $LN1@Take_conte

; 2898 :             }
; 2899 :         }
; 2900 : 
; 2901 :         if (_Right_data._Large_string_engaged()) { // steal buffer

  0008c	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  00090	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  00095	0f b6 c0	 movzx	 eax, al
  00098	85 c0		 test	 eax, eax
  0009a	74 39		 je	 SHORT $LN4@Take_conte

; 2902 :             _Construct_in_place(_My_data._Bx._Ptr, _Right_data._Bx._Ptr);

  0009c	48 8b 45 28	 mov	 rax, QWORD PTR _Right_data$[rbp]
  000a0	48 83 c0 08	 add	 rax, 8
  000a4	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data$[rbp]
  000a8	48 83 c1 08	 add	 rcx, 8
  000ac	48 8b d0	 mov	 rdx, rax
  000af	e8 00 00 00 00	 call	 ??$_Construct_in_place@PEADAEAPEAD@std@@YAXAEAPEAD0@Z ; std::_Construct_in_place<char *,char * &>

; 2903 :             _Right_data._Bx._Ptr = nullptr;

  000b4	48 8b 45 28	 mov	 rax, QWORD PTR _Right_data$[rbp]
  000b8	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 2904 :             _Swap_proxy_and_iterators(_Right);

  000c0	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  000c7	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000ce	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators

; 2905 :         } else { // copy small string buffer

  000d3	eb 40		 jmp	 SHORT $LN5@Take_conte
$LN4@Take_conte:

; 2906 :             _Traits::copy(_My_data._Bx._Buf, _Right_data._Bx._Buf, _Right_data._Mysize + 1);

  000d5	48 8b 45 28	 mov	 rax, QWORD PTR _Right_data$[rbp]
  000d9	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000dd	48 ff c0	 inc	 rax
  000e0	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  000e4	48 83 c1 08	 add	 rcx, 8
  000e8	48 8b 55 08	 mov	 rdx, QWORD PTR _My_data$[rbp]
  000ec	48 83 c2 08	 add	 rdx, 8
  000f0	48 89 95 f8 00
	00 00		 mov	 QWORD PTR tv136[rbp], rdx
  000f7	4c 8b c0	 mov	 r8, rax
  000fa	48 8b d1	 mov	 rdx, rcx
  000fd	48 8b 85 f8 00
	00 00		 mov	 rax, QWORD PTR tv136[rbp]
  00104	48 8b c8	 mov	 rcx, rax
  00107	e8 00 00 00 00	 call	 ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ; std::_Char_traits<char,int>::copy

; 2907 :             _Right_data._Orphan_all();

  0010c	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  00110	e8 00 00 00 00	 call	 ?_Orphan_all@_Container_base12@std@@QEAAXXZ ; std::_Container_base12::_Orphan_all
$LN5@Take_conte:

; 2908 :         }
; 2909 : 
; 2910 :         _My_data._Mysize = _Right_data._Mysize;

  00115	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00119	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  0011d	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00121	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2911 :         _My_data._Myres  = _Right_data._Myres;

  00125	48 8b 45 08	 mov	 rax, QWORD PTR _My_data$[rbp]
  00129	48 8b 4d 28	 mov	 rcx, QWORD PTR _Right_data$[rbp]
  0012d	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00131	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 2912 :         _Right._Tidy_init();

  00135	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0013c	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
  00141	90		 npad	 1
$LN1@Take_conte:

; 2913 :     }

  00142	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00149	5f		 pop	 rdi
  0014a	5d		 pop	 rbp
  0014b	c3		 ret	 0
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z
_TEXT	SEGMENT
_My_data_mem$ = 8
_Right_data_mem$ = 40
this$ = 288
_Right$ = 296
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from, COMDAT

; 2863 :     void _Memcpy_val_from(const basic_string& _Right) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2864 :         _STL_INTERNAL_CHECK(_Can_memcpy_val); // TRANSITION, if constexpr
; 2865 :         const auto _My_data_mem =

  00024	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b c8	 mov	 rcx, rax
  0002e	e8 00 00 00 00	 call	 ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEAV?$_String_val@U?$_Simple_types@D@std@@@0@AEAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
  00033	48 83 c0 08	 add	 rax, 8
  00037	48 89 45 08	 mov	 QWORD PTR _My_data_mem$[rbp], rax

; 2866 :             reinterpret_cast<unsigned char*>(_STD addressof(_Mypair._Myval2)) + _Memcpy_val_offset;
; 2867 :         const auto _Right_data_mem =

  0003b	48 8b 85 28 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00042	48 8b c8	 mov	 rcx, rax
  00045	e8 00 00 00 00	 call	 ??$addressof@$$CBV?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPEBV?$_String_val@U?$_Simple_types@D@std@@@0@AEBV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > const >
  0004a	48 83 c0 08	 add	 rax, 8
  0004e	48 89 45 28	 mov	 QWORD PTR _Right_data_mem$[rbp], rax

; 2868 :             reinterpret_cast<const unsigned char*>(_STD addressof(_Right._Mypair._Myval2)) + _Memcpy_val_offset;
; 2869 :         _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00052	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00058	48 8b 55 28	 mov	 rdx, QWORD PTR _Right_data_mem$[rbp]
  0005c	48 8b 4d 08	 mov	 rcx, QWORD PTR _My_data_mem$[rbp]
  00060	e8 00 00 00 00	 call	 memcpy

; 2870 :     }

  00065	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  0006c	5f		 pop	 rdi
  0006d	5d		 pop	 rbp
  0006e	c3		 ret	 0
?_Memcpy_val_from@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEBV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Memcpy_val_from
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
this$ = 288
_Right$ = 296
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2605 :         : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 8d 28 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  0002b	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??$move@AEAV?$allocator@D@std@@@std@@YA$$QEAV?$allocator@D@0@AEAV10@@Z ; std::move<std::allocator<char> &>
  00038	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003f	4c 8b c0	 mov	 r8, rax
  00042	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  00049	e8 00 00 00 00	 call	 ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >

; 2606 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  0004e	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00055	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0005a	48 8b d0	 mov	 rdx, rax
  0005d	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00064	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  00069	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00070	48 8b d0	 mov	 rdx, rax
  00073	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 2607 :         _Take_contents(_Right);

  00078	48 8b 95 28 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  0007f	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00086	e8 00 00 00 00	 call	 ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXAEAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents

; 2608 :     }

  0008b	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00092	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00099	5f		 pop	 rdi
  0009a	5d		 pop	 rbp
  0009b	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@$$QEAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z
_TEXT	SEGMENT
_Alproxy$ = 8
$S9$ = 36
_Proxy$ = 72
$T5 = 308
__$ArrayPad$ = 328
this$ = 368
_Count$ = 376
_Ch$ = 384
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2538 :         : _Mypair(_Zero_then_variadic_args_t{}) {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00022	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  00027	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002c	f3 ab		 rep stosd
  0002e	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0003d	48 33 c5	 xor	 rax, rbp
  00040	48 89 85 48 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0004e	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00053	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005a	0f b6 95 34 01
	00 00		 movzx	 edx, BYTE PTR $T5[rbp]
  00061	48 8b c8	 mov	 rcx, rax
  00064	e8 00 00 00 00	 call	 ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
  00069	90		 npad	 1

; 2539 :         // construct from _Count * _Ch
; 2540 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  0006a	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00071	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00076	48 8b d0	 mov	 rdx, rax
  00079	48 8d 4d 24	 lea	 rcx, QWORD PTR $S9$[rbp]
  0007d	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  00082	48 8d 45 24	 lea	 rax, QWORD PTR $S9$[rbp]
  00086	48 89 45 08	 mov	 QWORD PTR _Alproxy$[rbp], rax

; 2541 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  0008a	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00091	4c 8b c0	 mov	 r8, rax
  00094	48 8b 55 08	 mov	 rdx, QWORD PTR _Alproxy$[rbp]
  00098	48 8d 4d 48	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  0009c	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000a1	90		 npad	 1

; 2542 :         _Tidy_init();

  000a2	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000a9	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2543 :         assign(_Count, _Ch);

  000ae	44 0f b6 85 80
	01 00 00	 movzx	 r8d, BYTE PTR _Ch$[rbp]
  000b6	48 8b 95 78 01
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  000bd	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000c4	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@_KD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2544 :         _Proxy._Release();

  000c9	48 8d 4d 48	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  000cd	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
  000d2	90		 npad	 1

; 2545 :     }

  000d3	48 8d 4d 48	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  000d7	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000dc	90		 npad	 1
  000dd	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000e4	48 8b f8	 mov	 rdi, rax
  000e7	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z$rtcFrameData
  000f2	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  000f7	48 8b c7	 mov	 rax, rdi
  000fa	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00101	48 33 cd	 xor	 rcx, rbp
  00104	e8 00 00 00 00	 call	 __security_check_cookie
  00109	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  00110	5f		 pop	 rdi
  00111	5d		 pop	 rbp
  00112	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 8
$S9$ = 36
_Proxy$ = 72
$T5 = 308
__$ArrayPad$ = 328
this$ = 368
_Count$ = 376
_Ch$ = 384
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 8
$S9$ = 36
_Proxy$ = 72
$T5 = 308
__$ArrayPad$ = 328
this$ = 368
_Count$ = 376
_Ch$ = 384
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 8
$S9$ = 36
_Proxy$ = 72
$T5 = 308
__$ArrayPad$ = 328
this$ = 368
_Count$ = 376
_Ch$ = 384
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 8
$S9$ = 36
_Proxy$ = 72
$T5 = 308
__$ArrayPad$ = 328
this$ = 368
_Count$ = 376
_Ch$ = 384
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@_KD@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
_Alproxy$ = 8
$S15$ = 36
_Proxy$ = 72
$T5 = 308
__$ArrayPad$ = 328
this$ = 368
_Right$ = 376
_Roff$ = 384
_Count$ = 392
_Al$ = 400
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2489 :         : _Mypair(_One_then_variadic_args_t{}, _Al) { // construct from _Right [_Roff, _Roff + _Count)

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	55		 push	 rbp
  00015	57		 push	 rdi
  00016	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  0001d	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00022	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00027	b9 26 00 00 00	 mov	 ecx, 38			; 00000026H
  0002c	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00031	f3 ab		 rep stosd
  00033	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR [rsp+408]
  0003b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00042	48 33 c5	 xor	 rax, rbp
  00045	48 89 85 48 01
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00053	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00058	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005f	4c 8b 85 90 01
	00 00		 mov	 r8, QWORD PTR _Al$[rbp]
  00066	0f b6 95 34 01
	00 00		 movzx	 edx, BYTE PTR $T5[rbp]
  0006d	48 8b c8	 mov	 rcx, rax
  00070	e8 00 00 00 00	 call	 ??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>
  00075	90		 npad	 1

; 2490 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

  00076	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0007d	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  00082	48 8b d0	 mov	 rdx, rax
  00085	48 8d 4d 24	 lea	 rcx, QWORD PTR $S15$[rbp]
  00089	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0008e	48 8d 45 24	 lea	 rax, QWORD PTR $S15$[rbp]
  00092	48 89 45 08	 mov	 QWORD PTR _Alproxy$[rbp], rax

; 2491 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _Mypair._Myval2);

  00096	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0009d	4c 8b c0	 mov	 r8, rax
  000a0	48 8b 55 08	 mov	 rdx, QWORD PTR _Alproxy$[rbp]
  000a4	48 8d 4d 48	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  000a8	e8 00 00 00 00	 call	 ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@AEAV?$allocator@U_Container_proxy@std@@@1@AEAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000ad	90		 npad	 1

; 2492 :         _Tidy_init();

  000ae	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000b5	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2493 :         assign(_Right, _Roff, _Count);

  000ba	4c 8b 8d 88 01
	00 00		 mov	 r9, QWORD PTR _Count$[rbp]
  000c1	4c 8b 85 80 01
	00 00		 mov	 r8, QWORD PTR _Roff$[rbp]
  000c8	48 8b 95 78 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  000cf	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  000d6	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAV12@AEBV12@_K_K@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 2494 :         _Proxy._Release();

  000db	48 8d 4d 48	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  000df	e8 00 00 00 00	 call	 ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ; std::_Basic_container_proxy_ptr12::_Release
  000e4	90		 npad	 1

; 2495 :     }

  000e5	48 8d 4d 48	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  000e9	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  000ee	90		 npad	 1
  000ef	48 8b 85 70 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  000f6	48 8b f8	 mov	 rdi, rax
  000f9	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  000fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z$rtcFrameData
  00104	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  00109	48 8b c7	 mov	 rax, rdi
  0010c	48 8b 8d 48 01
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00113	48 33 cd	 xor	 rcx, rbp
  00116	e8 00 00 00 00	 call	 __security_check_cookie
  0011b	48 8d a5 58 01
	00 00		 lea	 rsp, QWORD PTR [rbp+344]
  00122	5f		 pop	 rdi
  00123	5d		 pop	 rbp
  00124	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 8
$S15$ = 36
_Proxy$ = 72
$T5 = 308
__$ArrayPad$ = 328
this$ = 368
_Right$ = 376
_Roff$ = 384
_Count$ = 392
_Al$ = 400
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 8
$S15$ = 36
_Proxy$ = 72
$T5 = 308
__$ArrayPad$ = 328
this$ = 368
_Right$ = 376
_Roff$ = 384
_Count$ = 392
_Al$ = 400
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 8
$S15$ = 36
_Proxy$ = 72
$T5 = 308
__$ArrayPad$ = 328
this$ = 368
_Right$ = 376
_Roff$ = 384
_Count$ = 392
_Al$ = 400
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8b 8d 70 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001b	e8 00 00 00 00	 call	 ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	5f		 pop	 rdi
  00025	5d		 pop	 rbp
  00026	c3		 ret	 0
?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
_Alproxy$ = 8
$S15$ = 36
_Proxy$ = 72
$T5 = 308
__$ArrayPad$ = 328
this$ = 368
_Right$ = 376
_Roff$ = 384
_Count$ = 392
_Al$ = 400
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA PROC ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00010	48 8d 6a 20	 lea	 rbp, QWORD PTR [rdx+32]
  00014	48 8d 4d 48	 lea	 rcx, QWORD PTR _Proxy$[rbp]
  00018	e8 00 00 00 00	 call	 ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QEAA@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	5f		 pop	 rdi
  00022	5d		 pop	 rbp
  00023	c3		 ret	 0
?dtor$1@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV01@_K1AEBV?$allocator@D@1@@Z@4HA ENDP ; `std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
this$ = 288
_Al$ = 296
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 2473 :         : _Mypair(_One_then_variadic_args_t{}, _Al) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	4c 8b 85 28 01
	00 00		 mov	 r8, QWORD PTR _Al$[rbp]
  00032	0f b6 95 c4 00
	00 00		 movzx	 edx, BYTE PTR $T1[rbp]
  00039	48 8b c8	 mov	 rcx, rax
  0003c	e8 00 00 00 00	 call	 ??$?0AEBV?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_One_then_variadic_args_t@1@AEBV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> const &>

; 2474 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

  00041	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00048	e8 00 00 00 00	 call	 ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
  0004d	48 8b d0	 mov	 rdx, rax
  00050	48 8d 8d e4 00
	00 00		 lea	 rcx, QWORD PTR $T2[rbp]
  00057	e8 00 00 00 00	 call	 ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QEAA@AEBV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
  0005c	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00063	48 8b d0	 mov	 rdx, rax
  00066	e8 00 00 00 00	 call	 ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QEAAX$$QEAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >

; 2475 :         _Tidy_init();

  0006b	48 8b 8d 20 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	e8 00 00 00 00	 call	 ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init

; 2476 :     }

  00077	48 8b 85 20 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0007e	48 8d a5 08 01
	00 00		 lea	 rsp, QWORD PTR [rbp+264]
  00085	5f		 pop	 rdi
  00086	5d		 pop	 rbp
  00087	c3		 ret	 0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@AEBV?$allocator@D@1@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0001a	48 83 c0 08	 add	 rax, 8
  0001e	48 8b c8	 mov	 rcx, rax
  00021	e8 00 00 00 00	 call	 ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT

; 2348 :         _CONSTEXPR20_CONTAINER ~_Bxty() noexcept {} // user-provided, for fancy pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT

; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z
_TEXT	SEGMENT
$T1 = 200
this$ = 256
_Off$ = 264
_Size$ = 272
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size, COMDAT

; 2340 :     _CONSTEXPR20_CONTAINER size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2341 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2342 :         return (_STD min)(_Size, _Mysize - _Off);

  00029	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  00037	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0003b	48 2b c1	 sub	 rax, rcx
  0003e	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  00045	48 8d 95 c8 00
	00 00		 lea	 rdx, QWORD PTR $T1[rbp]
  0004c	48 8d 8d 10 01
	00 00		 lea	 rcx, QWORD PTR _Size$[rbp]
  00053	e8 00 00 00 00	 call	 ??$min@_K@std@@YAAEB_KAEB_K0@Z ; std::min<unsigned __int64>
  00058	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 2343 :     }

  0005b	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00062	5f		 pop	 rdi
  00063	5d		 pop	 rbp
  00064	c3		 ret	 0
?_Clamp_suffix_size@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_K_K0@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 2336 :     [[noreturn]] static void _Xran() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2337 :         _Xout_of_range("invalid string position");

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00022	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPEBD@Z ; std::_Xout_of_range
$LN2@Xran:

; 2338 :     }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z
_TEXT	SEGMENT
this$ = 224
_Off$ = 232
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z PROC ; std::_String_val<std::_Simple_types<char> >::_Check_offset, COMDAT

; 2322 :     _CONSTEXPR20_CONTAINER void _Check_offset(const size_type _Off) const {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2323 :         // checks whether _Off is in the bounds of [0, size()]
; 2324 :         if (_Mysize < _Off) {

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Off$[rbp]
  00032	48 39 48 18	 cmp	 QWORD PTR [rax+24], rcx
  00036	73 05		 jae	 SHORT $LN2@Check_offs

; 2325 :             _Xran();

  00038	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN2@Check_offs:
$LN3@Check_offs:

; 2326 :         }
; 2327 :     }

  0003d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00044	5f		 pop	 rdi
  00045	5d		 pop	 rbp
  00046	c3		 ret	 0
?_Check_offset@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAX_K@Z ENDP ; std::_String_val<std::_Simple_types<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT

; 2313 :     _CONSTEXPR20_CONTAINER bool _Large_string_engaged() const noexcept {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2314 : #ifdef __cpp_lib_constexpr_string
; 2315 :         if (_STD is_constant_evaluated()) {
; 2316 :             return true;
; 2317 :         }
; 2318 : #endif // __cpp_lib_constexpr_string
; 2319 :         return _BUF_SIZE <= _Myres;

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 78 20 10	 cmp	 QWORD PTR [rax+32], 16
  0002b	72 0c		 jb	 SHORT $LN3@Large_stri
  0002d	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv66[rbp], 1
  00037	eb 0a		 jmp	 SHORT $LN4@Large_stri
$LN3@Large_stri:
  00039	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv66[rbp], 0
$LN4@Large_stri:
  00043	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv66[rbp]

; 2320 :     }

  0004a	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ
_TEXT	SEGMENT
_Result$ = 8
this$ = 256
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 2304 :     _CONSTEXPR20_CONTAINER const value_type* _Myptr() const noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2305 :         const value_type* _Result = _Bx._Buf;

  0001f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 c0 08	 add	 rax, 8
  0002a	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax

; 2306 :         if (_Large_string_engaged()) {

  0002e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0003a	0f b6 c0	 movzx	 eax, al
  0003d	85 c0		 test	 eax, eax
  0003f	74 14		 je	 SHORT $LN2@Myptr

; 2307 :             _Result = _Unfancy(_Bx._Ptr);

  00041	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004c	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00051	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
$LN2@Myptr:

; 2308 :         }
; 2309 : 
; 2310 :         return _Result;

  00055	48 8b 45 08	 mov	 rax, QWORD PTR _Result$[rbp]

; 2311 :     }

  00059	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBAPEBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
_TEXT	SEGMENT
_Result$ = 8
this$ = 256
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT

; 2295 :     _CONSTEXPR20_CONTAINER value_type* _Myptr() noexcept {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2296 :         value_type* _Result = _Bx._Buf;

  0001f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 c0 08	 add	 rax, 8
  0002a	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax

; 2297 :         if (_Large_string_engaged()) {

  0002e	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00035	e8 00 00 00 00	 call	 ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QEBA_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
  0003a	0f b6 c0	 movzx	 eax, al
  0003d	85 c0		 test	 eax, eax
  0003f	74 14		 je	 SHORT $LN2@Myptr

; 2298 :             _Result = _Unfancy(_Bx._Ptr);

  00041	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0004c	e8 00 00 00 00	 call	 ??$_Unfancy@D@std@@YAPEADPEAD@Z ; std::_Unfancy<char>
  00051	48 89 45 08	 mov	 QWORD PTR _Result$[rbp], rax
$LN2@Myptr:

; 2299 :         }
; 2300 : 
; 2301 :         return _Result;

  00055	48 8b 45 08	 mov	 rax, QWORD PTR _Result$[rbp]

; 2302 :     }

  00059	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT

; 2284 :     _CONSTEXPR20_CONTAINER _String_val() noexcept : _Bx() {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0_Container_base12@std@@QEAA@XZ ; std::_Container_base12::_Container_base12
  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 83 c0 08	 add	 rax, 8
  00036	48 8b c8	 mov	 rcx, rax
  00039	e8 00 00 00 00	 call	 ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty

; 2285 : 
; 2286 :     // length of internal buffer, [1, 16]:
; 2287 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2288 :     // roundup mask for allocated buffers, [0, 15]:
; 2289 :     static constexpr size_type _ALLOC_MASK = sizeof(value_type) <= 1 ? 15
; 2290 :                                            : sizeof(value_type) <= 2 ? 7
; 2291 :                                            : sizeof(value_type) <= 4 ? 3
; 2292 :                                            : sizeof(value_type) <= 8 ? 1
; 2293 :                                                                      : 0;
; 2294 : 
; 2295 :     _CONSTEXPR20_CONTAINER value_type* _Myptr() noexcept {
; 2296 :         value_type* _Result = _Bx._Buf;
; 2297 :         if (_Large_string_engaged()) {
; 2298 :             _Result = _Unfancy(_Bx._Ptr);
; 2299 :         }
; 2300 : 
; 2301 :         return _Result;
; 2302 :     }
; 2303 : 
; 2304 :     _CONSTEXPR20_CONTAINER const value_type* _Myptr() const noexcept {
; 2305 :         const value_type* _Result = _Bx._Buf;
; 2306 :         if (_Large_string_engaged()) {
; 2307 :             _Result = _Unfancy(_Bx._Ptr);
; 2308 :         }
; 2309 : 
; 2310 :         return _Result;
; 2311 :     }
; 2312 : 
; 2313 :     _CONSTEXPR20_CONTAINER bool _Large_string_engaged() const noexcept {
; 2314 : #ifdef __cpp_lib_constexpr_string
; 2315 :         if (_STD is_constant_evaluated()) {
; 2316 :             return true;
; 2317 :         }
; 2318 : #endif // __cpp_lib_constexpr_string
; 2319 :         return _BUF_SIZE <= _Myres;
; 2320 :     }
; 2321 : 
; 2322 :     _CONSTEXPR20_CONTAINER void _Check_offset(const size_type _Off) const {
; 2323 :         // checks whether _Off is in the bounds of [0, size()]
; 2324 :         if (_Mysize < _Off) {
; 2325 :             _Xran();
; 2326 :         }
; 2327 :     }
; 2328 : 
; 2329 :     _CONSTEXPR20_CONTAINER void _Check_offset_exclusive(const size_type _Off) const {
; 2330 :         // checks whether _Off is in the bounds of [0, size())
; 2331 :         if (_Mysize <= _Off) {
; 2332 :             _Xran();
; 2333 :         }
; 2334 :     }
; 2335 : 
; 2336 :     [[noreturn]] static void _Xran() {
; 2337 :         _Xout_of_range("invalid string position");
; 2338 :     }
; 2339 : 
; 2340 :     _CONSTEXPR20_CONTAINER size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2341 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2342 :         return (_STD min)(_Size, _Mysize - _Off);
; 2343 :     }
; 2344 : 
; 2345 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2346 :         _CONSTEXPR20_CONTAINER _Bxty() noexcept : _Ptr() {} // user-provided, for fancy pointers
; 2347 : 
; 2348 :         _CONSTEXPR20_CONTAINER ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2349 : 
; 2350 :         value_type _Buf[_BUF_SIZE];
; 2351 :         pointer _Ptr;
; 2352 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2353 :     } _Bx;
; 2354 : 
; 2355 :     size_type _Mysize = 0; // current length of string

  0003e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00045	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 2356 :     size_type _Myres  = 0; // current storage reserved for string

  0004d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00054	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 2284 :     _CONSTEXPR20_CONTAINER _String_val() noexcept : _Bx() {}

  0005c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00063	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0006a	5f		 pop	 rdi
  0006b	5d		 pop	 rbp
  0006c	c3		 ret	 0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z
_TEXT	SEGMENT
__formal$ = 224
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 727  :     _NODISCARD static _CONSTEXPR20_DYNALLOC size_type max_size(const _Alloc&) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 728  :         return static_cast<size_t>(-1) / sizeof(value_type);

  0001f	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1

; 729  :     }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA_KAEBV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QEAAPEAD_K@Z
_TEXT	SEGMENT
this$ = 224
_Count$ = 232
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z PROC		; std::allocator<char>::allocate, COMDAT

; 838  :     _NODISCARD _CONSTEXPR20_DYNALLOC __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 839  :         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00024	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Count$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$_Get_size_of_n@$00@std@@YA_K_K@Z ; std::_Get_size_of_n<1>
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@YAPEAX_K@Z ; std::_Allocate<16,std::_Default_allocate_traits,0>

; 840  :     }

  00038	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003f	5f		 pop	 rdi
  00040	5d		 pop	 rbp
  00041	c3		 ret	 0
?allocate@?$allocator@D@std@@QEAAPEAD_K@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z
_TEXT	SEGMENT
this$ = 224
_Ptr$ = 232
_Count$ = 240
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z PROC	; std::allocator<char>::deallocate, COMDAT

; 833  :     _CONSTEXPR20_DYNALLOC void deallocate(_Ty* const _Ptr, const size_t _Count) {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 834  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 835  :         _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00029	48 8b 95 f0 00
	00 00		 mov	 rdx, QWORD PTR _Count$[rbp]
  00030	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Ptr$[rbp]
  00037	e8 00 00 00 00	 call	 ??$_Deallocate@$0BA@$0A@@std@@YAXPEAX_K@Z ; std::_Deallocate<16,0>

; 836  :     }

  0003c	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00043	5f		 pop	 rdi
  00044	5d		 pop	 rbp
  00045	c3		 ret	 0
?deallocate@?$allocator@D@std@@QEAAXQEAD_K@Z ENDP	; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$allocator@D@std@@QEAA@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT

; 825  :     constexpr allocator() noexcept {}

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??0?$allocator@D@std@@QEAA@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2373 : [[noreturn]] inline void _Xlen_string() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 2374 :     _Xlength_error("string too long");

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFNIOLAK@string?5too?5long@
  00022	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPEBD@Z ; std::_Xlength_error
$LN2@Xlen_strin:

; 2375 : }

  00027	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002e	5f		 pop	 rdi
  0002f	5d		 pop	 rbp
  00030	c3		 ret	 0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 477  :     _NODISCARD static constexpr int_type eof() noexcept {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 478  :         return static_cast<int_type>(EOF);

  0001b	b8 ff ff ff ff	 mov	 eax, -1

; 479  :     }

  00020	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00027	5f		 pop	 rdi
  00028	5d		 pop	 rbp
  00029	c3		 ret	 0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z
_TEXT	SEGMENT
tv69 = 192
tv68 = 196
_Meta$ = 240
?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z PROC	; std::_Narrow_char_traits<char,int>::not_eof, COMDAT

; 473  :     _NODISCARD static constexpr int_type not_eof(const int_type& _Meta) noexcept {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 474  :         return _Meta != eof() ? _Meta : !eof();

  0001f	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00024	48 8b 8d f0 00
	00 00		 mov	 rcx, QWORD PTR _Meta$[rbp]
  0002b	39 01		 cmp	 DWORD PTR [rcx], eax
  0002d	74 11		 je	 SHORT $LN5@not_eof
  0002f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Meta$[rbp]
  00036	8b 00		 mov	 eax, DWORD PTR [rax]
  00038	89 85 c0 00 00
	00		 mov	 DWORD PTR tv69[rbp], eax
  0003e	eb 2b		 jmp	 SHORT $LN6@not_eof
$LN5@not_eof:
  00040	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  00045	85 c0		 test	 eax, eax
  00047	75 0c		 jne	 SHORT $LN3@not_eof
  00049	c7 85 c4 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv68[rbp], 1
  00053	eb 0a		 jmp	 SHORT $LN4@not_eof
$LN3@not_eof:
  00055	c7 85 c4 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv68[rbp], 0
$LN4@not_eof:
  0005f	8b 85 c4 00 00
	00		 mov	 eax, DWORD PTR tv68[rbp]
  00065	89 85 c0 00 00
	00		 mov	 DWORD PTR tv69[rbp], eax
$LN6@not_eof:
  0006b	8b 85 c0 00 00
	00		 mov	 eax, DWORD PTR tv69[rbp]

; 475  :     }

  00071	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
?not_eof@?$_Narrow_char_traits@DH@std@@SAHAEBH@Z ENDP	; std::_Narrow_char_traits<char,int>::not_eof
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
tv65 = 192
_Left$ = 240
_Right$ = 248
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 469  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 470  :         return _Left == _Right;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002b	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00032	8b 09		 mov	 ecx, DWORD PTR [rcx]
  00034	39 08		 cmp	 DWORD PTR [rax], ecx
  00036	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00038	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv65[rbp], 1
  00042	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  00044	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv65[rbp], 0
$LN4@eq_int_typ:
  0004e	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv65[rbp]

; 471  :     }

  00055	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z
_TEXT	SEGMENT
_Ch$ = 224
?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z PROC ; std::_Narrow_char_traits<char,int>::to_int_type, COMDAT

; 465  :     _NODISCARD static constexpr int_type to_int_type(const _Elem& _Ch) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 466  :         return static_cast<unsigned char>(_Ch);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Ch$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 467  :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?to_int_type@?$_Narrow_char_traits@DH@std@@SAHAEBD@Z ENDP ; std::_Narrow_char_traits<char,int>::to_int_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z
_TEXT	SEGMENT
_Meta$ = 224
?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z PROC ; std::_Narrow_char_traits<char,int>::to_char_type, COMDAT

; 461  :     _NODISCARD static constexpr _Elem to_char_type(const int_type& _Meta) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 462  :         return static_cast<_Elem>(_Meta);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Meta$[rbp]
  00026	0f b6 00	 movzx	 eax, BYTE PTR [rax]

; 463  :     }

  00029	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00030	5f		 pop	 rdi
  00031	5d		 pop	 rbp
  00032	c3		 ret	 0
?to_char_type@?$_Narrow_char_traits@DH@std@@SADAEBH@Z ENDP ; std::_Narrow_char_traits<char,int>::to_char_type
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?eq@?$_Narrow_char_traits@DH@std@@SA_NAEBD0@Z
_TEXT	SEGMENT
tv67 = 192
_Left$ = 240
_Right$ = 248
?eq@?$_Narrow_char_traits@DH@std@@SA_NAEBD0@Z PROC	; std::_Narrow_char_traits<char,int>::eq, COMDAT

; 453  :     _NODISCARD static constexpr bool eq(const _Elem& _Left, const _Elem& _Right) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 454  :         return _Left == _Right;

  00024	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0002e	48 8b 8d f8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00035	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00038	3b c1		 cmp	 eax, ecx
  0003a	75 0c		 jne	 SHORT $LN3@eq
  0003c	c7 85 c0 00 00
	00 01 00 00 00	 mov	 DWORD PTR tv67[rbp], 1
  00046	eb 0a		 jmp	 SHORT $LN4@eq
$LN3@eq:
  00048	c7 85 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR tv67[rbp], 0
$LN4@eq:
  00052	0f b6 85 c0 00
	00 00		 movzx	 eax, BYTE PTR tv67[rbp]

; 455  :     }

  00059	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  00060	5f		 pop	 rdi
  00061	5d		 pop	 rbp
  00062	c3		 ret	 0
?eq@?$_Narrow_char_traits@DH@std@@SA_NAEBD0@Z ENDP	; std::_Narrow_char_traits<char,int>::eq
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z
_TEXT	SEGMENT
_Left$ = 224
_Right$ = 232
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z PROC ; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 449  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 450  :         _Left = _Right;

  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Left$[rbp]
  0002b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00032	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00035	88 08		 mov	 BYTE PTR [rax], cl

; 451  :     }

  00037	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003e	5f		 pop	 rdi
  0003f	5d		 pop	 rbp
  00040	c3		 ret	 0
?assign@?$_Narrow_char_traits@DH@std@@SAXAEADAEBD@Z ENDP ; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z
_TEXT	SEGMENT
_First$ = 224
_Count$ = 232
_Ch$ = 240
?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z PROC ; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 438  :         _Out_writes_all_(_Count) _Elem* const _First, size_t _Count, const _Elem _Ch) noexcept /* strengthened */ {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 439  :         // assign _Count * _Ch to [_First, ...)
; 440  : #ifdef __cpp_lib_is_constant_evaluated
; 441  :         if (_STD is_constant_evaluated()) {
; 442  :             return _Primary_char_traits::assign(_First, _Count, _Ch);
; 443  :         }
; 444  : #endif // __cpp_lib_is_constant_evaluated
; 445  : 
; 446  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00029	0f be 85 f0 00
	00 00		 movsx	 eax, BYTE PTR _Ch$[rbp]
  00030	4c 8b 85 e8 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00037	8b d0		 mov	 edx, eax
  00039	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First$[rbp]
  00040	e8 00 00 00 00	 call	 memset

; 447  :     }

  00045	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004c	5f		 pop	 rdi
  0004d	5d		 pop	 rbp
  0004e	c3		 ret	 0
?assign@?$_Narrow_char_traits@DH@std@@SAPEADQEAD_KD@Z ENDP ; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
_First$ = 224
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 396  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 397  :         // find length of null-terminated string
; 398  : #if _HAS_CXX17
; 399  : #ifdef __cpp_char8_t
; 400  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 401  : #if _HAS_U8_INTRINSICS
; 402  :             return __builtin_u8strlen(_First);
; 403  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 404  :             return _Primary_char_traits::length(_First);
; 405  : #endif // _HAS_U8_INTRINSICS
; 406  :         } else
; 407  : #endif // __cpp_char8_t
; 408  :         {
; 409  :             return __builtin_strlen(_First);
; 410  :         }
; 411  : #else // _HAS_CXX17
; 412  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First$[rbp]
  00026	e8 00 00 00 00	 call	 strlen

; 413  : #endif // _HAS_CXX17
; 414  :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
_First1$ = 224
_First2$ = 232
_Count$ = 240
?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z PROC	; std::_Char_traits<char,int>::move, COMDAT

; 80   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 81   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 82   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 83   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 84   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 85   : #ifdef __cpp_lib_is_constant_evaluated
; 86   :         if (_STD is_constant_evaluated()) {
; 87   :             // dest: [_First1, _First1 + _Count)
; 88   :             // src: [_First2, _First2 + _Count)
; 89   :             // We need to handle overlapping ranges.
; 90   :             // If _First1 is in the src range, we need a backward loop.
; 91   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 92   : 
; 93   :             if (_First1 == _First2) {
; 94   :                 return _First1; // Self-assignment; either loop would work, but returning immediately is faster.
; 95   :             }
; 96   : 
; 97   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 98   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 99   :             bool _Loop_forward = true;
; 100  : 
; 101  :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 102  :                 if (_First1 == _Src) {
; 103  :                     _Loop_forward = false;
; 104  :                     break;
; 105  :                 }
; 106  :             }
; 107  : 
; 108  :             if (_Loop_forward) {
; 109  :                 for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {
; 110  :                     _First1[_Idx] = _First2[_Idx];
; 111  :                 }
; 112  :             } else {
; 113  :                 for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {
; 114  :                     _First1[_Count - 1 - _Idx] = _First2[_Count - 1 - _Idx];
; 115  :                 }
; 116  :             }
; 117  : 
; 118  :             return _First1;
; 119  :         }
; 120  : #endif // __cpp_lib_is_constant_evaluated
; 121  : 
; 122  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00029	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00030	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  00037	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  0003e	e8 00 00 00 00	 call	 memmove

; 123  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 124  : 
; 125  :         return _First1;

  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _First1$[rbp]

; 126  :     }

  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ENDP	; std::_Char_traits<char,int>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstring
;	COMDAT ?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
_TEXT	SEGMENT
_First1$ = 224
_First2$ = 232
_Count$ = 240
?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z PROC	; std::_Char_traits<char,int>::copy, COMDAT

; 49   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__0D019051_xstring
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 50   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 51   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 52   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 53   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^ / vvv !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 54   : #ifdef __cpp_lib_is_constant_evaluated
; 55   :         if (_STD is_constant_evaluated()) {
; 56   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap; see LWG-3085
; 57   :             for (size_t _Idx = 0; _Idx < _Count; ++_Idx) {
; 58   :                 _First1[_Idx] = _First2[_Idx];
; 59   :             }
; 60   : 
; 61   :             return _First1;
; 62   :         }
; 63   : #endif // __cpp_lib_is_constant_evaluated
; 64   : 
; 65   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00029	4c 8b 85 f0 00
	00 00		 mov	 r8, QWORD PTR _Count$[rbp]
  00030	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _First2$[rbp]
  00037	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _First1$[rbp]
  0003e	e8 00 00 00 00	 call	 memcpy

; 66   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 67   : 
; 68   :         return _First1;

  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _First1$[rbp]

; 69   :     }

  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
?copy@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z ENDP	; std::_Char_traits<char,int>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = 200
_Obj$ = 256
<_Args_0>$ = 264
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 151  :     is_nothrow_constructible_v<_Ty, _Types...>) {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__12269DE6_xutility
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR _Obj$[rbp]
  0002b	e8 00 00 00 00	 call	 ??$addressof@U_Container_proxy@std@@@std@@YAPEAU_Container_proxy@0@AEAU10@@Z ; std::addressof<std::_Container_proxy>
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 ??$_Voidify_iter@PEAU_Container_proxy@std@@@std@@YAPEAXPEAU_Container_proxy@0@@Z ; std::_Voidify_iter<std::_Container_proxy *>
  00038	48 8b d0	 mov	 rdx, rax
  0003b	b9 10 00 00 00	 mov	 ecx, 16
  00040	e8 00 00 00 00	 call	 ??2@YAPEAX_KPEAX@Z	; operator new
  00045	48 89 85 c8 00
	00 00		 mov	 QWORD PTR $T1[rbp], rax
  0004c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR <_Args_0>$[rbp]
  00053	e8 00 00 00 00	 call	 ??$forward@PEAU_Container_base12@std@@@std@@YA$$QEAPEAU_Container_base12@0@AEAPEAU10@@Z ; std::forward<std::_Container_base12 *>
  00058	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0005b	48 8b 8d c8 00
	00 00		 mov	 rcx, QWORD PTR $T1[rbp]
  00062	e8 00 00 00 00	 call	 ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy

; 152  : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 153  :     if (_STD is_constant_evaluated()) {
; 154  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 155  :     } else
; 156  : #endif // __cpp_lib_constexpr_dynamic_alloc
; 157  :     {
; 158  :         ::new (_Voidify_iter(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);
; 159  :     }
; 160  : }

  00067	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0006e	5f		 pop	 rdi
  0006f	5d		 pop	 rbp
  00070	c3		 ret	 0
??$_Construct_in_place@U_Container_proxy@std@@PEAU_Container_base12@2@@std@@YAXAEAU_Container_proxy@0@$$QEAPEAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xstddef
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z
_TEXT	SEGMENT
_Val$ = 224
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 274  : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__E458E21C_xstddef
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 275  :     return __builtin_addressof(_Val);

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR _Val$[rbp]

; 276  : }

  00026	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002d	5f		 pop	 rdi
  0002e	5d		 pop	 rbp
  0002f	c3		 ret	 0
??$addressof@U_Container_base12@std@@@std@@YAPEAU_Container_base12@0@AEAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT

; 1323 :     _CONSTEXPR20_CONTAINER _Basic_container_proxy_ptr12()             = default;

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1316 :     _Container_proxy* _Ptr = nullptr;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1323 :     _CONSTEXPR20_CONTAINER _Basic_container_proxy_ptr12()             = default;

  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
??0_Basic_container_proxy_ptr12@std@@IEAA@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ PROC ; std::_Basic_container_proxy_ptr12::_Release, COMDAT

; 1318 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1319 :         _Ptr = nullptr;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1320 :     }

  0002d	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00034	5f		 pop	 rdi
  00035	5d		 pop	 rbp
  00036	c3		 ret	 0
?_Release@_Basic_container_proxy_ptr12@std@@QEAAXXZ ENDP ; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AEAAXAEAU12@@Z
_TEXT	SEGMENT
_Lock$ = 4
__$ArrayPad$ = 216
this$ = 256
_Right$ = 264
?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AEAAXAEAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators_locked, COMDAT

; 1100 :     void _Swap_proxy_and_iterators_locked(_Container_base12& _Right) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  0001d	b9 0a 00 00 00	 mov	 ecx, 10
  00022	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00027	f3 ab		 rep stosd
  00029	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  00031	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00038	48 33 c5	 xor	 rax, rbp
  0003b	48 89 85 d8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  00049	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1101 :         _Lockit _Lock(_LOCK_DEBUG);

  0004e	ba 03 00 00 00	 mov	 edx, 3
  00053	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1102 :         _Swap_proxy_and_iterators_unlocked(_Right);

  0005d	48 8b 95 08 01
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  00064	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0006b	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AEAAXAEAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked

; 1103 :     }

  00070	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0007a	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AEAAXAEAU12@@Z$rtcFrameData
  00085	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0008a	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00091	48 33 cd	 xor	 rcx, rbp
  00094	e8 00 00 00 00	 call	 __security_check_cookie
  00099	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  000a0	5f		 pop	 rdi
  000a1	5d		 pop	 rbp
  000a2	c3		 ret	 0
?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AEAAXAEAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Lock$ = 4
__$ArrayPad$ = 216
this$ = 256
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT

; 1095 :     void _Orphan_all_locked_v3() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 7c 24 20	 lea	 rdi, QWORD PTR [rsp+32]
  00018	b9 0a 00 00 00	 mov	 ecx, 10
  0001d	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  00022	f3 ab		 rep stosd
  00024	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR [rsp+296]
  0002c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00033	48 33 c5	 xor	 rax, rbp
  00036	48 89 85 d8 00
	00 00		 mov	 QWORD PTR __$ArrayPad$[rbp], rax
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  00044	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1096 :         _Lockit _Lock(_LOCK_DEBUG);

  00049	ba 03 00 00 00	 mov	 edx, 3
  0004e	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??0_Lockit@std@@QEAA@H@Z

; 1097 :         _Orphan_all_unlocked_v3();

  00058	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0005f	e8 00 00 00 00	 call	 ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3

; 1098 :     }

  00064	48 8d 4d 04	 lea	 rcx, QWORD PTR _Lock$[rbp]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_??1_Lockit@std@@QEAA@XZ
  0006e	48 8d 4d e0	 lea	 rcx, QWORD PTR [rbp-32]
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ$rtcFrameData
  00079	e8 00 00 00 00	 call	 _RTC_CheckStackVars
  0007e	48 8b 8d d8 00
	00 00		 mov	 rcx, QWORD PTR __$ArrayPad$[rbp]
  00085	48 33 cd	 xor	 rcx, rbp
  00088	e8 00 00 00 00	 call	 __security_check_cookie
  0008d	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00094	5f		 pop	 rdi
  00095	5d		 pop	 rbp
  00096	c3		 ret	 0
?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AEAAXAEAU12@@Z
_TEXT	SEGMENT
_Temp$ = 8
this$ = 256
_Right$ = 264
?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AEAAXAEAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked, COMDAT

; 1262 : _CONSTEXPR20_CONTAINER void _Container_base12::_Swap_proxy_and_iterators_unlocked(_Container_base12& _Right) noexcept {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1263 :     _Container_proxy* _Temp = _Myproxy;

  00024	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	48 89 45 08	 mov	 QWORD PTR _Temp$[rbp], rax

; 1264 :     _Myproxy                = _Right._Myproxy;

  00032	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00039	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00040	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00043	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1265 :     _Right._Myproxy         = _Temp;

  00046	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0004d	48 8b 4d 08	 mov	 rcx, QWORD PTR _Temp$[rbp]
  00051	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1266 : 
; 1267 :     if (_Myproxy) {

  00054	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0005b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0005f	74 14		 je	 SHORT $LN2@Swap_proxy

; 1268 :         _Myproxy->_Mycont = this;

  00061	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00068	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006b	48 8b 8d 00 01
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00072	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN2@Swap_proxy:

; 1269 :     }
; 1270 : 
; 1271 :     if (_Right._Myproxy) {

  00075	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  0007c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00080	74 14		 je	 SHORT $LN3@Swap_proxy

; 1272 :         _Right._Myproxy->_Mycont = &_Right;

  00082	48 8b 85 08 01
	00 00		 mov	 rax, QWORD PTR _Right$[rbp]
  00089	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008c	48 8b 8d 08 01
	00 00		 mov	 rcx, QWORD PTR _Right$[rbp]
  00093	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN3@Swap_proxy:

; 1273 :     }
; 1274 : }

  00096	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  0009d	5f		 pop	 rdi
  0009e	5d		 pop	 rbp
  0009f	c3		 ret	 0
?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AEAAXAEAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ
_TEXT	SEGMENT
_Pnext$1 = 8
this$ = 256
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT

; 1237 : _CONSTEXPR20_CONTAINER void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1238 :     if (!_Myproxy) { // no proxy, already done

  0001f	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0002a	75 02		 jne	 SHORT $LN5@Orphan_all

; 1239 :         return;

  0002c	eb 52		 jmp	 SHORT $LN1@Orphan_all
$LN5@Orphan_all:

; 1240 :     }
; 1241 : 
; 1242 :     // proxy allocated, drain it
; 1243 :     for (auto& _Pnext = _Myproxy->_Myfirstiter; _Pnext; _Pnext = _Pnext->_Mynextiter) { // TRANSITION, VSO-1269037

  0002e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00035	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00038	48 83 c0 08	 add	 rax, 8
  0003c	48 89 45 08	 mov	 QWORD PTR _Pnext$1[rbp], rax
  00040	eb 12		 jmp	 SHORT $LN4@Orphan_all
$LN2@Orphan_all:
  00042	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  00046	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00049	48 8b 4d 08	 mov	 rcx, QWORD PTR _Pnext$1[rbp]
  0004d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00051	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN4@Orphan_all:
  00054	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  00058	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0005c	74 10		 je	 SHORT $LN3@Orphan_all

; 1244 :         _Pnext->_Myproxy = nullptr;

  0005e	48 8b 45 08	 mov	 rax, QWORD PTR _Pnext$1[rbp]
  00062	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00065	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1245 :     }

  0006c	eb d4		 jmp	 SHORT $LN2@Orphan_all
$LN3@Orphan_all:

; 1246 :     _Myproxy->_Myfirstiter = nullptr;

  0006e	48 8b 85 00 01
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00075	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00078	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN1@Orphan_all:

; 1247 : }

  00080	48 8d a5 e8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+232]
  00087	5f		 pop	 rdi
  00088	5d		 pop	 rbp
  00089	c3		 ret	 0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AEAAXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators@_Container_base12@std@@QEAAXAEAU12@@Z
_TEXT	SEGMENT
this$ = 224
_Right$ = 232
?_Swap_proxy_and_iterators@_Container_base12@std@@QEAAXAEAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators, COMDAT

; 1276 : _CONSTEXPR20_CONTAINER void _Container_base12::_Swap_proxy_and_iterators(_Container_base12& _Right) noexcept {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1277 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1278 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1279 :     if (_STD is_constant_evaluated()) {
; 1280 :         _Swap_proxy_and_iterators_unlocked(_Right);
; 1281 :     } else
; 1282 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1283 :     {
; 1284 :         _Swap_proxy_and_iterators_locked(_Right);

  00024	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Right$[rbp]
  0002b	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00032	e8 00 00 00 00	 call	 ?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AEAAXAEAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_locked

; 1285 :     }
; 1286 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 ^^^ / vvv _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1287 :     _Swap_proxy_and_iterators_unlocked(_Right);
; 1288 : #endif // _ITERATOR_DEBUG_LEVEL != 2
; 1289 : }

  00037	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003e	5f		 pop	 rdi
  0003f	5d		 pop	 rbp
  00040	c3		 ret	 0
?_Swap_proxy_and_iterators@_Container_base12@std@@QEAAXAEAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_Orphan_all@_Container_base12@std@@QEAAXXZ PROC	; std::_Container_base12::_Orphan_all, COMDAT

; 1249 : _CONSTEXPR20_CONTAINER void _Container_base12::_Orphan_all() noexcept {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1250 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1251 : #ifdef __cpp_lib_constexpr_dynamic_alloc
; 1252 :     if (_STD is_constant_evaluated()) {
; 1253 :         _Orphan_all_unlocked_v3();
; 1254 :     } else
; 1255 : #endif // __cpp_lib_constexpr_dynamic_alloc
; 1256 :     {
; 1257 :         _Orphan_all_locked_v3();

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ?_Orphan_all_locked_v3@_Container_base12@std@@AEAAXXZ ; std::_Container_base12::_Orphan_all_locked_v3

; 1258 :     }
; 1259 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1260 : }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?_Orphan_all@_Container_base12@std@@QEAAXXZ ENDP	; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0_Container_base12@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0_Container_base12@std@@QEAA@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT

; 1064 :     _CONSTEXPR20_CONTAINER _Container_base12() noexcept = default;

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 1065 : 
; 1066 :     _Container_base12(const _Container_base12&) = delete;
; 1067 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1068 : 
; 1069 :     _CONSTEXPR20_CONTAINER void _Orphan_all() noexcept;
; 1070 :     _CONSTEXPR20_CONTAINER void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1071 : 
; 1072 :     template <class _Alloc>
; 1073 :     _CONSTEXPR20_CONTAINER void _Alloc_proxy(_Alloc&& _Al) {
; 1074 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1075 :         _Construct_in_place(*_New_proxy, this);
; 1076 :         _Myproxy            = _New_proxy;
; 1077 :         _New_proxy->_Mycont = this;
; 1078 :     }
; 1079 : 
; 1080 :     template <class _Alloc>
; 1081 :     _CONSTEXPR20_CONTAINER void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1082 :         // pre: no iterators refer to the existing proxy
; 1083 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1084 :         _Construct_in_place(*_New_proxy, this);
; 1085 :         _New_proxy->_Mycont = this;
; 1086 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1087 :     }
; 1088 : 
; 1089 :     _Container_proxy* _Myproxy = nullptr;

  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 1064 :     _CONSTEXPR20_CONTAINER _Container_base12() noexcept = default;

  0002d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0003b	5f		 pop	 rdi
  0003c	5d		 pop	 rbp
  0003d	c3		 ret	 0
??0_Container_base12@std@@QEAA@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z
_TEXT	SEGMENT
this$ = 224
_Mycont_$ = 232
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT

; 1056 :     _CONSTEXPR20_CONTAINER _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Mycont_$[rbp]
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1057 : 
; 1058 :     const _Container_base12* _Mycont       = nullptr;
; 1059 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

  00035	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 1056 :     _CONSTEXPR20_CONTAINER _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

  00044	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00052	5f		 pop	 rdi
  00053	5d		 pop	 rbp
  00054	c3		 ret	 0
??0_Container_proxy@std@@QEAA@PEAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
_TEXT	SEGMENT
_Ptr_user$ = 8
_Ptr_container$ = 40
_Min_back_shift$ = 72
_Back_shift$ = 104
_Ptr$ = 352
_Bytes$ = 360
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 153  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H
  00013	48 8d 6c 24 30	 lea	 rbp, QWORD PTR [rsp+48]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 154  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 155  :     _Bytes += _Non_user_size;

  00024	48 8b 85 68 01
	00 00		 mov	 rax, QWORD PTR _Bytes$[rbp]
  0002b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002e	48 83 c0 2f	 add	 rax, 47			; 0000002fH
  00032	48 8b 8d 68 01
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00039	48 89 01	 mov	 QWORD PTR [rcx], rax

; 156  : 
; 157  :     const uintptr_t* const _Ptr_user = reinterpret_cast<uintptr_t*>(_Ptr);

  0003c	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  00043	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00046	48 89 45 08	 mov	 QWORD PTR _Ptr_user$[rbp], rax

; 158  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0004a	b8 08 00 00 00	 mov	 eax, 8
  0004f	48 6b c0 ff	 imul	 rax, rax, -1
  00053	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr_user$[rbp]
  00057	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0005b	48 89 45 28	 mov	 QWORD PTR _Ptr_container$[rbp], rax
$LN4@Adjust_man:

; 159  : 
; 160  :     // If the following asserts, it likely means that we are performing
; 161  :     // an aligned delete on memory coming from an unaligned allocation.
; 162  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

  0005f	b8 08 00 00 00	 mov	 eax, 8
  00064	48 6b c0 fe	 imul	 rax, rax, -2
  00068	48 8b 4d 08	 mov	 rcx, QWORD PTR _Ptr_user$[rbp]
  0006c	48 ba fa fa fa
	fa fa fa fa fa	 mov	 rdx, -361700864190383366 ; fafafafafafafafaH
  00076	48 39 14 01	 cmp	 QWORD PTR [rcx+rax], rdx
  0007a	75 02		 jne	 SHORT $LN14@Adjust_man
  0007c	eb 77		 jmp	 SHORT $LN15@Adjust_man
$LN14@Adjust_man:
$LN7@Adjust_man:
  0007e	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  00084	83 c0 09	 add	 eax, 9
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  0008e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  0009a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0009f	45 33 c9	 xor	 r9d, r9d
  000a2	44 8b c0	 mov	 r8d, eax
  000a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  000ac	b9 02 00 00 00	 mov	 ecx, 2
  000b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  000b7	83 f8 01	 cmp	 eax, 1
  000ba	75 03		 jne	 SHORT $LN19@Adjust_man
  000bc	cc		 int	 3
  000bd	33 c0		 xor	 eax, eax
$LN19@Adjust_man:
  000bf	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  000c5	83 c0 09	 add	 eax, 9
  000c8	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000d1	44 8b c8	 mov	 r9d, eax
  000d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  000db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  000e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  000ef	33 c0		 xor	 eax, eax
  000f1	85 c0		 test	 eax, eax
  000f3	75 89		 jne	 SHORT $LN7@Adjust_man
$LN15@Adjust_man:
  000f5	33 c0		 xor	 eax, eax
  000f7	85 c0		 test	 eax, eax
  000f9	0f 85 60 ff ff
	ff		 jne	 $LN4@Adjust_man

; 163  : 
; 164  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 165  :     // in range [_Min_back_shift, _Non_user_size]
; 166  : #ifdef _DEBUG
; 167  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

  000ff	48 c7 45 48 10
	00 00 00	 mov	 QWORD PTR _Min_back_shift$[rbp], 16

; 168  : #else // ^^^ _DEBUG ^^^ // vvv !_DEBUG vvv
; 169  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 170  : #endif // _DEBUG
; 171  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00107	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  0010e	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_container$[rbp]
  00112	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00115	48 2b c1	 sub	 rax, rcx
  00118	48 89 45 68	 mov	 QWORD PTR _Back_shift$[rbp], rax
$LN10@Adjust_man:

; 172  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0011c	48 83 7d 68 10	 cmp	 QWORD PTR _Back_shift$[rbp], 16
  00121	72 09		 jb	 SHORT $LN16@Adjust_man
  00123	48 83 7d 68 2f	 cmp	 QWORD PTR _Back_shift$[rbp], 47 ; 0000002fH
  00128	77 02		 ja	 SHORT $LN16@Adjust_man
  0012a	eb 77		 jmp	 SHORT $LN17@Adjust_man
$LN16@Adjust_man:
$LN13@Adjust_man:
  0012c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  00132	83 c0 13	 add	 eax, 19
  00135	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FCMFBGOM@invalid?5argument@
  0013c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
  00148	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0014d	45 33 c9	 xor	 r9d, r9d
  00150	44 8b c0	 mov	 r8d, eax
  00153	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GI@MNEMJBML@C?3?2Program?5Files?5?$CIx86?$CJ?2Microsof@
  0015a	b9 02 00 00 00	 mov	 ecx, 2
  0015f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__CrtDbgReport
  00165	83 f8 01	 cmp	 eax, 1
  00168	75 03		 jne	 SHORT $LN20@Adjust_man
  0016a	cc		 int	 3
  0016b	33 c0		 xor	 eax, eax
$LN20@Adjust_man:
  0016d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z@4JA
  00173	83 c0 13	 add	 eax, 19
  00176	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0017f	44 8b c8	 mov	 r9d, eax
  00182	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_1NA@MJBOBEJL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
  00189	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EK@NIFDJFDG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAd?$AAj?$AAu?$AAs?$AAt?$AA_?$AAm?$AAa@
  00190	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
  00197	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__invalid_parameter
  0019d	33 c0		 xor	 eax, eax
  0019f	85 c0		 test	 eax, eax
  001a1	75 89		 jne	 SHORT $LN13@Adjust_man
$LN17@Adjust_man:
  001a3	33 c0		 xor	 eax, eax
  001a5	85 c0		 test	 eax, eax
  001a7	0f 85 6f ff ff
	ff		 jne	 $LN10@Adjust_man

; 173  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  001ad	48 8b 85 60 01
	00 00		 mov	 rax, QWORD PTR _Ptr$[rbp]
  001b4	48 8b 4d 28	 mov	 rcx, QWORD PTR _Ptr_container$[rbp]
  001b8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 174  : }

  001bb	48 8d a5 48 01
	00 00		 lea	 rsp, QWORD PTR [rbp+328]
  001c2	5f		 pop	 rdi
  001c3	5d		 pop	 rbp
  001c4	c3		 ret	 0
?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z
_TEXT	SEGMENT
_Bytes$ = 224
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z PROC ; std::_Default_allocate_traits::_Allocate, COMDAT

; 84   :         void* _Allocate(const size_t _Bytes) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__79D216CD_xmemory
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 85   :         return ::operator new(_Bytes);

  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _Bytes$[rbp]
  00026	e8 00 00 00 00	 call	 ??2@YAPEAX_K@Z		; operator new

; 86   :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
?_Allocate@_Default_allocate_traits@std@@SAPEAX_K@Z ENDP ; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\limits
;	COMDAT ?max@?$numeric_limits@_J@std@@SA_JXZ
_TEXT	SEGMENT
?max@?$numeric_limits@_J@std@@SA_JXZ PROC		; std::numeric_limits<__int64>::max, COMDAT

; 647  :     _NODISCARD static constexpr long long(max)() noexcept {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__7FE5F402_limits
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 648  :         return LLONG_MAX;

  0001b	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH

; 649  :     }

  00025	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002c	5f		 pop	 rdi
  0002d	5d		 pop	 rbp
  0002e	c3		 ret	 0
?max@?$numeric_limits@_J@std@@SA_JXZ ENDP		; std::numeric_limits<__int64>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\exception
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = 200
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 320  : [[noreturn]] inline void _Throw_bad_array_new_length() {

$LN3:
  00000	40 55		 push	 rbp
  00002	57		 push	 rdi
  00003	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0000a	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0000f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__FF458F76_exception
  00016	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 321  :     _THROW(bad_array_new_length{});

  0001b	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00022	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QEAA@XZ ; std::bad_array_new_length::bad_array_new_length
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_TI3?AVbad_array_new_length@std@@
  0002e	48 8d 8d c8 00
	00 00		 lea	 rcx, QWORD PTR $T1[rbp]
  00035	e8 00 00 00 00	 call	 _CxxThrowException
$LN2@Throw_bad_:

; 322  : }

  0003a	48 8d a5 f8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+248]
  00041	5f		 pop	 rdi
  00042	5d		 pop	 rbp
  00043	c3		 ret	 0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_array_new_length@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_array_new_length@std@@UEAAPEAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1bad_array_new_length@std@@UEAA@XZ
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gbad_array_new_length@std@@UEAAPEAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_array_new_length@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_array_new_length@std@@QEAA@AEBV01@@Z PROC	; std::bad_array_new_length::bad_array_new_length, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0bad_alloc@std@@QEAA@AEBV01@@Z
  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00039	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@AEBV01@@Z ENDP	; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_array_new_length@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_array_new_length@std@@UEAA@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??1bad_array_new_length@std@@UEAA@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0bad_array_new_length@std@@QEAA@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT

; 141  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B0A13A33_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 140  :         : bad_alloc("bad array new length")

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
  00026	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0002d	e8 00 00 00 00	 call	 ??0bad_alloc@std@@AEAA@QEBD@Z ; std::bad_alloc::bad_alloc

; 141  :     {

  00032	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_array_new_length@std@@6B@
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx

; 142  :     }

  00043	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0004a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00051	5f		 pop	 rdi
  00052	5d		 pop	 rbp
  00053	c3		 ret	 0
??0bad_array_new_length@std@@QEAA@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_alloc@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gbad_alloc@std@@UEAAPEAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1bad_alloc@std@@UEAA@XZ
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gbad_alloc@std@@UEAAPEAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_alloc@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
__that$ = 232
??0bad_alloc@std@@QEAA@AEBV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR __that$[rbp]
  0001f	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00026	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@AEBV01@@Z ; std::exception::exception
  0002b	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  00039	48 89 08	 mov	 QWORD PTR [rax], rcx
  0003c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??0bad_alloc@std@@QEAA@AEBV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1bad_alloc@std@@UEAA@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001a	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
??1bad_alloc@std@@UEAA@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AEAA@QEBD@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
??0bad_alloc@std@@AEAA@QEBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT

; 130  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B0A13A33_vcruntime_exception@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 129  :         : exception(_Message, 1)

  00024	41 b8 01 00 00
	00		 mov	 r8d, 1
  0002a	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _Message$[rbp]
  00031	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  00038	e8 00 00 00 00	 call	 ??0exception@std@@QEAA@QEBDH@Z ; std::exception::exception

; 130  :     {

  0003d	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7bad_alloc@std@@6B@
  0004b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 131  :     }

  0004e	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00055	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0005c	5f		 pop	 rdi
  0005d	5d		 pop	 rbp
  0005e	c3		 ret	 0
??0bad_alloc@std@@AEAA@QEBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_Gexception@std@@UEAAPEAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	55		 push	 rbp
  0000a	57		 push	 rdi
  0000b	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00012	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00017	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0001e	e8 00 00 00 00	 call	 ??1exception@std@@UEAA@XZ ; std::exception::~exception
  00023	8b 85 e8 00 00
	00		 mov	 eax, DWORD PTR __flags$[rbp]
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	74 11		 je	 SHORT $LN2@scalar
  00030	ba 18 00 00 00	 mov	 edx, 24
  00035	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR this$[rbp]
  0003c	e8 00 00 00 00	 call	 ??3@YAXPEAX_K@Z		; operator delete
$LN2@scalar:
  00041	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00048	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004f	5f		 pop	 rdi
  00050	5d		 pop	 rbp
  00051	c3		 ret	 0
??_Gexception@std@@UEAAPEAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UEBAPEBDXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?what@exception@std@@UEBAPEBDXZ PROC			; std::exception::what, COMDAT

; 94   :     {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B0A13A33_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 95   :         return _Data._What ? _Data._What : "Unknown exception";

  0001f	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0002b	74 14		 je	 SHORT $LN3@what
  0002d	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00034	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00038	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
  0003f	eb 0e		 jmp	 SHORT $LN4@what
$LN3@what:
  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BC@EOODALEL@Unknown?5exception@
  00048	48 89 85 c0 00
	00 00		 mov	 QWORD PTR tv69[rbp], rax
$LN4@what:
  0004f	48 8b 85 c0 00
	00 00		 mov	 rax, QWORD PTR tv69[rbp]

; 96   :     }

  00056	48 8d a5 d8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+216]
  0005d	5f		 pop	 rdi
  0005e	5d		 pop	 rbp
  0005f	c3		 ret	 0
?what@exception@std@@UEBAPEBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1exception@std@@UEAA@XZ PROC				; std::exception::~exception, COMDAT

; 89   :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B0A13A33_vcruntime_exception@h
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  0002d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 90   :         __std_exception_destroy(&_Data);

  00030	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00037	48 83 c0 08	 add	 rax, 8
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	e8 00 00 00 00	 call	 __std_exception_destroy

; 91   :     }

  00043	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0004a	5f		 pop	 rdi
  0004b	5d		 pop	 rbp
  0004c	c3		 ret	 0
??1exception@std@@UEAA@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@AEBV01@@Z
_TEXT	SEGMENT
this$ = 224
_Other$ = 232
??0exception@std@@QEAA@AEBV01@@Z PROC			; std::exception::exception, COMDAT

; 72   :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B0A13A33_vcruntime_exception@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00032	48 89 08	 mov	 QWORD PTR [rax], rcx

; 71   :         : _Data()

  00035	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0003c	48 83 c0 08	 add	 rax, 8
  00040	48 8b f8	 mov	 rdi, rax
  00043	33 c0		 xor	 eax, eax
  00045	b9 10 00 00 00	 mov	 ecx, 16
  0004a	f3 aa		 rep stosb

; 73   :         __std_exception_copy(&_Other._Data, &_Data);

  0004c	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00053	48 83 c0 08	 add	 rax, 8
  00057	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Other$[rbp]
  0005e	48 83 c1 08	 add	 rcx, 8
  00062	48 8b d0	 mov	 rdx, rax
  00065	e8 00 00 00 00	 call	 __std_exception_copy

; 74   :     }

  0006a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00071	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00078	5f		 pop	 rdi
  00079	5d		 pop	 rbp
  0007a	c3		 ret	 0
??0exception@std@@QEAA@AEBV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QEAA@QEBDH@Z
_TEXT	SEGMENT
this$ = 224
_Message$ = 232
__formal$ = 240
??0exception@std@@QEAA@QEBDH@Z PROC			; std::exception::exception, COMDAT

; 66   :     {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__B0A13A33_vcruntime_exception@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00029	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_7exception@std@@6B@
  00037	48 89 08	 mov	 QWORD PTR [rax], rcx

; 65   :         : _Data()

  0003a	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00041	48 83 c0 08	 add	 rax, 8
  00045	48 8b f8	 mov	 rdi, rax
  00048	33 c0		 xor	 eax, eax
  0004a	b9 10 00 00 00	 mov	 ecx, 16
  0004f	f3 aa		 rep stosb

; 67   :         _Data._What = _Message;

  00051	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  00058	48 8b 8d e8 00
	00 00		 mov	 rcx, QWORD PTR _Message$[rbp]
  0005f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 68   :     }

  00063	48 8b 85 e0 00
	00 00		 mov	 rax, QWORD PTR this$[rbp]
  0006a	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00071	5f		 pop	 rdi
  00072	5d		 pop	 rbp
  00073	c3		 ret	 0
??0exception@std@@QEAA@QEBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\wchar.h
;	COMDAT wmemcpy
_TEXT	SEGMENT
_S1$ = 224
_S2$ = 232
_N$ = 240
wmemcpy	PROC						; COMDAT

; 234  :     {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	55		 push	 rbp
  00010	57		 push	 rdi
  00011	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00018	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__93DC0B45_wchar@h
  00024	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 235  :         #pragma warning(suppress: 6386) // Buffer overrun
; 236  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

  00029	48 8b 85 f0 00
	00 00		 mov	 rax, QWORD PTR _N$[rbp]
  00030	48 d1 e0	 shl	 rax, 1
  00033	4c 8b c0	 mov	 r8, rax
  00036	48 8b 95 e8 00
	00 00		 mov	 rdx, QWORD PTR _S2$[rbp]
  0003d	48 8b 8d e0 00
	00 00		 mov	 rcx, QWORD PTR _S1$[rbp]
  00044	e8 00 00 00 00	 call	 memcpy

; 237  :     }

  00049	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00050	5f		 pop	 rdi
  00051	5d		 pop	 rbp
  00052	c3		 ret	 0
wmemcpy	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include\vcruntime_new.h
;	COMDAT ??2@YAPEAX_KPEAX@Z
_TEXT	SEGMENT
_Size$ = 224
_Where$ = 232
??2@YAPEAX_KPEAX@Z PROC					; operator new, COMDAT

; 167  :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__97D3638F_vcruntime_new@h
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode

; 168  :         (void)_Size;
; 169  :         return _Where;

  00024	48 8b 85 e8 00
	00 00		 mov	 rax, QWORD PTR _Where$[rbp]

; 170  :     }

  0002b	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00032	5f		 pop	 rdi
  00033	5d		 pop	 rbp
  00034	c3		 ret	 0
??2@YAPEAX_KPEAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Rahul Kumar\source\repos\Ch04_02_sol\Ch04_02\Ch04_02.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX_K@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
?__empty_global_delete@@YAXPEAX_K@Z PROC		; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	55		 push	 rbp
  0000b	57		 push	 rdi
  0000c	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00013	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__76BBE5F6_Ch04_02@cpp
  0001f	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  00024	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  0002b	5f		 pop	 rdi
  0002c	5d		 pop	 rbp
  0002d	c3		 ret	 0
?__empty_global_delete@@YAXPEAX_K@Z ENDP		; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\Rahul Kumar\source\repos\Ch04_02_sol\Ch04_02\Ch04_02.cpp
;	COMDAT ?__empty_global_delete@@YAXPEAX@Z
_TEXT	SEGMENT
__formal$ = 224
?__empty_global_delete@@YAXPEAX@Z PROC			; __empty_global_delete, COMDAT

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	55		 push	 rbp
  00006	57		 push	 rdi
  00007	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0000e	48 8d 6c 24 20	 lea	 rbp, QWORD PTR [rsp+32]
  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__76BBE5F6_Ch04_02@cpp
  0001a	e8 00 00 00 00	 call	 __CheckForDebuggerJustMyCode
  0001f	48 8d a5 c8 00
	00 00		 lea	 rsp, QWORD PTR [rbp+200]
  00026	5f		 pop	 rdi
  00027	5d		 pop	 rbp
  00028	c3		 ret	 0
?__empty_global_delete@@YAXPEAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
